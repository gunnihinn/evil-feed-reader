<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dan Luu</title>
    <link>https://danluu.com/</link>
    <description>Recent content on Dan Luu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://danluu.com/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why does Sattolo&#39;s algorithm produce a permutation with exactly one cycle?</title>
      <link>https://danluu.com/sattolo/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://danluu.com/sattolo/</guid>
      <description>I recently had a problem where part of the solution was to do a series of pointer accesses that would walk around a chunk of memory in pseudo-random order. Sattolo&amp;rsquo;s algorithm provides a solution to this because it produces a permutation of a list with exactly one cycle, which guarantees that we will reach every element of the list even though we&amp;rsquo;re traversing it in random order.
However, the explanations of why the algorithm worked that I could find online either used some kind of mathematical machinery (stirling numbers, assuming familiarity with cycle notation, etc.</description>
    </item>
    
    <item>
      <title>Terminal and shell performance</title>
      <link>https://danluu.com/term-latency/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://danluu.com/term-latency/</guid>
      <description>There’s a great MSR demo from 2012 that shows the effect of latency on the experience of using a tablet. If you don’t want to watch the three minute video, they basically created a device which could simulate arbitrary latencies down to a fraction of a millisecond. At 100ms (1/10th of a second), which is typical of consumer tablets, the experience is terrible. At 10ms (1/100th of a second), the latency is noticeable, but the experience is ok, and at &amp;lt; 1ms the experience is great, as good as pen and paper.</description>
    </item>
    
    <item>
      <title>Is the keyboard faster than the mouse?</title>
      <link>https://danluu.com/keyboard-v-mouse/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://danluu.com/keyboard-v-mouse/</guid>
      <description>Which is faster, keyboard or mouse? A large number of programmers believe that the keyboard is faster for all (programming-related) tasks. However, there are a few widely cited webpages that claim that “studies” show that using the mouse is faster than using the keyboard for everything and that people who think that using the keyboard is faster are just deluding themselves. This might sound extreme, but, just for example, one page says that the author has “never seen [the keyboard] outperform the mouse”.</description>
    </item>
    
    <item>
      <title>Options vs. cash</title>
      <link>https://danluu.com/startup-options/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://danluu.com/startup-options/</guid>
      <description>I often talk to startups that claim that their compensation package has a higher expected value than the equivalent package at a place like Facebook, Google, Twitter, or Snapchat. One thing I don’t understand about this claim is, if the claim is true, why shouldn’t the startup go to an investor, sell their options for what they claim their options to be worth, and then pay me in cash? The non-obvious value of options combined with their volatility is a barrier for recruiting.</description>
    </item>
    
    <item>
      <title>How web bloat affects people with slow connections</title>
      <link>https://danluu.com/web-bloat/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://danluu.com/web-bloat/</guid>
      <description>A couple years ago, I took a road trip from Wisconsin to Washington and mostly stayed in rural hotels on the way. I expected the internet in rural areas too sparse to have cable internet to be slow, but I was still surprised that a large fraction of the web was inaccessible. Some blogs with lightweight styling were readable, as were pages by academics who hadn’t updated the styling on their website since 1995.</description>
    </item>
    
    <item>
      <title>HN: the good parts</title>
      <link>https://danluu.com/hn-comments/</link>
      <pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://danluu.com/hn-comments/</guid>
      <description>HN comments are terrible. On any topic I’m informed about, the vast majority of comments are pretty clearly wrong. Most of the time, there are zero comments from people who know anything about the topic and the top comment is reasonable sounding but totally incorrect. Additionally, many comments are gratuitously mean. You&amp;rsquo;ll often hear mean comments backed up with something like &amp;ldquo;this is better than the other possibility, where everyone just pats each other on the back with comments like &amp;lsquo;this is great&amp;rsquo;&amp;rdquo;, as if being an asshole is some sort of talisman against empty platitudes.</description>
    </item>
    
    <item>
      <title>Programming books you might want to consider reading</title>
      <link>https://danluu.com/programming-books/</link>
      <pubDate>Sun, 16 Oct 2016 01:06:34 -0700</pubDate>
      
      <guid>https://danluu.com/programming-books/</guid>
      <description>There are a lot of “12 CS books every programmer must read” lists floating around out there. That&amp;rsquo;s nonsense. The field is too broad for almost any topic to be required reading for all programmers, and even if a topic is that important, people&amp;rsquo;s learning preferences differ too much for any book on that topic to be the best book on the topic for all people.
This is a list of topics and books where I&amp;rsquo;ve read the book, am familiar enough with the topic to say what you might get out of learning more about the topic, and have read other books and can say why you&amp;rsquo;d want to read one book over another.</description>
    </item>
    
    <item>
      <title>Developer hiring and the market for lemons</title>
      <link>https://danluu.com/hiring-lemons/</link>
      <pubDate>Sun, 09 Oct 2016 02:44:14 -0700</pubDate>
      
      <guid>https://danluu.com/hiring-lemons/</guid>
      <description>Joel Spolsky has a classic blog post on &amp;ldquo;Finding Great Developers&amp;rdquo; where he popularized the meme that great developers are impossible to find, a corollary of which is that if you can find someone, they&amp;rsquo;re not great. Joel writes,
 The great software developers, indeed, the best people in every field, are quite simply never on the market.
The average great software developer will apply for, total, maybe, four jobs in their entire career.</description>
    </item>
    
    <item>
      <title>Why&#39;s that company so big? I could do that in a weekend</title>
      <link>https://danluu.com/sounds-easy/</link>
      <pubDate>Mon, 03 Oct 2016 01:14:27 -0700</pubDate>
      
      <guid>https://danluu.com/sounds-easy/</guid>
      <description>I can&amp;rsquo;t think of a single large software company that doesn&amp;rsquo;t regularly draw internet comments of the form “What do all the employees do? I could build their product myself.” Benjamin Pollack and Jeff Atwood called out people who do that with Stack Overflow. But Stack Overflow is relatively obviously lean, so the general response is something like “oh, sure maybe Stack Overflow is lean, but FooCorp must really be bloated”.</description>
    </item>
    
    <item>
      <title>Is developer compensation becoming bimodal?</title>
      <link>https://danluu.com/bimodal-compensation/</link>
      <pubDate>Mon, 26 Sep 2016 23:33:26 -0700</pubDate>
      
      <guid>https://danluu.com/bimodal-compensation/</guid>
      <description>Developer compensation has skyrocketed since the demise of the Google et al. wage-suppressing no-hire agreement, to the point where compensation rivals and maybe even exceeds compensation in traditionally remunerative fields like law, consulting, etc.
Those fields have sharply bimodal income distributions. Are programmers in for the same fate? Let&amp;rsquo;s see what data we can find. First, let&amp;rsquo;s look at data from the National Association for Law Placement, which shows when legal salaries become bimodal.</description>
    </item>
    
    <item>
      <title>How I learned to program</title>
      <link>https://danluu.com/learning-to-program/</link>
      <pubDate>Mon, 12 Sep 2016 01:41:26 -0700</pubDate>
      
      <guid>https://danluu.com/learning-to-program/</guid>
      <description>Tavish Armstrong has a great document where he describes how and when he learned the programming skills he has. I like this idea because I&amp;rsquo;ve found that the paths that people take to get into programming are much more varied than stereotypes give credit for, and I think it&amp;rsquo;s useful to see that there are many possible paths into programming.
Personally, I spent a decade working as an electrical engineer before taking a programming job.</description>
    </item>
    
    <item>
      <title>Notes on concurrency bugs</title>
      <link>https://danluu.com/concurrency-bugs/</link>
      <pubDate>Thu, 04 Aug 2016 20:32:26 -0700</pubDate>
      
      <guid>https://danluu.com/concurrency-bugs/</guid>
      <description>Do concurrency bugs matter? From the literature, we know that most reported bugs in distributed systems have really simple causes and can be caught by trivial tests, even when we only look at bugs that cause really bad failures, like loss of a cluster or data corruption. The filesystem literature echos this result &amp;ndash; a simple checker that looks for totally unimplemented error handling can find hundreds of serious data corruption bugs.</description>
    </item>
    
    <item>
      <title>Modest list of programming blogs</title>
      <link>https://danluu.com/programming-blogs/</link>
      <pubDate>Mon, 18 Apr 2016 00:06:34 -0700</pubDate>
      
      <guid>https://danluu.com/programming-blogs/</guid>
      <description>This is one of those “N technical things every programmer must read” lists, except that “programmer” is way too broad a term and the styles of writing people find helpful for them are too different for any such list to contain a non-zero number of items (if you want the entire list to be helpful to everyone). So here&amp;rsquo;s a list of some things you might want to read, and why you might (or might not) want to read them.</description>
    </item>
    
    <item>
      <title>Notes on Google&#39;s Site Reliability Engineering book</title>
      <link>https://danluu.com/google-sre-book/</link>
      <pubDate>Mon, 11 Apr 2016 01:00:58 -0700</pubDate>
      
      <guid>https://danluu.com/google-sre-book/</guid>
      <description>The book starts with a story about a time [Margaret Hamilton](https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)) brought her young daughter with her to NASA, back in the days of the Apollo program. During a simulation mission, her daughter caused the mission to crash by pressing some keys that caused a prelaunch program to run during the simulated mission. Hamilton submitted a change request to add error checking code to prevent the error from happening again, but the request was rejected because the error case should never happen.</description>
    </item>
    
    <item>
      <title>We only hire the best means we only hire the trendiest</title>
      <link>https://danluu.com/programmer-moneyball/</link>
      <pubDate>Mon, 21 Mar 2016 00:23:44 -0700</pubDate>
      
      <guid>https://danluu.com/programmer-moneyball/</guid>
      <description>An acquaintance of mine, let’s call him Mike, is looking for work after getting laid off from a contract role at Microsoft, which has happened to a lot of people I know. Like me, Mike has 11 years in industry. Unlike me, he doesn&amp;rsquo;t know a lot of folks at trendy companies, so I passed his resume around to some engineers I know at companies that are desperately hiring. My engineering friends thought Mike&amp;rsquo;s resume was fine, but most recruiters rejected him in the resume screening phase.</description>
    </item>
    
  </channel>
</rss>