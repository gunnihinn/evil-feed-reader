<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Daniel Lemire&#039;s blog</title>
	<atom:link href="http://lemire.me/blog/feed/" rel="self" type="application/rss+xml" />
	<link>http://lemire.me/blog</link>
	<description>Daniel Lemire is a computer science professor at the University of Quebec. His research is focused on software performance and indexing. He is a techno-optimist. </description>
	<lastBuildDate>Sun, 30 Jul 2017 16:16:41 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.1</generator>

<image>
	<url>http://lemire.me/blog/wp-content/uploads/2015/10/profile2011_152-150x150.jpg</url>
	<title>Daniel Lemire&#039;s blog</title>
	<link>http://lemire.me/blog</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Science and Technology links (July 27th, 2017)</title>
		<link>http://lemire.me/blog/2017/07/28/science-and-technology-links-july-27th-2017/</link>
		<comments>http://lemire.me/blog/2017/07/28/science-and-technology-links-july-27th-2017/#respond</comments>
		<pubDate>Fri, 28 Jul 2017 13:13:37 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12920</guid>
		<description><![CDATA[Currently, damage to the retina is largely viewed as irreversible. However, some researchers were able to generate retinal cells in mice. Toyota is reportedly ready to commercialize, within 5 years, a new type of batteries called &#8220;solid state&#8221;. They would be lighter than the current lithium batteries and would work well over a wider range &#8230; <a href="http://lemire.me/blog/2017/07/28/science-and-technology-links-july-27th-2017/" class="more-link">Continue reading <span class="screen-reader-text">Science and Technology links (July 27th, 2017)</span></a>]]></description>
				<content:encoded><![CDATA[<p>Currently, damage to the retina is largely viewed as irreversible. However, some researchers <a href="http://hsnewsbeat.uw.edu/story/scientists-regenerate-retinal-cells-mice">were able to generate retinal cells in mice</a>.</p>
<p><a href="https://arstechnica.com/cars/2017/07/toyota-wants-to-commercialize-solid-state-ev-batteries-by-2022-reports-say/">Toyota is reportedly ready to commercialize, within 5 years, a new type of batteries called &#8220;solid state&#8221;</a>. They would be lighter than the current lithium batteries and would work well over a wider range of temperatures.</p>
<p><a href="http://www.cnn.com/2017/07/24/us/moon-water-study/index.html">It is possible that the Moon might be rich in water, after all.</a> This would make the Moon an attractive destination since water has many useful applications.</p>
<p><a href="https://www.technologyreview.com/s/608350/first-human-embryos-edited-in-us/">Though it happens elsewhere in the world, scientists have edited the genes of embryos for the first time in the US</a>. It is unlikely to lead to the production of genetically superior children on a large scale, at least for the foreseeable future.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/07/28/science-and-technology-links-july-27th-2017/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Science and Technology links (July 21st, 2017)</title>
		<link>http://lemire.me/blog/2017/07/21/science-and-technology-links-july-21st-2017/</link>
		<comments>http://lemire.me/blog/2017/07/21/science-and-technology-links-july-21st-2017/#comments</comments>
		<pubDate>Fri, 21 Jul 2017 13:57:41 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12900</guid>
		<description><![CDATA[Want proof that you live in the future? Ok. There is this &#8220;cryptocurrency&#8221; called ethereum and it is causing a shortage of microprocessors: Demand from Ethereum miners has created temporary shortages of some of the graphics cards, according to analysts, who cite sold-out products at online retailers. Estimates of additional sales from this demand run &#8230; <a href="http://lemire.me/blog/2017/07/21/science-and-technology-links-july-21st-2017/" class="more-link">Continue reading <span class="screen-reader-text">Science and Technology links (July 21st, 2017)</span></a>]]></description>
				<content:encoded><![CDATA[<p>Want proof that you live in the future? Ok. <a href="https://www.bloomberg.com/news/articles/2017-07-17/chipmakers-nvidia-amd-ride-cryptocurrency-wave-for-now">There is this &#8220;cryptocurrency&#8221; called ethereum and it is causing a shortage of microprocessors</a>:</p>
<blockquote><p>Demand from Ethereum miners has created temporary shortages of some of the graphics cards, according to analysts, who cite sold-out products at online retailers. Estimates of additional sales from this demand run as high as $875 million, according to RBC Capital Markets analyst Mitch Steves. That would roughly equal AMD’s total sales from graphics chips last year, or half of Nvidia’s quarterly sales of those components. </p></blockquote>
<p>This is all very strange.</p>
<p>It is not exactly known why hair turns gray as well age, but it is largely reported as an irreversible process linked with cells dying out. Yet time and time again, there are anecdotes of graying reversal. The latest one was published in a reputable journal (JAMA Dermatology) that <a href="https://twitter.com/JAMADerm/status/885257464702173184">even tweeted a picture</a>. In that report, 14 cancer patients have seen their hair pigmentation come back. That offers a powerful hint that we could reverse gray hair with the right therapy. Obviously, there are cheap and obvious ways to turn your hair any color you like at any age&#8230; but such reports remind us that there is much we do not understand yet.</p>
<p><a href="http://www.popsci.com/intel-teraflop-chip">Intel&#8217;s latest chip, the Core i9 X-series, can produce one teraflop of computing performance for about $2000</a>. If you have 2 billion dollars, you can theoretically buy a million of these chips and produce the first exascale supercomputer. Of course, you&#8217;ll also cause a massive power shortage in your neighborhood if you ever turn the thing on.</p>
<p>Jeff Bezos, the president of Amazon,  is 53, and so he was in his early 30s when he started out his business. <a href="https://photos.app.goo.gl/s00zf3MXjZlW9rEi1">A picture of him offering a side-by-side comparison, 20 years ago and today, has been widely distributed</a>. I would not contradict the current Jeff Bezos: he looks like he could break me in half.</p>
<p>Our brains are poor at repairing themselves. There is such a thing as in vivo neuroregeneration, but it is not widespread in the human body. <a href="http://www.kurzweilai.net/neural-stem-cells-steered-by-electric-fields-can-repair-brain-damage">Researchers have found that using by using the right electrical field</a>, they could entice stem cells to relocate where repairs are needed and then differentiate appropriately. </p>
<p>We all know that we inherit our genes from our parents. Then our cells turn on or off those genes through a set of poorly understood techniques called epigenetics. This is necessary if only for cell differentiation: the cells from your brain have the same genes as the cells from your toes,  but they express different genes. The older version of you has the same genes as the younger version, but the older you express more genes. It is believed that lifestyle can affect genes. If you starve all your life or exercise intensively, you will express different genes. But can this program of gene expression be passed on to your children? It seems that you can, at least in some specific ways. <a href="http://science.sciencemag.org/content/357/6347/212">A recent article in Science</a> makes a case for it:</p>
<blockquote><p>
Parents provide genetic information that guides the development of the offspring. Zenk et al. show that epigenetic information, in the form of the repressive mark H3K27me3, is also propagated to the offspring and regulates proper gene expression in the embryo. Preventing the propagation of maternally inherited H3K27me3 led to precocious gene activation and, ultimately, embryo lethality.</p></blockquote>
<p>In the early days of the XIXth century, there was debate as to how species evolved. How did the giraffes get long necks? The commonly accepted view is that of Darwin: giraffes with longer necks tended to survive longer and to have more offsprings so that over time, giraffes acquired longer and longer necks, one generation at a time. There were theories that predate Darwinism, one of them by Jean-Baptiste Lamarck. Lamarck believed in soft inheritance. For example, he would believe that if your parents are body builders, you would inherit larger muscles. Lamarck&#8217;s view is now discredited, but if epigenetic markers can be passed on to offsprings, then we would be forced to conclude that he was partly right. If you follow the logic of the Science article, it is conceivable that in a society of bodybuilders, kids could receive epigenetic markers that enhance muscle growth. I should point out that even if epigenetic markers are passed on, this does not put into question Darwinism: at best, Darwinism is an incomplete theory.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/07/21/science-and-technology-links-july-21st-2017/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>What is &#8220;modern&#8221; programming?</title>
		<link>http://lemire.me/blog/2017/07/15/what-is-modern-programming/</link>
		<comments>http://lemire.me/blog/2017/07/15/what-is-modern-programming/#comments</comments>
		<pubDate>Sat, 15 Jul 2017 16:05:05 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12872</guid>
		<description><![CDATA[As a young teenager, I dabbled with basic and some assembly. Things got serious when I learned Turbo Pascal. &#8220;Now we are talking&#8221;, I thought. Turbo Pascal offered one of the earliest examples of Integrated Development Environment (IDE). In effect, an IDE is a program that lets you conveniently write, compile, debug and run code, &#8230; <a href="http://lemire.me/blog/2017/07/15/what-is-modern-programming/" class="more-link">Continue reading <span class="screen-reader-text">What is &#8220;modern&#8221; programming?</span></a>]]></description>
				<content:encoded><![CDATA[<p>As a young teenager, I dabbled with basic and some assembly. Things got serious when I learned Turbo Pascal. &#8220;Now we are talking&#8221;, I thought.<a href="https://photos.app.goo.gl/WcxNIutwtWmFTdzL2"> Turbo Pascal offered one of the earliest examples of Integrated Development Environment (IDE)</a>. In effect, an IDE is a program that lets you conveniently write, compile, debug and run code, all within a friendly environment. Turbo Pascal did not have much in the way of graphics (it was text-based), but it had menus and windows. You could enter a debugging mode, track the value of variables, and so forth.</p>
<p>Then I moved on to <a href="https://photos.app.goo.gl/QnCWPHDcp4Drzev12">Delphi</a> (a graphical Turbo Pascal) and it had a superb IDE that would still look good today. I played with <a href="https://www.youtube.com/watch?v=TgIrzFqGIKM">Visual Basic</a>, designing a &#8220;talking clock&#8221; that I published on Bulletin Board Systems at the time (with Windows 3.1). Then I found out about Visual Studio&#8230; For years, my reference for C++ programming was Visual Studio. So it was all IDEs, all the time.</p>
<p><a href="https://www.youtube.com/watch?v=e0LfndNxqZg">Smalltalk famously had powerful graphical IDEs back in the early 1980s</a>.</p>
<p>My point is that using an IDE is not &#8220;modern&#8221;. The present is very much like the past. What we program has changed, but, in many instances, how we program has not changed. I have the latest Visual Studio on my Dell laptop. The man I was 20 years ago would be perfectly at ease with it. Debugging, code completion, code execution&#8230; it is much like it was. In fact, Visual Studio was never very different from Turbo Pascal. And I find this deeply depressing. I think we should make much faster progress than we are.</p>
<p>I submit to you that modern programming has little to do with the look of your desktop. Graphical user interfaces are only skin deep. Modern programming techniques are all about processes and actual tools, not the skin on top of them. I don&#8217;t care whether you are using Eclipse or Emacs&#8230; this tells me nothing about how modern you are. </p>
<p>So what is &#8220;modern&#8221;? </p>
<ul>
<li>Coding is social. Twenty years ago, it was sensible to require everyone in your organization to use the exact same IDE and to depend uniquely on your IDE to build, test, deploy code&#8230; But there are lots of smart people outside of your organization and they often do not use your IDE. And today you can reach them. This means that you must be wise regarding the tools and processes you adopt.
<p>If you mock people who program using the Atom text editor, Visual Studio or Emacs, you are not being social. You need to be as inclusive as possible, or pay the price.
</li>
<li>The Go language comes with its own formatting tool. I don&#8217;t care whether you reformat your code automagically as you save, or whether click a button,  or whether you type <tt>go fmt</tt>, it is all the same&#8230; and it is definitively a great, modern idea. It is progress. All programming languages should force upon the users a unique code format. No more bikeshedding.
<p>And so we are clear, Java had guidelines, but guidelines are insufficient. We need a tool that takes the code as an input and generates a uniquely defined output where everything is dealt with, from line length to spaces.</p>
<p>The goals are that there is never any possible argument as to how the code should be formatted and that the correct format is produced without effort. I cannot tell you how important that is.</li>
<li>Programming languages like Rust, Go, Swift&#8230; come with their own package management system. So, in Swift, for example, I can create a small text file called <tt>Package.swift</tt> and put it at the root of my project, where I declare my dependencies&#8230;
<pre style='color:#000000;background:#ffffff;overflow-x: hidden;'><span style='color:#800000; font-weight:bold; '>import</span> PackageDescription

let package <span style='color:#808030; '>=</span> Package<span style='color:#808030; '>(</span>
    name<span style='color:#800080; '>:</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>SwiftBitsetBenchmark</span><span style='color:#800000; '>"</span><span style='color:#808030; '>,</span>
    dependencies<span style='color:#800080; '>:</span> <span style='color:#808030; '>[</span>
   <span style='color:#808030; '>.</span>Package<span style='color:#808030; '>(</span>url<span style='color:#800080; '>:</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>https://github.com/lemire/SwiftBitset.git</span><span style='color:#800000; '>"</span><span style='color:#808030; '>,</span>  
          majorVersion<span style='color:#800080; '>:</span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>)</span><span style='color:#808030; '>,</span>
   <span style='color:#808030; '>.</span>Package<span style='color:#808030; '>(</span>url<span style='color:#800080; '>:</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>https://github.com/lemire/Swimsuit.git</span><span style='color:#800000; '>"</span><span style='color:#808030; '>,</span>  
          majorVersion<span style='color:#800080; '>:</span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>)</span>
    <span style='color:#808030; '>]</span>
<span style='color:#808030; '>)</span>
</pre>
<p>(<a href="https://github.com/lemire/SwiftBitsetBenchmark">Source example</a>.)</p>
<p>Then I can type <tt>swift build</tt> and the software will automatically grab the dependencies and build my program. And this works everywhere Swift runs. It does not matter which text editor or IDE you are using.</p>
<p>You don&#8217;t want to use text editor, and you prefer to use a graphical interface? Fine. It makes no difference.</p>
<p>Why is that modern? Because automatically resolving dependencies with so little effort would have looked like magic to me 20 years ago. And it is immensely important to resolve dependencies automatically and systematically. I do not want to ever have to manually install and deploy a dependency.  I want other people to be able to add my library to their project in seconds,  not minutes or hours.</p>
<p>Yes, you can add it to existing languages (e.g., as Maven or IDEs do with Java), but there needs to be a unique approach that just works.
</li>
<li>Programming languages like Go, Swift and Rust support unit testing from the start. In Go, for example, create a file <tt>myproject_test.go</tt> and add functions like <tt>func TestMyStuff(t *testing.T)</tt>, then type <tt>go test</tt> and that is all. Twenty years ago, hardly anyone tested their code, today it is an absolute requirement and it needs to be done in a unique manner so you can move from project to project and always know how the tests are done.
<p>If I cannot spot sane unit tests in your code right away, I will assume that your code is badly broken.</li>
<li>Continuous integration: as code changes, you want a remote tool to grab the new code and test it&#8230; so that a regression can be stopped early. It is not enough that people can run tests on your code, they also need to see the results of automated testing and check the eventual failures for themselves.
<p>Continuous integration is part of a larger scheme: you must automate like crazy when you program. Manual labor should be minimized. And sometimes that means that you really ought to only click on a button, but what it should never mean is that you repeatedly need to follow a complicated sequence of commands, whether through a graphical user interface or through a command shell.
</li>
<li>Version control. Twenty years ago, it made sense to write your code on your desktop and send the new code (as patches) by email. But this only makes sense when the pace of collaboration is slow. Today, this would be insane. Anything less than Git is backward. Note that even Microsoft builds Windows using Git today.</li>
</ul>
<p>So what happens when you work with smart students who never learned about modern programming? They look at a command like <tt>go get</tt> and they only see the skin (a command line). They think it is backward. Where are the flashy graphics?</p>
<p>They work within a nice-looking IDE like Visual Studio or Eclipse and they are convinced that they are &#8220;modern&#8221;, totally oblivious to the fact that IDEs go back decades. And then instead of using the IDE for its strengths, such as better affordance and faster operations, and adopting modern programming techniques elsewhere&#8230; they stick with old-school programming:</p>
<ul>
<li>No test. At least, no automated and systematic test.</li>
<li>Hard dependencies on a specific setup.</li>
<li>No automation. No continuous integration. No automated deployment.</li>
</ul>
<p>They are programming just like I did when I started out decades ago with <a href="https://photos.app.goo.gl/WcxNIutwtWmFTdzL2">Turbo Pascal</a>. It is very much old school, despite the graphical user interfaces.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/07/15/what-is-modern-programming/feed/</wfw:commentRss>
		<slash:comments>20</slash:comments>
		</item>
		<item>
		<title>Science and Technology links (July 14th, 2017)</title>
		<link>http://lemire.me/blog/2017/07/14/science-and-technology-links-july-14th-2017/</link>
		<comments>http://lemire.me/blog/2017/07/14/science-and-technology-links-july-14th-2017/#comments</comments>
		<pubDate>Fri, 14 Jul 2017 14:05:34 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12877</guid>
		<description><![CDATA[PC shipments are at the lowest level of the last 10 years, and they have been declining for the last two years. Using smartphone data, researchers are able for the first in history to measure objectively how active people are. Lots of prior research relied on questionnaires, but self-reported numbers are often much less objective &#8230; <a href="http://lemire.me/blog/2017/07/14/science-and-technology-links-july-14th-2017/" class="more-link">Continue reading <span class="screen-reader-text">Science and Technology links (July 14th, 2017)</span></a>]]></description>
				<content:encoded><![CDATA[<p><a href="http://www.cnbc.com/2017/07/13/pc-shipments-declined-gartner-says.html">PC shipments are at the lowest level of the last 10 years</a>, and they have been declining for the last two years.</p>
<p>Using smartphone data, researchers are able for the first in history to measure objectively how active people are. Lots of prior research relied on questionnaires, but self-reported numbers are often much less objective than direct measures. <a href="http://www.nature.com/nature/journal/vaop/ncurrent/full/nature23018.html">A recent paper in Nature</a> reports on their findings based on this better methodology. I find it interesting that people in Asia are often very active, followed by Europe&#8230; while people in America are much less active. The researchers also report that there is a lot of inequality within countries as to how active are, especially among the female population.</p>
<p>We need some perspective: I think that activity data is only the start. In the near future, we might be able to monitor the health of millions of people, and we might arrive at major breakthroughs by analyzing the resulting data. </p>
<p>Affordable, consumer-grade virtual reality (VR) started out about a year ago in 2016. The initial hardware releases were better than I was hoping. However, the software is lacking so the overall uptake is much weaker than what I was hoping for. I think we are in a chicken-or-the-egg dilemma, with software developers being unwilling to invest massively due to the lack of hardware penetration, and consumers are unwilling to invest in hardware due to the lack of software. It is not hopeless, however. The hardware is good, but it is complicated and still relatively expensive. This week, Facebook dropped the price of <a  href="http://a-fwd.com/asin-com=B01LYCUM3L&com=daniellemires-20&ca=danilemisblog-20&uk=danilemisblog-21&de=danilemisbl05-21&fr=danilemisbl0e-21&it=danilemisbl02-21&jp=danilemisblog-22&cn=danilemisblog-23&fb=com&sc=w"  rel="nofollow">the Oculus Rift and its controller to US$400</a>. You still need a gamer PC, which limits the market somewhat despite the price drop. Regarding the software, I am told that a huge market for the likes of the Oculus Rift is porn and it is booming market. Sadly, I don&#8217;t have nearly as much experience with VR porn as I should. Still, if games can&#8217;t drive VR, I am sure porn can.  Bloomberg predicts that <a href="https://www.bloomberg.com/news/articles/2017-07-13/facebook-said-to-plan-200-wireless-oculus-vr-headset-for-2018">Facebook might release a $200 wireless headset in 2018</a>, and we know that HTC Vive will release a wireless headset of its own. However, we don&#8217;t just need &#8220;wireless&#8221;, we also need &#8220;standalone&#8221;. It would be fine for high-quality headsets to come with a base of some sort, but the need to purchase, maintain and upgrade a Windows PC is too much. Not everyone is a gamer or a porn consumer. Another key point that I missed in the first year of the current VR revolution is the resolution issue. The current high-end headsets (HTC Vive and Oculus Rift) are quite good at giving you the illusion that you are in a virtual world&#8230; but because of the relatively low resolution of the headset, you are embodied in a character that has weak eyesight. This is apparent if you try to use VR as a virtual office: reading a document in VR is a painful experience&#8230; you have to bring the document in your face to be able to read comfortably. In the PlayStation VR headset, you can play non-VR games, but the experience is disappointing because of the low resolution. The resolution must be much higher than it is currently. You should be able to look at a TV screen in VR, and get a 1080p experience. This means that the headset itself must have a resolution much, much higher than 1080p. Or we need some kind of technological tricks.</p>
<p><a href="http://www.npr.org/sections/health-shots/2017/07/12/536812206/living-drug-that-fights-cancer-by-harnessing-the-immune-system-clears-key-hurdle">The American FDA is about to approve what amounts to an anti-cancer gene therapy</a>.</p>
<p>Apparently, President Trump has been complimenting the French first lady&#8217;s body. She is 64.</p>
<p>There is no computer that comes close to reaching one exaflop. It is often believed that if we had such a computer, we could run a full human brain simulation and, possibly, achieve human-like intelligence through a digital computer. Currently, the most powerful computers are all in China. <a href="https://www.nextbigfuture.com/2017/07/update-on-the-race-to-the-exaflop-supercomputer.html">The US government is apparently trying to stir things up by throwing money at the cause</a>.  The difficulty in reaching one exaflop with our current technology is power usage. That is, we could probably build right now a one exaflop computer, but we could not continuously power it up. To get some idea&#8230; a medium-size power station might generate something like 500 MegaWatts. Currently, you can buy graphics cards that generate a teraflop for 500 Watts. An exaflop is a million teraflops, so you&#8217;d need a million of these powerful cards, or 500 MegaWatts. I might be off by an order of magnitude, but the point is that you&#8217;d need a power station just to power your exaflop computer. Hardware is only as useful as the software that runs on it&#8230; and if you need a whole power station to keep the hardware running, chances are that you are not going to be given a lot of freedom in running software experiments. So a one exaflop computer that costs a fortune to run is probably nearly useless. For all of the money invested in massive computers, I cannot recall any discovery or breakthrough that followed.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/07/14/science-and-technology-links-july-14th-2017/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>Pruning spaces faster on ARM processors with Vector Table Lookups</title>
		<link>http://lemire.me/blog/2017/07/10/pruning-spaces-faster-on-arm-processors-with-vector-table-lookups/</link>
		<comments>http://lemire.me/blog/2017/07/10/pruning-spaces-faster-on-arm-processors-with-vector-table-lookups/#comments</comments>
		<pubDate>Mon, 10 Jul 2017 16:20:45 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12853</guid>
		<description><![CDATA[Last week, I asked how fast one could remove spaces from a string using ARM processors. On a particular benchmark, I got 2.4 cycles per byte using regular (scalar) code and as little as 1.8 cycles per byte using ARM NEON instructions. These are &#8220;vectorized instructions&#8221; that you find in virtually all ARM processors. Vectorized &#8230; <a href="http://lemire.me/blog/2017/07/10/pruning-spaces-faster-on-arm-processors-with-vector-table-lookups/" class="more-link">Continue reading <span class="screen-reader-text">Pruning spaces faster on ARM processors with Vector Table Lookups</span></a>]]></description>
				<content:encoded><![CDATA[<p>Last week, <a href="http://lemire.me/blog/2017/07/03/pruning-spaces-from-strings-quickly-on-arm-processors/">I asked how fast one could remove spaces from a string using ARM processors</a>. On a particular benchmark, I got 2.4 cycles per byte using regular (scalar) code and as little as 1.8 cycles per byte using ARM NEON instructions. These are &#8220;vectorized instructions&#8221; that you find in virtually all ARM processors. Vectorized instructions operate over wide registers (spanning at least 16 bytes), often executing the same operation (such as addition or multiplication) over several values at once. However, my trick using ARM NEON instructions relied on the fact that my input stream would contain few spaces. So it was not a very positive blog post for ARM processors.</p>
<p>But then I got feedback from several experts such as <a href="https://github.com/mmozeiko">Martins Mozeiko</a>, <a href="https://speakerdeck.com/notorca">Cyril Lashkevich</a> and <a href="https://stackoverflow.com/users/25653/derek-ledbetter">Derek Ledbetter</a>. This feedback made me realize that I had grossly underestimated the power of ARM NEON instructions. One reason for my mistake is that I had been looking at older ARM NEON instructions instead of the current AArch64 instructions, which are much more powerful. </p>
<p>To recap, on an x64 processor, you can remove spaces from strings very quickly using vectorized instructions in the following manner:</p>
<ul>
<li>Compare 16 bytes of input characters with white space characters to determine where (if anywhere) there are white space characters.</li>
<li>The result of the comparison is itself a 16-byte register, where matching characters have the byte value 255 whereas non-matching characters have the byte value 0. Turn this vector register to a 16-bit integer value by &#8220;downsampling&#8221; the bits. This can be achieved by a &#8220;movemask&#8221; instruction present in all x64 processors since the introduction of the Pentium 4 a long time ago.</li>
<li>From this mask, compute the number of white space characters by counting the 1s. This can be done with the <tt>popcnt</tt> instruction.</li>
<li>From this mask also, load up a &#8220;shuffling register&#8221; that tells you how to reorder the bytes so that white space characters are omitted. Then use what Intel and AMD call a &#8220;shuffling instruction&#8221; (<tt>pshufb</tt> introduced with the SSSE3 instruction set many years ago) to quickly reorder the bytes.</li>
</ul>
<p>I thought that the same could not be done with ARM NEON, but I was wrong. If you have access to recent AMD processors (supporting AArch64), then you can closely mimic the x64 processors and get good performance.</p>
<p>Let us review the various components. </p>
<p>To start, we can quickly compare 16 byte values with the byte value 33 to quickly identify common white space characters such as the space, the line ending, the carriage return and so forth.</p>
<pre style='color:#000000;background:#ffffff;'>uint8x16_t is_nonwhite<span style='color:#808030; '>(</span>uint8x16_t data<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  <span style='color:#800000; font-weight:bold; '>return</span> vcgeq_u8<span style='color:#808030; '>(</span>data<span style='color:#808030; '>,</span> vdupq_n_u8<span style='color:#808030; '>(</span><span style='color:#0000e6; '>' '</span><span style='color:#808030; '>+</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>
<p>ARM NEON has convenient &#8220;reduce&#8221; instructions, so I can sum up the values of a vector. I can put this to go use to quickly compute how many matching characters I have:</p>
<pre style='color:#000000;background:#ffffff;'>uint8_t bytepopcount<span style='color:#808030; '>(</span>uint8x16_t v<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  <span style='color:#800000; font-weight:bold; '>return</span> vaddvq_u8<span style='color:#808030; '>(</span>vshrq_n_u8<span style='color:#808030; '>(</span>v<span style='color:#808030; '>,</span><span style='color:#008c00; '>7</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>
<p>To compute a 16-bit mask, I also use such a reduce function after computing the bitwise AND of my comparison with some convenient vector (which allows me to distinguish which characters match)&#8230;</p>
<pre style='color:#000000;background:#ffffff;'>uint16_t neonmovemask_addv<span style='color:#808030; '>(</span>uint8x16_t input8<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  uint16x8_t input <span style='color:#808030; '>=</span> vreinterpretq_u16_u8<span style='color:#808030; '>(</span>input8<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  <span style='color:#800000; font-weight:bold; '>const</span> uint16x8_t bitmask <span style='color:#808030; '>=</span> <span style='color:#800080; '>{</span> <span style='color:#008000; '>0x0101</span> <span style='color:#808030; '>,</span> <span style='color:#008000; '>0x0202</span><span style='color:#808030; '>,</span> <span style='color:#008000; '>0x0404</span><span style='color:#808030; '>,</span> <span style='color:#008000; '>0x0808</span><span style='color:#808030; '>,</span> <span style='color:#008000; '>0x1010</span><span style='color:#808030; '>,</span> <span style='color:#008000; '>0x2020</span><span style='color:#808030; '>,</span> <span style='color:#008000; '>0x4040</span><span style='color:#808030; '>,</span> <span style='color:#008000; '>0x8080</span> <span style='color:#800080; '>}</span><span style='color:#800080; '>;</span>
  uint16x8_t minput <span style='color:#808030; '>=</span> vandq_u16<span style='color:#808030; '>(</span>input<span style='color:#808030; '>,</span> bitmask<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  <span style='color:#800000; font-weight:bold; '>return</span> vaddvq_u16<span style='color:#808030; '>(</span>minput<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>
<p>Finally, I call a Vector Table Lookup instruction which is pretty much equivalent to Intel/AMD&#8217;s shuffle instruction:</p>
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>int</span> mask16bits <span style='color:#808030; '>=</span>  neonmovemask_addv<span style='color:#808030; '>(</span>data<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
uint8x16_t shuf <span style='color:#808030; '>=</span> vld1q_u8<span style='color:#808030; '>(</span>shufmask <span style='color:#808030; '>+</span> <span style='color:#008c00; '>16</span> <span style='color:#808030; '>*</span> mask16bits<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
uint8x16_t reshuf <span style='color:#808030; '>=</span> vqtbl1q_u8<span style='color:#808030; '>(</span>data<span style='color:#808030; '>,</span>shuf<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
</pre>
<p>Of course, I am not explaining everything in detail. <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2017/07/10">My full source code is available</a>. All you need is access to a recent ARM processor with Linux running on it, and you are all set to run it.</p>
<p>It turns out that we can double my previous best score:</p>
<table>
<tr>
<td>scalar</td>
<td>1.40 ns</td>
</tr>
<tr>
<td>NEON (old code)     </td>
<td>0.92 ns</td>
</tr>
<td>NEON (Vector Table Lookup)     </td>
<td>0.52 ns</td>
</tr>
</table>
<p>What is better is that my new code is effectively branchless: its performance is not very sensitive to the input data.</p>
<p>Using the fact that I know the clock speed of my processor, I can make a quick comparison in terms of CPU cycles per input byte&#8230;</p>
<table>
<tr>
<th>scalar</th>
<th>ARM</th>
<th>recent x64</th>
</tr>
<tr>
<td>scalar</td>
<td>2.4 cycles</td>
<td>1.2 cycles</td>
</tr>
<tr>
<td>vectorized (NEON AArch64 and SSSE3)      </td>
<td>0.88 cycles</td>
<td>0.25 cycles</td>
</tr>
</table>
<p>(<a href="https://github.com/lemire/despacer">The source code for x64 processors is available on GitHub</a>.)</p>
<p>What is interesting is that we are getting under one cycle per input byte which is a kind of performance that is difficult to achieve with scalar code that writes byte values one by one. It is still the case that the ARM NEON code is over three times slower than the equivalent on x64 processors, but I am using a relatively weak core (A57 on a <a href="https://softiron.com/products/overdrive-1000/">Softiron Overdrive 1000</a>) and my code might be subject to further optimization.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/07/10/pruning-spaces-faster-on-arm-processors-with-vector-table-lookups/feed/</wfw:commentRss>
		<slash:comments>16</slash:comments>
		</item>
		<item>
		<title>Science and Technology links (July 7th, 2017)</title>
		<link>http://lemire.me/blog/2017/07/07/science-and-technology-links-july-7th-2017/</link>
		<comments>http://lemire.me/blog/2017/07/07/science-and-technology-links-july-7th-2017/#comments</comments>
		<pubDate>Fri, 07 Jul 2017 15:22:02 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12848</guid>
		<description><![CDATA[People magazine recently named Julia Roberts, who is 49, as the World’s Most Beautiful Woman. Volvo plans to commercialize self-driving cars in 2020, and all electric by 2019. France will ban petrol cars in 2040. The Fermi paradox is the idea that we ought to see intelligent life in the universe, since it is so &#8230; <a href="http://lemire.me/blog/2017/07/07/science-and-technology-links-july-7th-2017/" class="more-link">Continue reading <span class="screen-reader-text">Science and Technology links (July 7th, 2017)</span></a>]]></description>
				<content:encoded><![CDATA[<p><a href="http://people.com/movies/julia-roberts-worlds-most-beautiful-woman-2017/">People magazine recently named Julia Roberts, who is 49, as the World’s Most Beautiful Woman</a>.</p>
<p><a href="https://www.theguardian.com/technology/2017/jul/01/volvo-admits-its-self-driving-cars-are-confused-by-kangaroos">Volvo plans to commercialize self-driving cars in 2020</a>, and all electric by 2019. <a href="https://www.theguardian.com/business/2017/jul/06/france-ban-petrol-diesel-cars-2040-emmanuel-macron-volvo">France will ban petrol cars in 2040</a>.</p>
<p>The Fermi paradox is the idea that we ought to see intelligent life in the universe, since it is so vast&#8230; yet we have no evidence for it. <a href="http://www.jodrellbank.manchester.ac.uk/media/eps/jodrell-bank-centre-for-astrophysics/news-and-events/2017/uksrn-slides/Anders-Sandberg---Dissolving-Fermi-Paradox-UKSRN.pdf">Sandberg et al. claims that there is no paradox because the probability of life is simply too small</a>: we might be a unique or nearly unique case.</p>
<p>According to an article in Nature, <a href="https://www.nature.com/articles/ncomms15904">caffeine helps to fight obesity in mice</a>.</p>
<p>The New York Times has an article about <a href="https://mobile.nytimes.com/2017/06/27/technology/education-partovi-computer-science-coding-apple-microsoft.html">how tech companies have successfully lobbied schools to include computer science in their curriculum</a>. I have mixed feelings about this entire story. I think we should resist the temptation to think that because learning to program can be highly beneficial for some, then many people should learn it. It is just not true that we will have millions of programmers in 20 years. Programming is and will remain a specialized activity.</p>
<p>There is a lot of talk about <a href="https://m.medicalxpress.com/news/2017-06-vaccine-cancer-growth-closer-human.html">cancer vaccines</a>, where your immune system is geared up to fight the specific kind of cancer you have. It is worth repeating that we are nowhere near a cure for cancer.<br />
<a href="https://m.medicalxpress.com/news/2017-07-drug-cells-memories-alzheimer-mouse.html">Scientists claim to have cured Alzheimer&#8217;s</a> (in mice): &#8220;The drug completely erased evidence of Alzheimer&#8217;s synapse damage and memory loss in mouse models of the disease.&#8221;</p>
<p>Concerned with the poor quality of modern-day science, <a href="https://osf.io/preprints/psyarxiv/djbcw">Vazire writes that</a> &#8220;the drive for eminence is inherently at odds with scientific values&#8221;.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/07/07/science-and-technology-links-july-7th-2017/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Are your strings immutable?</title>
		<link>http://lemire.me/blog/2017/07/07/are-your-strings-immutable/</link>
		<comments>http://lemire.me/blog/2017/07/07/are-your-strings-immutable/#comments</comments>
		<pubDate>Fri, 07 Jul 2017 14:55:00 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12842</guid>
		<description><![CDATA[A value is immutable if it cannot change. Immutability is a distinct notion than that of a constant. The speed of light in a vacuum is believed to be a universal constant, for example. Constants are immutable in the sense that they cannot change. However, immutability refers to values, not to the assignment of values. &#8230; <a href="http://lemire.me/blog/2017/07/07/are-your-strings-immutable/" class="more-link">Continue reading <span class="screen-reader-text">Are your strings immutable?</span></a>]]></description>
				<content:encoded><![CDATA[<p>A value is <em>immutable</em> if it cannot change.</p>
<p>Immutability is a distinct notion than that of a <em>constant</em>. The speed of light in a vacuum is believed to be a universal constant, for example. Constants are immutable in the sense that they cannot change. However, immutability refers to values, not to the assignment of values. For example, the number 3 is immutable. However, if I say that your rank is 3, this rank could change. That&#8217;s because your rank is a variable, and variables may change their values even if these values are immutable.</p>
<p>That is, a variable may change its value to point to a different immutable value. That&#8217;s a somewhat confusing point for non-programmers. For example, my name is &#8220;Daniel&#8221;. To say that strings are immutable is to say that I cannot change the string &#8220;Daniel&#8221;. However, I can certainly go see the government and have my first name changed so that it is &#8220;Jack&#8221;. Yet this change does not modify the string &#8220;Daniel&#8221;.  If I could change the string &#8220;Daniel&#8221; then, possibly, all individuals named &#8220;Daniel&#8221; would see their name changed.</p>
<p>So in the world around us, values are typically immutable. And that&#8217;s largely why it is believed that immutable values are safer and easier.</p>
<p>Working with mutable values requires more experience and more care. For example, not only does changing the string &#8220;Daniel&#8221;  affect all people named &#8220;Daniel&#8221;, but what if two people try to change the string at the same time?</p>
<p>So integer values are always immutable, not only in real life but also in software. There is no programming language where you can redefine the value &#8220;3&#8221; to be equal to &#8220;5&#8221;.</p>
<p>Yet I believe that most programming languages in widespread use have mutable arrays. That is, once you have created an array of values, you can always change any one of the entries. Why is that? Because immutability could get costly as any change to an immutable array would need to be implemented as a copy.</p>
<p>Arguably, the most important non-numeric type in software is the string. A string can be viewed as an array of characters so it would not be unreasonable to make it mutable, but strings are also viewed as primitive values (e.g., we don&#8217;t think of &#8220;Daniel&#8221; as an array of 6 characters). Consequently, some languages have immutable strings, others have mutable strings. Do you know whether the strings in your favorite language are mutable?</p>
<ul>
<li>In Java, C#, JavaScript, Python and Go, strings are immutable. Furthermore, Java, C#, JavaScript and Go have the notion of a constant: a &#8220;variable&#8221; that cannot be reassigned. (I am unsure how well constants are implemented and supported in JavaScript, however.)</li>
<li>In Ruby and PHP, strings are mutable.</li>
<li>The C language does not really have string objects per se. However, we commonly represent strings as a pointer <tt>char *</tt>. In general, C strings are mutable. The C++ language has its own string class. It is mutable.
<p>In both C and C++, string constants (declared with the <tt>const</tt> qualifier) are immutable,  but you can easily &#8220;cast away&#8221; the <tt>const</tt> qualifier, so the immutability is weakly enforced.</li>
<li>In Swift, strings are mutable.
<p>However, if you declare a string to be a constant (keyword <tt>let</tt>), then it is immutable.
</ul>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/07/07/are-your-strings-immutable/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Pruning spaces from strings quickly on ARM processors</title>
		<link>http://lemire.me/blog/2017/07/03/pruning-spaces-from-strings-quickly-on-arm-processors/</link>
		<comments>http://lemire.me/blog/2017/07/03/pruning-spaces-from-strings-quickly-on-arm-processors/#comments</comments>
		<pubDate>Mon, 03 Jul 2017 19:27:58 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12827</guid>
		<description><![CDATA[Suppose that I give you a relatively long string and you want to remove all spaces from it. In ASCII, we can define spaces as the space character (&#8216;&#160;&#8216;), and the line ending characters (&#8216;\r&#8217; and &#8216;\n&#8217;). I am mostly interested in algorithmic and performance issues, so we can simplify the problem by removing all &#8230; <a href="http://lemire.me/blog/2017/07/03/pruning-spaces-from-strings-quickly-on-arm-processors/" class="more-link">Continue reading <span class="screen-reader-text">Pruning spaces from strings quickly on ARM processors</span></a>]]></description>
				<content:encoded><![CDATA[<p>Suppose that I give you a relatively long string and you want to remove all spaces from it. In ASCII, we can define spaces as the space character (&#8216;&nbsp;&#8216;), and the line ending characters (&#8216;\r&#8217; and &#8216;\n&#8217;).  I am mostly interested in algorithmic and performance issues, so we can simplify the problem by removing all byte values less or equal to 32. </p>
<p><a href="http://lemire.me/blog/2017/01/20/how-quickly-can-you-remove-spaces-from-a-string/">In a previous post where I asked how quickly we could prune spaces</a>, the best answer involved vectorization using 128-bit registers (SSSE3). It ends up being between 5 and 10 times faster than the naive approach.   </p>
<p>Conveniently enough, ARM processors all have 128-bit vector registers, just like x64 processors.  So can we make ARM processors go as fast as x64 processors?</p>
<p>Let us first consider a fast scalar implementation:</p>
<pre style='color:#000000;background:#ffffff;'><span style='color:#603000; '>size_t</span> i <span style='color:#808030; '>=</span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>,</span> pos <span style='color:#808030; '>=</span> <span style='color:#008c00; '>0</span><span style='color:#800080; '>;</span>
<span style='color:#800000; font-weight:bold; '>while</span> <span style='color:#808030; '>(</span>i <span style='color:#808030; '>&lt;</span> howmany<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>char</span> c <span style='color:#808030; '>=</span> bytes<span style='color:#808030; '>[</span>i<span style='color:#808030; '>+</span><span style='color:#808030; '>+</span><span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>
    bytes<span style='color:#808030; '>[</span>pos<span style='color:#808030; '>]</span> <span style='color:#808030; '>=</span> c<span style='color:#800080; '>;</span>
    pos <span style='color:#808030; '>+</span><span style='color:#808030; '>=</span> <span style='color:#808030; '>(</span>c <span style='color:#808030; '>></span> <span style='color:#008c00; '>32</span> <span style='color:#800080; '>?</span> <span style='color:#008c00; '>1</span> <span style='color:#800080; '>:</span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>
<p>This prunes all character values less or equal to 32, writing back the data in-place. It is very fast.</p>
<p>Can we do better with vector instructions? Vector instructions are instructions supported by virtually all modern processors that operate over wide registers (16 bytes or more).</p>
<p>On x64 processors, the winning strategy is to grab 16 bytes of data, quickly compare against white space characters, then extract a mask (or bitset) value made of 16 bits, one bit per character, where each bit indicates whether the value found is a white space. The construction of such a bitset is cheap on an x64 processor, as there is a dedicated instruction (<tt>movemask</tt>). There is no such instruction on ARM processors. You can emulate <tt>movemask</tt> using several instructions.</p>
<p>So we cannot proceed as we did on x64 processors. What can we do?</p>
<p>Just like with SSSE3, we can quickly check whether byte values are less or equal to 32, thus identifying white space characters:</p>
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>static</span> <span style='color:#800000; font-weight:bold; '>inline</span> uint8x16_t is_white<span style='color:#808030; '>(</span>uint8x16_t data<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  <span style='color:#800000; font-weight:bold; '>const</span> uint8x16_t wchar <span style='color:#808030; '>=</span> vdupq_n_u8<span style='color:#808030; '>(</span><span style='color:#0000e6; '>' '</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  uint8x16_t isw <span style='color:#808030; '>=</span> vcleq_u8<span style='color:#808030; '>(</span>data<span style='color:#808030; '>,</span> wchar<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  <span style='color:#800000; font-weight:bold; '>return</span> isw<span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>
<p>Next we can quickly check whether any of the 16 characters is a white space, by using about two instructions:</p>
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>static</span> <span style='color:#800000; font-weight:bold; '>inline</span> uint64_t is_not_zero<span style='color:#808030; '>(</span>uint8x16_t v<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  uint64x2_t v64 <span style='color:#808030; '>=</span> vreinterpretq_u64_u8<span style='color:#808030; '>(</span>v<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  uint32x2_t v32 <span style='color:#808030; '>=</span> vqmovn_u64<span style='color:#808030; '>(</span>v64<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  uint64x1_t result <span style='color:#808030; '>=</span> vreinterpret_u64_u32<span style='color:#808030; '>(</span>v32<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  <span style='color:#800000; font-weight:bold; '>return</span> result<span style='color:#808030; '>[</span><span style='color:#008c00; '>0</span><span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>
<p>This suggests a useful strategy. Instead of comparing characters one by one, compare 16 characters at once. If none of them is a white space character, just copy the 16 characters back to the input and move on. Otherwise, we fall back on the slow scalar approach, with the added benefit that we do not need to repeat the comparison:</p>
<pre style='color:#000000;background:#ffffff;'>uint8x16_t vecbytes <span style='color:#808030; '>=</span> vld1q_u8<span style='color:#808030; '>(</span><span style='color:#808030; '>(</span>uint8_t <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>bytes <span style='color:#808030; '>+</span> i<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
uint8x16_t w <span style='color:#808030; '>=</span> is_white<span style='color:#808030; '>(</span>vecbytes<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
uint64_t haswhite <span style='color:#808030; '>=</span> is_not_zero<span style='color:#808030; '>(</span>w<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
w0 <span style='color:#808030; '>=</span> vaddq_u8<span style='color:#808030; '>(</span>justone<span style='color:#808030; '>,</span> w<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800000; font-weight:bold; '>if</span><span style='color:#808030; '>(</span><span style='color:#808030; '>!</span>haswhite<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
      vst1q_u8<span style='color:#808030; '>(</span><span style='color:#808030; '>(</span>uint8_t <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>bytes <span style='color:#808030; '>+</span> pos<span style='color:#808030; '>,</span>vecbytes<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
      pos <span style='color:#808030; '>+</span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>16</span><span style='color:#800080; '>;</span>
      i <span style='color:#808030; '>+</span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>16</span><span style='color:#800080; '>;</span>
 <span style='color:#800080; '>}</span> <span style='color:#800000; font-weight:bold; '>else</span> <span style='color:#800080; '>{</span>
      <span style='color:#800000; font-weight:bold; '>for</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>int</span> k <span style='color:#808030; '>=</span> <span style='color:#008c00; '>0</span><span style='color:#800080; '>;</span> k <span style='color:#808030; '>&lt;</span> <span style='color:#008c00; '>16</span><span style='color:#800080; '>;</span> k<span style='color:#808030; '>+</span><span style='color:#808030; '>+</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
        bytes<span style='color:#808030; '>[</span>pos<span style='color:#808030; '>]</span> <span style='color:#808030; '>=</span> bytes<span style='color:#808030; '>[</span>i<span style='color:#808030; '>+</span><span style='color:#808030; '>+</span><span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>
        pos <span style='color:#808030; '>+</span><span style='color:#808030; '>=</span> w<span style='color:#808030; '>[</span>k<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>
     <span style='color:#800080; '>}</span>
<span style='color:#800080; '>}</span>
</pre>
<p>Most of the benefit from this approach would come if you can often expect streams of 16 bytes to contain no white space character. This seems like a good guess in many applications.</p>
<p>I wrote a benchmark where I try to estimate how long it takes to prune spaces, on a per character basis, using input data where there are few white space characters, placed at random. <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2017/07/03">My source code is available</a>, but you need an ARM processor to run it.  I run the benchmark on <a href="https://softiron.com/products/overdrive-1000/technical-specifications/">a 64-bit ARM processor (made of A57 cores)</a>. <a href="https://blog.regehr.org/archives/1465">John Regher has a few more benchmarks on this same machine</a>. I think it is the same cores that you find in the Nintendo Switch.</p>
<table>
<tr>
<td>scalar</td>
<td>1.40 ns</td>
</tr>
<tr>
<td>NEON      </td>
<td>0.92 ns</td>
</tr>
</table>
<p> <a href="http://cdn.softiron.com/OD1000_DS_Web_v11.pdf">The technical specification is sparse</a>. However, the processor runs at 1.7 GHz as one can verify by using <tt>perf stat</tt>. Here is the number of cycles per character we need&#8230;</p>
<table>
<tr>
<th>scalar</th>
<th>ARM</th>
<th>recent x64</th>
</tr>
<tr>
<td>scalar</td>
<td>2.4 cycles</td>
<td>1.2 cycles</td>
</tr>
<tr>
<td>vectorized (NEON and SSSE3)      </td>
<td>1.6 cycles</td>
<td>0.25 cycles</td>
</tr>
</table>
<p>(<a href="https://github.com/lemire/despacer">The source code for x64 is available on GitHub</a>.)</p>
<p>In comparison, on an x64 processor, the scalar version uses something like 1.2 cycles per character, which would put the ARM machine at half the performance of a recent x64 processor on a per cycle basis. That is to be expected as the A57 cores are hardly meant to compete with recent x64 processors on a cycle per cycle basis. However, with SSSE3 on an x64 machine, I manage to use a little as 0.25 cycles per character, which is more than 5 times better than what I can do with ARM NEON.</p>
<p>This large difference comes from an algorithmic difference. On x64 processors, we are relying on the <tt>movemask</tt>/<tt>pshufb</tt> combo and we end up with a branchless algorithm involving very few instructions. Our ARM NEON version is much less powerful.</p>
<p>There is a lot to like about ARM processors. The assembly code is much more elegant than the equivalent with x86/x64 processors. Even the ARM NEON instructions feel cleaner than the SSE/AVX instructions. However, for many problems, the total lack of a  <tt>movemask</tt> instruction might limit the scope of what is possible with ARM NEON.</p>
<p>But maybe I underestimate ARM NEON&#8230; can you do better than I did?</p>
<p>Note: The post has been edited: it is possible on 64-bit ARM processors to reshuffle 16 bits in one instruction as one of the commenters observed.</p>
<p><strong>Note</strong>: <a href="http://lemire.me/blog/2017/07/10/pruning-spaces-faster-on-arm-processors-with-vector-table-lookups/">I get better performance in a follow-up blog post</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/07/03/pruning-spaces-from-strings-quickly-on-arm-processors/feed/</wfw:commentRss>
		<slash:comments>19</slash:comments>
		</item>
		<item>
		<title>Science and Technology links (July 1st, 2017)</title>
		<link>http://lemire.me/blog/2017/06/30/science-and-technology-links-july-1st-2017/</link>
		<comments>http://lemire.me/blog/2017/06/30/science-and-technology-links-july-1st-2017/#comments</comments>
		<pubDate>Fri, 30 Jun 2017 16:06:31 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12818</guid>
		<description><![CDATA[Canada is 150 years old today. The iPhone is 10 years old this year. We can safely say that the iPhone 7 is over a hundred times faster, in almost every way than the original iPhone. Very few things get 100 times better over 10 years. You have to improve the performance by 60% each &#8230; <a href="http://lemire.me/blog/2017/06/30/science-and-technology-links-july-1st-2017/" class="more-link">Continue reading <span class="screen-reader-text">Science and Technology links (July 1st, 2017)</span></a>]]></description>
				<content:encoded><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Canada_Day">Canada is 150 years old today</a>. </p>
<p>The iPhone is 10 years old this year. We can safely say that the iPhone 7 is over a hundred times faster, in almost every way than the original iPhone. Very few things get 100 times better over 10 years. You have to improve the performance by 60% each and every year.</p>
<p>Though mammals like us can heal injuries, there is often scarring. Scarring should be viewed as imperfect healing. It is not just a matter of looks, scars make your tissues less functional. As far skin healing is concerned, scientists have found a way to <a href="https://scicasts.com/channels/stem-cells/2070-regenerative-medicine/12157-natural-process-for-scar-free-wound-healing-described/">cause skin to heal without scarring</a>, at least in mice. </p>
<blockquote><p>Essentially, we can manipulate wound healing so that it leads to skin regeneration rather than scarring, (&#8230;) the secret is to regenerate hair follicles first. After that, the fat will regenerate in response to the signals from those follicles. (&#8230;) regenerating fat cells in skin can be beneficial for conditions beyond scarring. The process could potentially become a new anti-aging treatment, as the formation of deep wrinkles is thought to result from permanent loss of skin fat. </p></blockquote>
<p>It seems that fasting (going without food) could be a key to <a href="https://news.usc.edu/63669/fasting-triggers-stem-cell-regeneration-of-damaged-old-immune-system/">regenerating your immune system</a>:</p>
<blockquote><p>The study has major implications for healthier aging, in which immune system decline contributes to increased susceptibility to disease as people age. By outlining how prolonged fasting cycles — periods of no food for two to four days at a time over the course of six months — kill older and damaged immune cells and generate new ones, the research also has implications for chemotherapy tolerance and for those with a wide range of immune system deficiencies, including autoimmunity disorders.</p></blockquote>
<p><a href="https://phys.org/news/2017-06-chimpanzee-super-strength-human-muscle.html">Chimpanzees are not that much stronger than we are</a>:</p>
<blockquote><p>But now a research team reports that contrary to this belief, chimp muscles&#8217; maximum dynamic force and power output is just about 1.35 times higher than human muscle of similar size, a difference they call &#8220;modest&#8221; compared with historical, popular accounts of chimp &#8220;super strength,&#8221; being many times stronger than humans.</p></blockquote>
<p>Human beings are optimized for high endurance:</p>
<blockquote><p>The flip side is that humans, with a high percentage of slow-twitch fibers, are adapted for endurance, such as long-distance travel, at the expense of dynamic strength and power. When we compared chimps and humans to muscle fiber type data for other species we found that humans are the outlier, suggesting that selection for long distance, over-ground travel may have been important early in the evolution of our musculoskeletal system</p></blockquote>
<p>So how do you fight a chimpanzee? I would guess that getting the fight to last as long as possible is your best bet as a human being. The chimpanzee will get exhausted first. So I would probably either keep the chimpanzee at bay or run away. If the chimpanzee pursues, I would just wear him down.</p>
<p>A few weeks ago, <a href="https://www.nature.com/articles/nature19793.epdf">there was an article in Nature</a> claiming that human lifespan is limited to 115 years. There are very few of us that can hope to ever reach 115 years of age at the present time, but the question is whether it will change. Some people believe that 115 years of age is a hard limit that cannot be exceeded. Several scientists have now issued counterpoints. <a href="http://www.ottawacitizen.com/health/forever+young+detectable+limit+human+lifespan+mcgill/13567345/story.html">Siegfried Hekimi from McGill University (Montreal) says</a> that&#8230;</p>
<blockquote><p>You can show the data are compatible with many different trajectories and not at all an ongoing plateau (&#8230;) by extending trend lines, we can show that maximum and average lifespans could continue to increase far into the foreseeable future. (&#8230;) If this trend continues and our life expectancy of the average person becomes 100, the longest person might make it to 150 (&#8230;)</p></blockquote>
<p>Jim Vaupel from the Max Planck Institute writes:</p>
<blockquote><p>The evidence points towards no looming limit. At present the balance of the evidence suggests that if there is a limit it is above 120, perhaps much above – and perhaps there is not a limit at all.</p></blockquote>
<p>Maarten Rozing  from the University of Copenhagen writes about a biological clock limiting our lifespan:</p>
<blockquote><p>We now know not only that the idea of such a clock is highly implausible, but also that ageing is proving to be more amenable to change than used to be supposed</p></blockquote>
<p>The rebuttals can be found in Nature:</p>
<ul>
<li><a href="http://www.nature.com/nature/journal/v546/n7660/full/nature22790.html">Questionable evidence for a limit to human lifespan</a></li>
<li><a href="http://www.nature.com/nature/journal/v546/n7660/full/nature22788.html">Is there evidence for a limit to human lifespan?</a></li>
<li><a href="http://www.nature.com/nature/journal/v546/n7660/full/nature22786.html">Many possible maximum lifespan trajectories</a></li>
<li><a href="http://www.nature.com/nature/journal/v546/n7660/full/nature22784.html">Contesting the evidence for limited human lifespan</a></li>
<li><a href="http://www.nature.com/nature/journal/v546/n7660/full/nature22792.html">Maximum human lifespan may increase to 125 years</a></li>
</ul>
<p>Of course, the real answer is at this point is that we do not know how long human beings could live. This being said, Yuval Noah Harari makes a compelling case in his book <a  href="http://a-fwd.com/asin-com=B01D7CLUP6&com=daniellemires-20&ca=danilemisblog-20&uk=danilemisblog-21&de=danilemisbl05-21&fr=danilemisbl0e-21&it=danilemisbl02-21&jp=danilemisblog-22&cn=danilemisblog-23&fb=com&sc=w"  rel="nofollow">Homo Deus: A Brief History of Tomorrow</a> that homo sapiens has reached the end of the line. Very solid arguments can be made that, say, in 100 years, there won&#8217;t be any homo sapiens left on the planet. So it is entirely possible that we will never find out how long homo sapiens could live.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/06/30/science-and-technology-links-july-1st-2017/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Video game review&#8230; Nier: Automata</title>
		<link>http://lemire.me/blog/2017/06/30/video-game-review-nier-automata/</link>
		<comments>http://lemire.me/blog/2017/06/30/video-game-review-nier-automata/#comments</comments>
		<pubDate>Fri, 30 Jun 2017 14:57:40 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		
		<guid isPermaLink="false">http://lemire.me/blog/?p=12810</guid>
		<description><![CDATA[Single-player RPG games are having a tough time. Last year I reviewed Deus Ex: Mankind Divided. Though I felt it was an excellent game, it was not a commercial success and it seems that there will not be a follow-up game in the series in the foreseeable future. More recently, I reviewed Mass Effect: Andromeda. &#8230; <a href="http://lemire.me/blog/2017/06/30/video-game-review-nier-automata/" class="more-link">Continue reading <span class="screen-reader-text">Video game review&#8230; Nier: Automata</span></a>]]></description>
				<content:encoded><![CDATA[<p>Single-player RPG games are having a tough time. Last year I reviewed <a href="http://lemire.me/blog/2016/10/31/my-review-of-deus-ex-mankind-divided-video-game/">Deus Ex: Mankind Divided</a>. Though I felt it was an excellent game, it was not a commercial success and it seems that there will not be a follow-up game in the series in the foreseeable future. More recently, I reviewed <a href="http://lemire.me/blog/2017/03/27/the-technology-of-mass-effect-andromeda/">Mass Effect: Andromeda</a>. I felt that it was a very solid game, but occasional poor writing and some botched graphical models opened up the game to harsh criticism. Again, it looks like Mass Effect might come to an end because of the poor sales.</p>
<p>I am currently playing another single-player RPG, this time from Japan, <a href="https://en.wikipedia.org/wiki/Nier:_Automata">Nier: Automata</a>. Sales-wise, it looks to be one of the top-10 games of all time on the PlayStation 4, so it is doing quite well.</p>
<p>The game mechanic itself is very much that of an old-school game. In fact, a fair amount of time is spent playing the game as if it were a two-dimensional shooter. Otherwise, the game plays quite a bit like a typical and classical action RPG &#8220;à la Zelda&#8221;.</p>
<p>The game looks good, but it is quite simple, even simplistic. There are only so many different enemy types. Most of the map looks the same. The 3D models are crude at times though always effective. The layouts are simplistic. I get the impression that the game engine must be simple. This gives the game an old-school look and feel. I also suspect that this means that the game is a massive success financially for its producers. A game like Mass Effect: Andromeda has a sophisticated design, with finely tuned non-trivial combat mechanics and lots of massive unique environments, so it has to be far more expensive to develop.</p>
<p>You play as an android that has two modes of attack that can be used simultaneously. Firstly, there is a drone that follows you around, and you can order this drone to shot continuously at enemies. Given that most enemies, including bosses, have a hard time damaging you if you stay far away, this drone almost trivializes the game. There are entire boss fights that you can win by jumping up a ledge and just having your drone shoot the enemy down. It helps that you have infinite ammunition. Secondly, you can use melee weapons like swords. That&#8217;s where the game gets interesting because though your melee weapons can cause a lot of damage, they also open you up to receiving a lot of damage. There is real skill involved in fighting powerful enemies up close.</p>
<p>Because you are an android, you can reprogram yourself by acquiring new programs. For example, you can make it so that whenever your health levels fall under a threshold, you automatically heal yourself using one of your &#8220;healing potions&#8221;. You can also make it so that after receiving some damage, you become invincible for a second or two. Combining these two programs is sufficient that, for most purposes, you are invincible&#8230; as long as you have enough &#8220;healing potions&#8221;&#8230; but these are cheap and widely available in stores.</p>
<p>When I first starting playing, I paid little to no attention to these programs, nor did I pay much attention to my choice of weapon. However, it ends up making a critical difference, at least on the default difficulty level. </p>
<p>There is no automatic save points, so you can die and have to restart the game from the beginning. You have to think about saving. If you die, your body will remain where you die along with some of your gear. You can retrieve it by playing again and getting back to your body.</p>
<p>Playing the game requires some skill, but on the default difficulty level, I only ever had trouble with one part of the game&#8230; there is a crazy boss at some point, &#8220;the Opera boss&#8221;, it is a giant lady with an armored dress. And I suspect that I had so much trouble because I did not understand the game very well. </p>
<p>Not everything is absolutely smooth. Several times I was left wondering about where I was supposed to go, what I was supposed to do, but I never got stuck long enough to be annoyed.</p>
<p>I have done an entire first playthrough but the game has this weird mechanic whereas you are supposed to beat the game several times, and each time you do so, you get to see a different side of the story. Looking at the Wikipedia entry for the game, it seems that I will need to play at least two more times through the game to really see the bulk of the story.</p>
<p>The music of the game really adds a lot to the experience. To be honest, I suspect that I play just to be immersed in the music and aesthetic of the game. I find it relaxing.</p>
<p>Though I have not played through the entire game, I know enough to appreciate the story and the theme. The game is set in our far future. It is supposedly very, very far in our future but, oddly, city structures are still holding more or less intact. There is no human being anywhere, though you are told that they reside on the Moon, unseen. You are an android that looks like a young human being, but there are cruder robots all over the surface of the Earth. The crude robots are your enemies, sometimes. Supposedly, there is a war going on between the crude robots and the androids, but looks can be deceiving.</p>
<p>It is probably most accurate to depict the story about being about the post-human era on Earth. Human beings are gone, but intelligent machines remain behind. It is very reminiscent of Stross&#8217; <a  href="http://a-fwd.com/asin-com=B0013A1IYI&com=daniellemires-20&ca=danilemisblog-20&uk=danilemisblog-21&de=danilemisbl05-21&fr=danilemisbl0e-21&it=danilemisbl02-21&jp=danilemisblog-22&cn=danilemisblog-23&fb=com&sc=w"  rel="nofollow">Saturn&#8217;s Children</a>. Though everybody around is a machine, you get to care for them, very much so.</p>
<p>That&#8217;s maybe the surest sign that the game is a success. You care for the characters. Even if they are machines that can be rebooted at will. It is saying a lot because I don&#8217;t normally empathize easily with Japanese characters, as I find the Japenese culture a bit too strange. So while the game is simple, it is skillfully made.</p>
<p>If you ever liked playing Zelda, and you don&#8217;t mind something a bit more serious where Zelda could die, this is a game for you.</p>
]]></content:encoded>
			<wfw:commentRss>http://lemire.me/blog/2017/06/30/video-game-review-nier-automata/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
