<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fuzzy notepad - blog</title><link href="https://eev.ee/" rel="alternate"></link><link href="https://eev.ee/feeds/blog.atom.xml" rel="self"></link><id>https://eev.ee/</id><updated>2017-08-09T08:18:00-07:00</updated><entry><title>Growing up alongside tech</title><link href="https://eev.ee/blog/2017/08/09/growing-up-alongside-tech/" rel="alternate"></link><published>2017-08-09T08:18:00-07:00</published><updated>2017-08-09T08:18:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-08-09:/blog/2017/08/09/growing-up-alongside-tech/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.patreon.com/user/creators?u=199476"&gt;IndustrialRobot&lt;/a&gt; asks&amp;#8230;  or, uh, asked last&amp;nbsp;month:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;industrialrobot: How has your views on tech changed as you&amp;#8217;ve got&amp;nbsp;older?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is so open-ended that it&amp;#8217;s actually stumped me for a solid month.  I&amp;#8217;ve had a surprisingly hard time figuring out where to even&amp;nbsp;start.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://www.patreon.com/user/creators?u=199476"&gt;IndustrialRobot&lt;/a&gt; asks&amp;#8230;  or, uh, asked last&amp;nbsp;month:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;industrialrobot: How has your views on tech changed as you&amp;#8217;ve got&amp;nbsp;older?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is so open-ended that it&amp;#8217;s actually stumped me for a solid month.  I&amp;#8217;ve had a surprisingly hard time figuring out where to even&amp;nbsp;start.&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;It&amp;#8217;s not that my views of tech have changed too &lt;em&gt;much&lt;/em&gt; — it&amp;#8217;s that they&amp;#8217;ve changed very &lt;em&gt;gradually&lt;/em&gt;.  Teasing out and explaining any one particular change is tricky when it happened invisibly over the course of 10+&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;I think a better framework for this is to consider how my &lt;em&gt;relationship&lt;/em&gt; to tech has changed.  It&amp;#8217;s gone through three pretty distinct phases, each of which has strongly colored how I feel and talk about&amp;nbsp;technology.&lt;/p&gt;
&lt;h2 id="act-i"&gt;&lt;a class="toclink" href="#act-i"&gt;Act&amp;nbsp;I&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In which I start from&amp;nbsp;nothing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nothing&lt;/em&gt; is an interesting starting point.  You only really get to start there&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;Learning something on my own as a kid was something of a magical experience, in a way that I don&amp;#8217;t think I could replicate as an adult.  I liked computers; I liked toying with computers; so I did&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know how universal this is, but when I was a kid, I couldn&amp;#8217;t even &lt;em&gt;conceive&lt;/em&gt; of how incredible things were made.  Buildings?  Cars?  Paintings?  Operating systems?  Where does any of that come from?  Obviously &lt;em&gt;someone&lt;/em&gt; made them, but it&amp;#8217;s not the sort of philosophical point I lingered on when I was 10, so in the back of my head they basically just appeared fully-formed from the&amp;nbsp;æther.&lt;/p&gt;
&lt;p&gt;That meant that when I started trying out programming, I had &lt;em&gt;no aspirations&lt;/em&gt;.  I couldn&amp;#8217;t imagine how far I would go, because all the &lt;em&gt;examples&lt;/em&gt; of how far I would go were completely disconnected from any idea of human achievement.  I started out with &lt;a href="https://eev.ee/blog/2016/04/05/my-first-computer/"&gt;&lt;span class="caps"&gt;BASIC&lt;/span&gt; on a toy computer&lt;/a&gt;; how could I possibly envision a connection between that and something like a mainstream video game?  Every new thing felt like a new form of magic, so I couldn&amp;#8217;t conceive that I was even in the same ballpark as whatever process produced &lt;em&gt;real&lt;/em&gt; software.  (Even seeing the source code for &lt;code&gt;GORILLAS.BAS&lt;/code&gt;, it didn&amp;#8217;t quite click.  I didn&amp;#8217;t think to try &lt;em&gt;reading&lt;/em&gt; any of it until years after I&amp;#8217;d first encountered the&amp;nbsp;game.)&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t to say I didn&amp;#8217;t have &lt;em&gt;goals&lt;/em&gt;.  I invented goals constantly, as I&amp;#8217;ve always done; as soon as I learned about a new thing, I&amp;#8217;d imagine some ways to use it, then try to build them.  I produced a lot of little weird goofy toys, some of which entertained my tiny friend group for a couple days, some of which never saw the light of day.  But none of it felt like steps along the way to some mountain peak of mastery, because I didn&amp;#8217;t realize the mountain peak was even a place that could be gone to.  It was pure, unadulterated (!)&amp;nbsp;playing.&lt;/p&gt;
&lt;p&gt;I contrast this to my art career, which started only a couple years ago.  I was already in my late 20s, so I&amp;#8217;d already spend decades &lt;em&gt;seeing&lt;/em&gt; a very broad spectrum of art: everything from quick sketches up to painted masterpieces.  And I&amp;#8217;d seen the &lt;em&gt;people&lt;/em&gt; who create that art, sometimes seen them create it in real-time.  I&amp;#8217;m even in a relationship with one of them!  And of course I&amp;#8217;d already had the experience of advancing through tech stuff and discovering first-hand that even the most amazing software is still &lt;em&gt;just code someone wrote&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So from the very beginning, from the moment I touched pencil to paper, I &lt;em&gt;knew&lt;/em&gt; the possibilities.  I &lt;em&gt;knew&lt;/em&gt; that the goddamn Sistine Chapel was something I could learn to do, if I were willing to put enough time in — and I knew that I&amp;#8217;m not, so I&amp;#8217;d have to settle somewhere a ways before that.  I &lt;em&gt;knew&lt;/em&gt; that I&amp;#8217;d have to put an awful lot of work in before I&amp;#8217;d be producing anything very&amp;nbsp;impressive.&lt;/p&gt;
&lt;p&gt;I did it anyway (though perhaps waited longer than necessary to start), but those aren&amp;#8217;t things I can &lt;em&gt;un-know&lt;/em&gt;, and so I can never truly explore art from a place of pure ignorance.  On the other hand, I&amp;#8217;ve probably &lt;a href="https://eev.ee/blog/2016/05/06/learning-to-draw-learning-to-learn/"&gt;learned to draw&lt;/a&gt; much more quickly and efficiently than if I&amp;#8217;d done it as a kid, precisely &lt;em&gt;because&lt;/em&gt; I know those things.  Now I can decide I want to do something far beyond my current abilities, then go figure out how to do it.  When I was just &lt;em&gt;playing&lt;/em&gt;, that kind of ambition was&amp;nbsp;impossible.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, I&amp;nbsp;played.&lt;/p&gt;
&lt;p&gt;How did this affect my views on tech?  Well, I didn&amp;#8217;t&amp;#8230;  &lt;em&gt;have&lt;/em&gt; any.  Learning by playing tends to teach you things in an outward sprawl without many abrupt jumps to new areas, so you don&amp;#8217;t tend to run up against conflicting information.  The whole point of opinions is that they&amp;#8217;re your own resolution to a conflict; without conflict, I can&amp;#8217;t meaningfully say I had any opinions.  I just accepted whatever I encountered at face value, because I didn&amp;#8217;t even know enough to suspect there could be alternatives&amp;nbsp;yet.&lt;/p&gt;
&lt;h2 id="act-ii"&gt;&lt;a class="toclink" href="#act-ii"&gt;Act&amp;nbsp;II&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That started to seriously change around, I suppose, the end of high school and beginning of college.  I was becoming aware of this whole &amp;#8220;open source&amp;#8221; concept.  I took classes that used languages I wouldn&amp;#8217;t otherwise have given a second thought.  (One of them was Python!)  I started to contribute to other people&amp;#8217;s projects.  Eventually I even got a job, where I &lt;em&gt;had&lt;/em&gt; to work with &lt;em&gt;other people&lt;/em&gt;.  It probably also helped that I&amp;#8217;d had to maintain my own old code a few&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;Now I was faced with conflicting subjective ideas, and I had to form opinions about them!  And so I did.  With &lt;em&gt;gusto&lt;/em&gt;.  Over time, I developed an idea of what was &lt;em&gt;Right&lt;/em&gt; based on experience I&amp;#8217;d accrued.  And then I set out to always do things &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s served me decently well with some individual problems, but it also led me to inflict a lot of unnecessary pain on myself.  Several endeavors languished for no other reason than my dissatisfaction with the &lt;em&gt;architecture&lt;/em&gt;, long before the basic functionality was done.  I started a number of &amp;#8220;pure&amp;#8221; projects around this time, generic tools like imaging libraries that I had no direct need for.  I built them for the sake of them, I guess because I felt like I was improving some niche&amp;#8230;  but of course I never finished any.  It was always in areas I didn&amp;#8217;t know that well in the first place, which is a fine way to learn if you have a specific concrete goal in mind — but it turns out that building a generic library for editing images means you have to know &lt;em&gt;everything&lt;/em&gt; about images.  Perhaps that ambition went a little&amp;nbsp;haywire.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve said &lt;a href="https://eev.ee/blog/2016/06/12/one-year-later/"&gt;before&lt;/a&gt; that this sort of (self-inflicted!) work was unfulfilling, in part because the best outcome would be that a few distant programmers&amp;#8217; lives are slightly easier.  I do still think that, but I think there&amp;#8217;s a deeper point here&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;In forgetting how to play, I&amp;#8217;d stopped putting any of &lt;em&gt;myself&lt;/em&gt; in most of the work I was doing.  Yes, building an imaging library is kind of a slog that &lt;em&gt;someone&lt;/em&gt; has to do, but&amp;#8230;  I assume the people who work on software like &lt;span class="caps"&gt;PIL&lt;/span&gt; and ImageMagick are &lt;em&gt;actually interested in it&lt;/em&gt;.  The few domains I tried to enter and revolutionize weren&amp;#8217;t &lt;em&gt;passions&lt;/em&gt; of mine; I just happened to walk through the neighborhood one day and decided I could obviously do it&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;Not coincidentally, this was the same era of my life that led me to write stuff like that &lt;span class="caps"&gt;PHP&lt;/span&gt; post, which you may notice I am conspicuously not even linking to.  I don&amp;#8217;t think I would write anything like it nowadays.  I could see myself approaching the same &lt;em&gt;subject&lt;/em&gt;, but purely from the point of view of language design, with more contrasts and tradeoffs and less going for volume.  I certainly wouldn&amp;#8217;t lead off with inflammatory puffery like &amp;#8220;&lt;span class="caps"&gt;PHP&lt;/span&gt; is a community of&amp;nbsp;amateurs&amp;#8221;.&lt;/p&gt;
&lt;h3 id="act-iii"&gt;&lt;a class="toclink" href="#act-iii"&gt;Act&amp;nbsp;III&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; I&amp;#8217;ve mellowed out a good bit in the last few&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;It turns out that being &lt;em&gt;Right&lt;/em&gt; is much less important than being &lt;em&gt;Not Wrong&lt;/em&gt; — i.e., rather than trying to make something perfect that can be adapted to any future case, just avoid as many pitfalls as possible.  Code that does something useful has much more practical value than unfinished code with some pristine&amp;nbsp;architecture.&lt;/p&gt;
&lt;p&gt;Nowhere is this more apparent than in game development, where all code is doomed to be crap and the best you can hope for is to stem the tide.  But there&amp;#8217;s also a fixed &lt;em&gt;goal&lt;/em&gt; that&amp;#8217;s completely unrelated to how the code looks: does the game work, and is it fun to play?  Yes?  Ship the damn thing and forget about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Games are also nice because it&amp;#8217;s very easy to pour my own feelings into them and evoke feelings in the people who play them.  They&amp;#8217;re &lt;em&gt;mine&lt;/em&gt;, something with my fingerprints on them — even the &lt;a href="https://eevee.itch.io/"&gt;games&lt;/a&gt; I&amp;#8217;ve built with glip have plenty of my own hallmarks, little touches I added on a whim or attention to specific details that I care&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Maybe a better example is the Doom map parser I started writing.  It sounds like a &amp;#8220;pure&amp;#8221; problem again, except that I actually know an awful lot about the subject already!  I also cleverly (accidentally) released some useful &lt;em&gt;results&lt;/em&gt; of the work I&amp;#8217;ve done thusfar — like statistics about Doom &lt;span class="caps"&gt;II&lt;/span&gt; maps and a few screenshots of flipped stock maps — even though I don&amp;#8217;t think the parser itself is far enough along to release yet.  The tool has served a purpose, one with my fingerprints on it, even without being released publicly.  That keeps it fresh in my mind as something interesting I&amp;#8217;d like to keep working on, eventually.  (When I run into an architecture question, I step back for a while, or I do other work in the hopes that the solution will reveal&amp;nbsp;itself.)&lt;/p&gt;
&lt;p&gt;I also made two simple Pokémon &lt;span class="caps"&gt;ROM&lt;/span&gt; hacks this year, despite knowing nothing about Game Boy internals or assembly when I started.  I just decided I wanted to do an open-ended thing beyond my reach, and I went to do it, not worrying about cleanliness and willing to accept a bumpy ride to get there.  I &lt;em&gt;played&lt;/em&gt;, but in a more experienced way, invoking the stuff I know (and the people I&amp;#8217;ve met!) to help me get a running start in completely unfamiliar&amp;nbsp;territory.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This feels like a really fine distinction that I&amp;#8217;m not sure I&amp;#8217;m doing justice.  I don&amp;#8217;t know if I could&amp;#8217;ve appreciated it three or four years ago.  But I missed making toys, and I&amp;#8217;m glad I&amp;#8217;m doing it&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;In short, I forgot how to have fun with programming for a little while, and I&amp;#8217;ve finally started to figure it out again.  And that&amp;#8217;s far more important than whether you use &lt;span class="caps"&gt;PHP&lt;/span&gt; or&amp;nbsp;not.&lt;/p&gt;</content><category term="patreon"></category></entry><entry><title>Datamining Pokémon</title><link href="https://eev.ee/blog/2017/08/02/datamining-pokemon/" rel="alternate"></link><published>2017-08-02T22:44:00-07:00</published><updated>2017-08-02T22:44:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-08-02:/blog/2017/08/02/datamining-pokemon/</id><summary type="html">&lt;p&gt;A kind anonymous patron offers this prompt, which I totally fucked up getting done in&amp;nbsp;July:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Something to do with programming languages?  Alternatively, interesting game&amp;nbsp;mechanics!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s been a while since I&amp;#8217;ve written a thing about programming languages, eh?  But I feel like I&amp;#8217;ve run low on interesting things to say about them.  And I just did that level design article, which already touched on some interesting game mechanics&amp;#8230;  oh&amp;nbsp;dear.&lt;/p&gt;
&lt;p&gt;Okay, how about this.  It&amp;#8217;s something I&amp;#8217;ve been neck-deep in for quite some time, and most of the knowledge is squirrelled away in obscure wikis and ancient forum threads: getting data out of Pokémon games.  I think that preserves the &lt;em&gt;spirit&lt;/em&gt; of your two options, since it&amp;#8217;s sort of nestled in a dark corner between how programming languages work and how game mechanics are&amp;nbsp;implemented.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A kind anonymous patron offers this prompt, which I totally fucked up getting done in&amp;nbsp;July:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Something to do with programming languages?  Alternatively, interesting game&amp;nbsp;mechanics!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s been a while since I&amp;#8217;ve written a thing about programming languages, eh?  But I feel like I&amp;#8217;ve run low on interesting things to say about them.  And I just did that level design article, which already touched on some interesting game mechanics&amp;#8230;  oh&amp;nbsp;dear.&lt;/p&gt;
&lt;p&gt;Okay, how about this.  It&amp;#8217;s something I&amp;#8217;ve been neck-deep in for quite some time, and most of the knowledge is squirrelled away in obscure wikis and ancient forum threads: getting data out of Pokémon games.  I think that preserves the &lt;em&gt;spirit&lt;/em&gt; of your two options, since it&amp;#8217;s sort of nestled in a dark corner between how programming languages work and how game mechanics are&amp;nbsp;implemented.&lt;/p&gt;


&lt;h2 id="a-few-disclaimers"&gt;&lt;a class="toclink" href="#a-few-disclaimers"&gt;A few&amp;nbsp;disclaimers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the grand scheme of things, I don&amp;#8217;t know all that much about this.  I know more than people who&amp;#8217;ve never looked into it at all, which I suppose is &lt;em&gt;most&lt;/em&gt; people — but there are also people who basically do this stuff &lt;em&gt;full-time&lt;/em&gt;, and that experience is crucial since so much of this work comes down to noticing patterns.  While it sure helped to have a technical background, I wouldn&amp;#8217;t have gotten anywhere at all if I weren&amp;#8217;t acquainted with a few people who actually know what they&amp;#8217;re doing.  Most of what I&amp;#8217;ve done is take their work and run with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Also, I am not a lawyer and cannot comment on any legal questions here.  Is it okay to download ROMs of games you own?  Is it okay to dump ROMs yourself if you have the hardware?  Does this count as reverse engineering, and do the &lt;span class="caps"&gt;DMCA&lt;/span&gt; protections apply?  I have no idea.  But that said, it&amp;#8217;s not exactly hard to find &lt;span class="caps"&gt;ROM&lt;/span&gt; hacking communities, and there&amp;#8217;s no way Nintendo isn&amp;#8217;t aware of them (or of the fact that every single Pokémon fansite gets their info from ROMs), so I &lt;em&gt;suspect&lt;/em&gt; Nintendo simply doesn&amp;#8217;t care unless something risks going mainstream — and thus putting a tangible dent in the market for their own&amp;nbsp;franchise.&lt;/p&gt;
&lt;p&gt;Still, I don&amp;#8217;t want to direct an angry legal laser at anyone, so I&amp;#8217;m going to be a bit selective about what resources I link to and what I merely allude to the existence&amp;nbsp;of.&lt;/p&gt;
&lt;h2 id="some-basics"&gt;&lt;a class="toclink" href="#some-basics"&gt;Some&amp;nbsp;basics&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is, necessarily, a pretty technical topic.  It starts out in binary data and spirals down into microscopic details that even most programmers don&amp;#8217;t need to care about.  Sometimes people approach me to ask how they can help with this work, and all I can do is imagine the entire contents of this post and shrug&amp;nbsp;helplessly.&lt;/p&gt;
&lt;p&gt;Still, as usual, I&amp;#8217;ll do my best to make this accessible without also making it a 500-page introduction to all of computing.  Here is some helpful background stuff that would be clumsy to cram into the rest of the&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Computers deal in &lt;em&gt;bytes&lt;/em&gt;.  Pop culture likes to depict computers as working in binary (individual &lt;em&gt;bits&lt;/em&gt; or &amp;#8220;binary digits&amp;#8221;), which is technically true down on the level of the circuitry, but virtually none of the actual logic in a computer cares about individual bits.  In fact, computers can&amp;#8217;t access individual bits directly; they can only fetch bytes, then extract bits from those bytes as a separate&amp;nbsp;step.&lt;/p&gt;
&lt;p&gt;A byte is made of eight bits, which gives it 2⁸ or 256 possible values.  It&amp;#8217;s helpful to see what a byte &lt;em&gt;is&lt;/em&gt;, but writing them in decimal is a bit clumsy, and writing them in binary is impossible to read.  A clever compromise is to write them in &lt;em&gt;hexadecimal&lt;/em&gt;, base sixteen, where the digits run from 0 to 9 and then A to F.  Because sixteen is 2⁴, one hex digit is exactly four binary digits, and so a byte can conveniently be written as exactly two hex&amp;nbsp;digits.&lt;/p&gt;
&lt;p&gt;(A running theme across all of this is that many of the choices are arbitrary; in different times or places, other choices may have been made.  Most likely, other choices &lt;em&gt;were&lt;/em&gt; made, and they&amp;#8217;re still in use somewhere.  Virtually the only reliable constant is that any computer you will ever encounter will have bytes made out of eight bits.  But even that wasn&amp;#8217;t always the&amp;nbsp;case.)&lt;/p&gt;
&lt;p&gt;The Unix program &lt;code&gt;xxd&lt;/code&gt; will print out bytes in a somewhat readable way.  Here&amp;#8217;s its output for a short chunk of English&amp;nbsp;text.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5468&lt;/span&gt; &lt;span class="mi"&gt;6520&lt;/span&gt; &lt;span class="mi"&gt;7175&lt;/span&gt; &lt;span class="mi"&gt;6963&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b20&lt;/span&gt; &lt;span class="mi"&gt;6272&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;f77&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;e20&lt;/span&gt;  &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;quick&lt;/span&gt; &lt;span class="n"&gt;brown&lt;/span&gt;
&lt;span class="mi"&gt;00000010&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;7820&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;a75&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;d70&lt;/span&gt; &lt;span class="mi"&gt;7320&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;f76&lt;/span&gt; &lt;span class="mi"&gt;6572&lt;/span&gt; &lt;span class="mi"&gt;2074&lt;/span&gt;  &lt;span class="n"&gt;fox&lt;/span&gt; &lt;span class="n"&gt;jumps&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="mi"&gt;00000020&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6865&lt;/span&gt; &lt;span class="mi"&gt;206&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;617&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;7920&lt;/span&gt; &lt;span class="mi"&gt;646&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;6727&lt;/span&gt; &lt;span class="mi"&gt;7320&lt;/span&gt; &lt;span class="mi"&gt;6261&lt;/span&gt;  &lt;span class="n"&gt;he&lt;/span&gt; &lt;span class="n"&gt;lazy&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ba&lt;/span&gt;
&lt;span class="mi"&gt;00000030&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;636&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;e0a&lt;/span&gt;                                &lt;span class="n"&gt;ck&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Each line shows sixteen bytes.  The left column shows the position (or &amp;#8220;offset&amp;#8221;) in the data, in hex.  (It starts at zero, because programmers like to start counting at zero; it makes various things easier.)  The middle column shows the bytes themselves, written as two hex digits each, with just enough space that you can tell where the boundaries between bytes are.  The right column shows the bytes interpreted as &lt;span class="caps"&gt;ASCII&lt;/span&gt; text, with any non-characters replaced with a &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(&lt;span class="caps"&gt;ASCII&lt;/span&gt; is a &lt;em&gt;character encoding&lt;/em&gt;, a way to represent text as bytes — which are only numbers — by listing a set of characters in some order and then assigning numbers to them.  Text crops up in a lot of formats, and this makes it easy to spot at a glance.  Alas, &lt;span class="caps"&gt;ASCII&lt;/span&gt; is only one of many schemes, and it only really works for English text, but it&amp;#8217;s the most common character encoding by far and has some overlap with the runners-up as&amp;nbsp;well.)&lt;/p&gt;
&lt;p&gt;Since &lt;em&gt;everything&lt;/em&gt; is made out of bytes, there are an awful lot of schemes for how to express various kinds of information as bytes.  As a result, a byte is meaningless on its own; it only has meaning when something else interprets it.  It might be a plain number ranging from 0 to 255; it might be a plain number ranging from −128 to 127; it might be part of a bigger number that spans multiple bytes; it might be several small numbers crammed into one byte; it might be part of a color value; it might be a&amp;nbsp;letter.&lt;/p&gt;
&lt;p&gt;A meaningful arrangement for a whole sequence of bytes is loosely referred to as a &lt;em&gt;format&lt;/em&gt;.  If it&amp;#8217;s intended for an entire file, it&amp;#8217;s a &lt;em&gt;file format&lt;/em&gt;.  A file containing only bytes that are intended as text is called a &lt;em&gt;plain text&lt;/em&gt; file (or format); this is in contrast to a &lt;em&gt;binary&lt;/em&gt; file, which is basically anything&amp;nbsp;else.&lt;/p&gt;
&lt;p&gt;Some file formats are very common and well-understood, like &lt;span class="caps"&gt;PNG&lt;/span&gt; or &lt;span class="caps"&gt;MP3&lt;/span&gt;.  Some are very common but were invented behind closed doors, like Photoshop&amp;#8217;s &lt;span class="caps"&gt;PSD&lt;/span&gt;, so they&amp;#8217;ve had to be &lt;em&gt;reverse engineered&lt;/em&gt; for other software to be able to read and write them.  And a great many file formats are obscure and ad hoc, invented only for use by one piece of software.  Programmers invent file formats all the&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Reverse engineering a format is largely a matter of identifying common patterns and finding data that&amp;#8217;s expected to be present somewhere.  Of course, in cases like Photoshop&amp;#8217;s &lt;span class="caps"&gt;PSD&lt;/span&gt;, the most productive approach is to make small changes to a file in Photoshop and then see what changed in the resulting &lt;span class="caps"&gt;PSD&lt;/span&gt;.  That&amp;#8217;s not always an option — say, if you&amp;#8217;re working with a game for a handheld that won&amp;#8217;t let you easily run modified&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;Okay, hopefully that&amp;#8217;s enough of that and you can pick up the rest along the&amp;nbsp;way!&lt;/p&gt;
&lt;h2 id="diamond-and-pearl"&gt;&lt;a class="toclink" href="#diamond-and-pearl"&gt;Diamond and&amp;nbsp;Pearl&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before Diamond and Pearl, all of veekun&amp;#8217;s data was just copied from other sources.  Like, when I was in high school, I would spend lunch in the computer lab meticulously copy/pasting the Gold and Silver Pokédex text from another website into mine.  Hey, I started the thing when I was&amp;nbsp;12.&lt;/p&gt;
&lt;p&gt;But then&amp;#8230; something happened.  I can&amp;#8217;t remember what it was, which makes this a much less compelling story.  I assume veekun got popular enough that a couple other Pokénerds found out about it and started hanging around.  Then when Diamond and Pearl came out, they started digging into the games, and I thought that was super interesting, so I did it&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;This is what led veekun into being much more about ripped data, though its track record has been&amp;#8230;&amp;nbsp;bumpy.&lt;/p&gt;
&lt;h3 id="the-nintendo-ds-header-and-filesystem"&gt;&lt;a class="toclink" href="#the-nintendo-ds-header-and-filesystem"&gt;The Nintendo DS header and&amp;nbsp;filesystem&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Everything in a computer is, on some level, a sequence of &lt;em&gt;bytes&lt;/em&gt;.  Game consoles and handhelds, being computers, also deal in bytes.  A game cartridge is just a custom disk, and a &lt;span class="caps"&gt;ROM&lt;/span&gt; is a file containing all the bytes on that disk.  (It&amp;#8217;s a specific case of a &lt;em&gt;disk image&lt;/em&gt;, like an &lt;span class="caps"&gt;ISO&lt;/span&gt; is for CDs and DVDs.  You can take a disk image of a hard drive or a floppy disk or anything else, too; they&amp;#8217;re all just&amp;nbsp;bytes.)&lt;/p&gt;
&lt;p&gt;But what &lt;em&gt;are&lt;/em&gt; those bytes?  That&amp;#8217;s the fundamental and pervasive question.  In the case of a Nintendo &lt;span class="caps"&gt;DS&lt;/span&gt; cartridge, the first thing I learned was that they&amp;#8217;re arranged in a &lt;em&gt;filesystem&lt;/em&gt;.  Most disks have a filesystem — it&amp;#8217;s like a table of contents for the disk, explaining how the one single block of bytes is divided into named&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;That is &lt;em&gt;fantastically&lt;/em&gt; useful, and I didn&amp;#8217;t even have to figure out how it works, because other people already had.  Let&amp;#8217;s have a look at it, because seeing binary formats is the best way to get an idea of how they might be designed.  Here&amp;#8217;s the beginning of the English version of Pokémon&amp;nbsp;Diamond.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;504&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;b45&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;d4f&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e20&lt;/span&gt; &lt;span class="mi"&gt;4400&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;4144&lt;/span&gt; &lt;span class="mi"&gt;4145&lt;/span&gt;  &lt;span class="n"&gt;POKEMON&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;ADAE&lt;/span&gt;
&lt;span class="mi"&gt;00000010&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3031&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0900&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0500&lt;/span&gt;  &lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;..............&lt;/span&gt;
&lt;span class="mi"&gt;00000020&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0040&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0008&lt;/span&gt; &lt;span class="mi"&gt;0002&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0002&lt;/span&gt; &lt;span class="mi"&gt;2477&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;..........&lt;/span&gt;&lt;span class="n"&gt;$w&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="mi"&gt;00000030&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;3802&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;3802&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;c93&lt;/span&gt; &lt;span class="mi"&gt;0200&lt;/span&gt;  &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;.....&lt;/span&gt;
&lt;span class="mi"&gt;00000040&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0064&lt;/span&gt; &lt;span class="mi"&gt;3300&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f15&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;007&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;3300&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d3&lt;/span&gt;&lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="n"&gt;z3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00000050&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;b8&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;e00a&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;................&lt;/span&gt;
&lt;span class="mi"&gt;00000060&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5766&lt;/span&gt; &lt;span class="mi"&gt;4100&lt;/span&gt; &lt;span class="n"&gt;f808&lt;/span&gt; &lt;span class="mi"&gt;1808&lt;/span&gt; &lt;span class="mi"&gt;0086&lt;/span&gt; &lt;span class="mi"&gt;3300&lt;/span&gt; &lt;span class="mi"&gt;3159&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;e0d&lt;/span&gt;  &lt;span class="n"&gt;WfA&lt;/span&gt;&lt;span class="o"&gt;.......&lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;~.&lt;/span&gt;
&lt;span class="mi"&gt;00000070&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;740&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;0002&lt;/span&gt; &lt;span class="mi"&gt;5801&lt;/span&gt; &lt;span class="mi"&gt;3802&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;.........&lt;/span&gt;
&lt;span class="mi"&gt;00000080&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c05e&lt;/span&gt; &lt;span class="n"&gt;a503&lt;/span&gt; &lt;span class="mi"&gt;0040&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;684&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;.^...&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;hK&lt;/span&gt;&lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="mi"&gt;00000090&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;................&lt;/span&gt;
&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;................&lt;/span&gt;
&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="n"&gt;b0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;................&lt;/span&gt;
&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="n"&gt;c0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="n"&gt;ff&lt;/span&gt; &lt;span class="n"&gt;ae51&lt;/span&gt; &lt;span class="mi"&gt;699&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;a221&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;d84&lt;/span&gt; &lt;span class="mi"&gt;820&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="n"&gt;e4&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="n"&gt;ad&lt;/span&gt;  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;Qi&lt;/span&gt;&lt;span class="o"&gt;..!=.......&lt;/span&gt;
&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1124&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;b98&lt;/span&gt; &lt;span class="n"&gt;c081&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f21&lt;/span&gt; &lt;span class="n"&gt;a352&lt;/span&gt; &lt;span class="n"&gt;be19&lt;/span&gt; &lt;span class="mi"&gt;9309&lt;/span&gt; &lt;span class="n"&gt;ce20&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="o"&gt;.....!.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.....&lt;/span&gt; 
&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="n"&gt;e0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1046&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;a4a&lt;/span&gt; &lt;span class="n"&gt;f827&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="n"&gt;ec&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="n"&gt;c7&lt;/span&gt; &lt;span class="n"&gt;e833&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="n"&gt;e3&lt;/span&gt; &lt;span class="n"&gt;cebf&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FJJ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;X&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="n"&gt;f4&lt;/span&gt; &lt;span class="n"&gt;df94&lt;/span&gt; &lt;span class="n"&gt;ce4b&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="mi"&gt;9456&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;ac0&lt;/span&gt; &lt;span class="mi"&gt;1372&lt;/span&gt; &lt;span class="n"&gt;a7fc&lt;/span&gt;  &lt;span class="o"&gt;.....&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;How do we make sense of this?  Let us consult the little tool I started writing for this, &lt;a href="https://github.com/eevee/porigon-z"&gt;porigon-z&lt;/a&gt;.  It&amp;#8217;s abandoned and unfinished and not terribly well-written; I would just link to the documentation I consulted when writing this, but it&amp;#8217;s conspicuously 404ing now, so this&amp;#8217;ll have to do.  I described &lt;a href="https://github.com/eevee/porigon-z/blob/master/porigonz/nds/__init__.py"&gt;the format&lt;/a&gt; using an old version of the &lt;a href="http://construct.readthedocs.io/en/latest/"&gt;Construct&lt;/a&gt; binary format parsing library, and it looks like&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nds_image_struct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nds_image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ULInt16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;publisher_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ULInt8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unit_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ULInt8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;device_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ULInt8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;card_size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;card_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ULInt8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;flags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A &lt;code&gt;String&lt;/code&gt; is text of a fixed length, either truncated or padded with NULs (character zero) to fit.  The clumsy &lt;code&gt;ULInt16&lt;/code&gt; means an &lt;strong&gt;U&lt;/strong&gt;nsigned, &lt;strong&gt;L&lt;/strong&gt;ittle-endian, 16-bit (two byte)&amp;nbsp;integer.&lt;/p&gt;
&lt;p&gt;(What does &lt;em&gt;little-endian&lt;/em&gt; mean?  I&amp;#8217;m glad you asked!  When a number spans multiple bytes, there&amp;#8217;s a choice to be made: what order do those bytes go in?  The way we write numbers is &lt;em&gt;big-endian&lt;/em&gt;, where the biggest part appears first; but most computers are little-endian, putting the smallest part first.  That means a number like &lt;code&gt;0x1234&lt;/code&gt; is actually stored in two bytes as &lt;code&gt;34 12&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Alas, this is a terrible example, since most of this is goofy internal stuff we don&amp;#8217;t actually care about.  The interesting bit is the &amp;#8220;file table&amp;#8221;.  A little ways down my description of the format is this block of &lt;code&gt;ULInt32&lt;/code&gt;s, which start at position &lt;code&gt;0x40&lt;/code&gt; in the&amp;nbsp;file.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_table_offset   00 64 33 00 = 0x00336400
file_table_length   7f 15 00 00 = 0x0000157f (5503)
fat_offset          00 7a 33 00 = 0x00337a00
fat_length          20 0b 00 00 = 0x00000b20 (2848)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Excellent.  Now we know that if we start at 0x00336400 and read 5503 bytes, we&amp;#8217;ll have the entire filename&amp;nbsp;table.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;003363&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ffff&lt;/span&gt; &lt;span class="n"&gt;ffff&lt;/span&gt; &lt;span class="n"&gt;ffff&lt;/span&gt; &lt;span class="n"&gt;ffff&lt;/span&gt; &lt;span class="n"&gt;ffff&lt;/span&gt; &lt;span class="n"&gt;ffff&lt;/span&gt; &lt;span class="n"&gt;ffff&lt;/span&gt; &lt;span class="n"&gt;ffff&lt;/span&gt;  &lt;span class="o"&gt;................&lt;/span&gt;
&lt;span class="mi"&gt;00336400&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2802&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5700&lt;/span&gt; &lt;span class="mi"&gt;4500&lt;/span&gt; &lt;span class="n"&gt;cd02&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5700&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;  &lt;span class="o"&gt;(...&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;E&lt;/span&gt;&lt;span class="o"&gt;.....&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00336410&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f502&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5700&lt;/span&gt; &lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="n"&gt;fd02&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5700&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;.......&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00336420&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;b03&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5800&lt;/span&gt; &lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="mi"&gt;3203&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;a00&lt;/span&gt; &lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00336430&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;e03&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;a00&lt;/span&gt; &lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;b03&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;d00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;...&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;...{...]...&lt;/span&gt;
&lt;span class="mi"&gt;00336440&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cf03&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;6300&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="n"&gt;f403&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;6300&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.......&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00336450&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;b04&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;6500&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="mi"&gt;5804&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;a00&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00336610&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;f15&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;d01&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="mi"&gt;4315&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;6101&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;  &lt;span class="o"&gt;....].&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;C&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;00336620&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;a15&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;6301&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;b61&lt;/span&gt; &lt;span class="mi"&gt;7070&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;c69&lt;/span&gt; &lt;span class="mi"&gt;6361&lt;/span&gt;  &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;A&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;applica&lt;/span&gt;
&lt;span class="mi"&gt;00336630&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7469&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;f6e&lt;/span&gt; &lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="mi"&gt;8361&lt;/span&gt; &lt;span class="mi"&gt;7263&lt;/span&gt; &lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="mi"&gt;8662&lt;/span&gt; &lt;span class="mi"&gt;6174&lt;/span&gt;  &lt;span class="n"&gt;tion&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;arc&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;
&lt;span class="mi"&gt;00336640&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;746&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;6508&lt;/span&gt; &lt;span class="n"&gt;f087&lt;/span&gt; &lt;span class="mi"&gt;636&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;e74&lt;/span&gt; &lt;span class="mi"&gt;6573&lt;/span&gt; &lt;span class="mi"&gt;740&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;f084&lt;/span&gt;  &lt;span class="n"&gt;tle&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;contest&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00336650&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6461&lt;/span&gt; &lt;span class="mi"&gt;7461&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt; &lt;span class="mi"&gt;8464&lt;/span&gt; &lt;span class="mi"&gt;656&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;f13&lt;/span&gt; &lt;span class="n"&gt;f083&lt;/span&gt; &lt;span class="mi"&gt;6477&lt;/span&gt;  &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;dw&lt;/span&gt;
&lt;span class="mi"&gt;00336660&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;631&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;f089&lt;/span&gt; &lt;span class="mi"&gt;6669&lt;/span&gt; &lt;span class="mi"&gt;656&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;6464&lt;/span&gt; &lt;span class="mi"&gt;6174&lt;/span&gt; &lt;span class="mi"&gt;611&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;f087&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;fielddata&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00336670&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6772&lt;/span&gt; &lt;span class="mi"&gt;6170&lt;/span&gt; &lt;span class="mi"&gt;6869&lt;/span&gt; &lt;span class="mi"&gt;632&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;f088&lt;/span&gt; &lt;span class="mi"&gt;6974&lt;/span&gt; &lt;span class="mi"&gt;656&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;746&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;  &lt;span class="n"&gt;graphic&lt;/span&gt;&lt;span class="o"&gt;,..&lt;/span&gt;&lt;span class="n"&gt;itemto&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I included one previous line for context; starting right after a whole bunch of &lt;code&gt;ff&lt;/code&gt;s or &lt;code&gt;00&lt;/code&gt;s is a pretty good sign, since those are likely to be junk used to fill space.  So we&amp;#8217;re probably in the right place, or at least &lt;em&gt;a&lt;/em&gt; right place.  Also we&amp;#8217;re definitely in the right place since I already know &lt;code&gt;porigon-z&lt;/code&gt; works, but, you&amp;nbsp;know.&lt;/p&gt;
&lt;p&gt;The beginning part of this is a bunch of numbers that start out relatively low and gradually get bigger.  That&amp;#8217;s a pretty good indication of an offset table — a list of &amp;#8220;where this thing starts&amp;#8221; and &amp;#8220;how long it is&amp;#8221;, just like the offset/length pairs that pointed us here in the first place.  The only difference here is that we have a whole bunch of them.  And &lt;code&gt;porigon-z&lt;/code&gt; confirms that this is a list&amp;nbsp;of:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ULInt32(&amp;#39;offset&amp;#39;),
    ULInt16(&amp;#39;top_file_id&amp;#39;),
    ULInt16(&amp;#39;parent_directory_id&amp;#39;),
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My code does a bit more than this, but I don&amp;#8217;t want this post to be about the intricacies of an old version of Construct.  The short version is that each entry is eight bytes long and corresponds to a &lt;em&gt;directory&lt;/em&gt;; this list actually describes the directory tree.  Decoding the first few&amp;nbsp;produces:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;offset 00000228, top file id 0057, parent id 0045
offset 000002cd, top file id 0057, parent id f000
offset 000002f5, top file id 0057, parent id f001
offset 000002fd, top file id 0057, parent id f002
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Again, we encounter some mild weirdness.  The parent ids seem to count upwards, except for the first one, and where did that &lt;code&gt;f&lt;/code&gt; come from?  It turns out that for the &lt;em&gt;first&lt;/em&gt; record only — which is the root directory and therefore has no parent — the parent id is actually the total number of records to read.  So there are &lt;code&gt;0x0045&lt;/code&gt; or 69 records here.  As for the &lt;code&gt;f&lt;/code&gt;, well, I have no idea!  I just discard it entirely when linking directories&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s fully decode entry 3 (the fourth one, since we started at zero).  It has offset &lt;code&gt;0x000002fd&lt;/code&gt;, which is relative to where the table starts, so we need to add that to &lt;code&gt;0x00336400&lt;/code&gt; to get &lt;code&gt;0x003366fd&lt;/code&gt;.  We don&amp;#8217;t have a length, but starting from there we&amp;nbsp;see:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;003366&lt;/span&gt;&lt;span class="n"&gt;f0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                                 &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;6362&lt;/span&gt;               &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cb&lt;/span&gt;
&lt;span class="mi"&gt;00336700&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;f64&lt;/span&gt; &lt;span class="mi"&gt;6174&lt;/span&gt; &lt;span class="mi"&gt;612&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;e61&lt;/span&gt; &lt;span class="mi"&gt;7263&lt;/span&gt; &lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;7769&lt;/span&gt; &lt;span class="mi"&gt;6669&lt;/span&gt;  &lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;narc&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;wifi&lt;/span&gt;
&lt;span class="mi"&gt;00336710&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;f65&lt;/span&gt; &lt;span class="mi"&gt;6172&lt;/span&gt; &lt;span class="mi"&gt;7468&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;e6e&lt;/span&gt; &lt;span class="mi"&gt;6172&lt;/span&gt; &lt;span class="mi"&gt;6315&lt;/span&gt; &lt;span class="mi"&gt;7769&lt;/span&gt; &lt;span class="mi"&gt;6669&lt;/span&gt;  &lt;span class="n"&gt;_earth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;narc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wifi&lt;/span&gt;
&lt;span class="mi"&gt;00336720&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;f65&lt;/span&gt; &lt;span class="mi"&gt;6172&lt;/span&gt; &lt;span class="mi"&gt;7468&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;f70&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;c61&lt;/span&gt; &lt;span class="mi"&gt;6365&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;e6e&lt;/span&gt; &lt;span class="mi"&gt;6172&lt;/span&gt;  &lt;span class="n"&gt;_earth_place&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nar&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I called the structure here a &lt;code&gt;filename_list_struct&lt;/code&gt;.  Also, as I read this code, I really wish I&amp;#8217;d made it more sensible; sorry, I guess I&amp;#8217;ll clean it up when I get around to re-ripping gen 4.  The Construct code is a bit goofy, but the idea&amp;nbsp;is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read a byte.  If it&amp;#8217;s zero, stop here.  Otherwise, the top bit is a flag indicating whether this entry is a directory; the rest is a&amp;nbsp;length.&lt;/li&gt;
&lt;li&gt;The next &lt;em&gt;length&lt;/em&gt; bytes are the&amp;nbsp;filename.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iff&lt;/strong&gt; this is a directory, the next two bytes are the directory&amp;nbsp;id.&lt;/li&gt;
&lt;li&gt;Repeat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Ah yes, bits and flags.  A &lt;em&gt;flag&lt;/em&gt; is something that can only be true or false, so it really only needs one bit to store.  So programmers like to cram flags into the same byte as other stuff to save space.  Computers can&amp;#8217;t examine individual bits directly, but it&amp;#8217;s easy to manipulate them from code with a little math.  Of course, using 1 bit for a flag means only 7 are left for the length, so it&amp;#8217;s limited to 127 instead of&amp;nbsp;255.)&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s try this.  The first byte is &lt;code&gt;0c&lt;/code&gt;.  I can tell you right away that the top bit is zero; if the top bit is one, then the first hex digit will be &lt;code&gt;8&lt;/code&gt; or greater.  So this is just a file, and it&amp;#8217;s &lt;code&gt;0c&lt;/code&gt; or 12 bytes long.  The next twelve bytes are &lt;code&gt;cb_data.narc&lt;/code&gt;, so that&amp;#8217;s the filename.  Repeat from the beginning: the next byte is &lt;code&gt;00&lt;/code&gt;, which is zero, so we&amp;#8217;re done.  This directory only contains a single file, &lt;code&gt;cb_data.narc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But wait, what &lt;em&gt;is&lt;/em&gt; this directory?  We know its id is 3; its name would appear somewhere in the filename list for its parent directory, 2, along with an extra two bytes indicating it matches to directory 3.  To get the name for directory 2, we&amp;#8217;d consult directory 1; and directory 1&amp;#8217;s parent is directory 0.  Directory 0 is the root, which is just &lt;code&gt;/&lt;/code&gt; and has no name, so at that point we&amp;#8217;re done.  Of course, if we read all these filename lists in order rather than skipping straight to the third one, then we&amp;#8217;d have already seen all these names and wouldn&amp;#8217;t have to look them&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;One final question: where&amp;#8217;s the data?  All we have are filenames.  It turns out the data is in a totally separate table at &lt;code&gt;fat_offset&lt;/code&gt; — &amp;#8220;&lt;span class="caps"&gt;FAT&lt;/span&gt;&amp;#8221; is short for &amp;#8220;file allocation table&amp;#8221;.  That&amp;#8217;s a vastly simpler list of pairs of start offset and end offset, giving the positions of the individual files, and nothing&amp;nbsp;else.&lt;/p&gt;
&lt;p&gt;All we have to do is match up the filenames to those offset pairs.  This is where the &amp;#8220;top file id&amp;#8221; comes in: it&amp;#8217;s the id of the first file in the directory, and the others count up from there.  This directory&amp;#8217;s top file id is &lt;code&gt;0x57&lt;/code&gt;, so &lt;code&gt;cb_data.narc&lt;/code&gt; has file id &lt;code&gt;0x57&lt;/code&gt;.  (If there were a next file, it would have id &lt;code&gt;0x58&lt;/code&gt;, and so on.)  Its data is given by the &lt;code&gt;0x57&lt;/code&gt;th (87th) pair of&amp;nbsp;offsets.&lt;/p&gt;
&lt;p&gt;Phew!  We haven&amp;#8217;t even gotten anywhere yet.  But this is important for figuring out where anything even &lt;em&gt;is&lt;/em&gt;.  And you don&amp;#8217;t have to do it by hand, since I wrote a program to do it.&amp;nbsp;Run:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python2 -m porigonz pokemon-diamond.nds list
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To get output like&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/application/custom_ball/data
   87 0x03810200 0x0381ef8c     60812 [  295] /application/custom_ball/data/cb_data.narc
/application/wifi_earth
   88 0x037b2400 0x037d7674    152180 [    8] /application/wifi_earth/wifi_earth.narc
   89 0x037d7800 0x037d84c8      3272 [   19] /application/wifi_earth/wifi_earth_place.narc
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hey, it&amp;#8217;s our friend &lt;code&gt;cb_data.narc&lt;/code&gt;, with its full path!  On the left is its file id, 87.  Next are its start and end offsets, followed by its&amp;nbsp;filesize.&lt;/p&gt;
&lt;p&gt;You may notice that before the filenames start, you&amp;#8217;ll get a list of &lt;em&gt;unnamed&lt;/em&gt; files.  These are entries in the &lt;span class="caps"&gt;FAT&lt;/span&gt; that have no corresponding filename.  I learned only recently that they&amp;#8217;re code — &lt;em&gt;overlays&lt;/em&gt;, in fact, though I don&amp;#8217;t know what that means&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;Now we can start looking at data and figuring it out.  &lt;em&gt;Finally&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="narcs-and-basic-pokemon-data"&gt;&lt;a class="toclink" href="#narcs-and-basic-pokemon-data"&gt;NARCs and basic Pokémon&amp;nbsp;data&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was &lt;em&gt;fantastic&lt;/em&gt;.  All the game data, nearly arranged into files, and even named sensibly for us.  A goldmine.  It didn&amp;#8217;t used to be so easy, as we will see&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;Other people had already noticed the file &lt;code&gt;/poketool/personal/personal.narc&lt;/code&gt; contains much of the base data about Pokémon.  You&amp;#8217;ll notice it has a &amp;#8220;501&amp;#8221; in brackets next to it, indicating that it&amp;#8217;s actually a &lt;span class="caps"&gt;NARC&lt;/span&gt; file — a &amp;#8220;Nitro archive&amp;#8221;, Nitro being the original codename for the &lt;span class="caps"&gt;DS&lt;/span&gt;.  This is a generic uncompressed container that just holds some number of sub-files — in this case, 501.  The subfiles can have names, but the ones in this game generally don&amp;#8217;t, so the only way to refer to them is by&amp;nbsp;number.&lt;/p&gt;
&lt;p&gt;You may also notice that &lt;code&gt;evo.narc&lt;/code&gt; and &lt;code&gt;wotbl.narc&lt;/code&gt;, in the same directory, are also NARCs with 501 records.  It&amp;#8217;s a pretty safe bet that they all have one record per Pokémon.  That&amp;#8217;s a little odd, since Pokémon Diamond only has 493 Pokémon, but we&amp;#8217;ll figure that out&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;NARC&lt;/span&gt; is, as far as I can tell, an invention of Nintendo.  I think it&amp;#8217;s in other &lt;span class="caps"&gt;DS&lt;/span&gt; games, though I haven&amp;#8217;t investigated any others very much, so I can&amp;#8217;t say how common it is.  It&amp;#8217;s a very simple format, and it uses basically the same structure as the entire &lt;span class="caps"&gt;DS&lt;/span&gt; filesystem: a list of start/end offsets and a list of filenames.  It doesn&amp;#8217;t have the same directory nesting, so it&amp;#8217;s much simpler, and also the filenames are usually missing, so it&amp;#8217;s simpler still.  But you don&amp;#8217;t have to care, because you can examine the contents of a file&amp;nbsp;with:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python2 -m porigonz pokemon-diamond.nds cat -f hex /poketool/personal/personal.narc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This will print every record as an unbroken string of hex, one record per line.  (I admit this is not the smartest format; it&amp;#8217;s hard to see where byte boundaries are.  Again, hopefully I&amp;#8217;ll fix this up a bit when I rerip gen 4.)  Here are the first six Pokémon&amp;nbsp;records.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2d31312d41410c032d400001000000001f144603010741000003000020073584081e10022024669202000000
3c3e3f3c50500c032d8d0005000000001f144603010741000003000020073584081e10022024669202000000
5052535064640c032dd00006000000001f144603010741000003000030473586081e1002282466920a000000
27342b413c320a0a2d414000000000001f144603010e420000000000230651cce41e821201a4469202000000
3a403a5050410a0a2d8e4001000000001f144603010e420000000000230651cce41e821201a4469202000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That first one is pretty conspicuous, what with its being all zeroes.  It&amp;#8217;s probably some a dummy entry, for whatever reason.  That does make things a little simpler, though!  Numbering from zero has caused some confusion in the past: Bulbasaur (National Dex number 1) would be record 0, and I&amp;#8217;ve had all kinds of goofy bugs from forgetting to subtract or add 1 all over the place.  With a dummy record at 0, that means Bulbasaur is 1, and everything is numbered as&amp;nbsp;expected.&lt;/p&gt;
&lt;p&gt;So, what &lt;em&gt;is&lt;/em&gt; any of this?  The heart of figuring out data formats is looking for stuff you know.  That might mean looking for data you know &lt;em&gt;should&lt;/em&gt; be there, or it might mean identifying common schemes for storing&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;A good start, then, would be to look at &lt;a href="https://veekun.com/dex/pokemon/bulbasaur"&gt;what I already know about Bulbasaur&lt;/a&gt;.  Base stats are a pretty fundamental property, and Bulbasaur&amp;#8217;s are 45, 49, 49, 65, 65, and 45.  In hex, that&amp;#8217;s &lt;code&gt;2d 31 31 41 41 2d&lt;/code&gt;.  Hey, that&amp;#8217;s the beginning of the first line!  It&amp;#8217;s just slightly out of order; Speed comes before the special&amp;nbsp;stats.&lt;/p&gt;
&lt;p&gt;You can also pick out some differences by comparing rows.  About 60% of the way along the line, I see &lt;code&gt;03&lt;/code&gt; for Bulbasaur, Ivysaur, and Venusaur, but then &lt;code&gt;00&lt;/code&gt; for Charmander and Charmeleon.  That&amp;#8217;s different between &lt;em&gt;families&lt;/em&gt;, which seems like a huge hint; does that continue to hold true?  (As it turns out, no!  It fails for Butterfree — because it indicates the Pokémon&amp;#8217;s &lt;em&gt;color&lt;/em&gt;, used in the Pokédex search.  Most families are similar&amp;nbsp;colors.)&lt;/p&gt;
&lt;p&gt;Sometimes a byte will seem to only take one of a few small values, which usually means it&amp;#8217;s an enum (one of a list of numbered options), like the colors are.  A byte that only ranges from 1 to 17 (or perhaps 0 to 16) is almost certainly type, for example, since there are 17&amp;nbsp;types.&lt;/p&gt;
&lt;p&gt;Noticing common patterns — very tiny formats, I suppose — is also very helpful (and saves you from wild goose chases).  For example, Pokémon can appear in the wild holding held items, and there are more than 256 items, so referring to an item requires &lt;em&gt;two&lt;/em&gt; bytes.  But there are only &lt;em&gt;slightly&lt;/em&gt; more than 256 items in this game, so the second byte is always &lt;code&gt;00&lt;/code&gt; or &lt;code&gt;01&lt;/code&gt;.  If you remember that some fields must span multiple bytes, that&amp;#8217;s an incredible hint that you&amp;#8217;re looking at small 16-bit numbers; if you forget, you might thing the &lt;code&gt;01&lt;/code&gt; is a separate field that only stores a single flag&amp;#8230; and drive yourself mad trying to find a pattern to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The games have a number of TMs which can teach particular moves, and each Pokémon can learn a unique set of TMs.  These are stored as a longer block of bytes, where each individual bit is either 1 or 0 to indicate compatibility.  Those are a bit harder to identify with certainty, since (a) the set of TMs changes in every game so you can&amp;#8217;t just check what the expected value is, and (b) bitflags can produce virtually any number with no discernible&amp;nbsp;pattern.&lt;/p&gt;
&lt;p&gt;Thankfully, there&amp;#8217;s a pretty big giveaway for TMs in particular.  Here are Caterpie, Metapod, and&amp;nbsp;Butterfree:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2d1e232d14140606ff350100000000007f0f4600030313000003000000000000000000000000000000000000
3214371e1919060678482000000000007f0f460003033d000003000000000000000000000000000000000000
3c2d3246505006022da000060000de007f0f460003030e000008000020463fb480be14222830560301000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Butterfree can learn TMs.  Caterpie and Metapod are almost unique in that they can&amp;#8217;t learn &lt;em&gt;any&lt;/em&gt;.  Guess where the TMs are!  Even better, Caterpie is only #9, so this shows up very early&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;And, well, that&amp;#8217;s the basic process.  It&amp;#8217;s mostly about &lt;em&gt;cheating&lt;/em&gt;, about leveraging every possible trick you can come up with to find patterns and landmarks.  I even wrote a script for this (and several other files) that dumped out a huge &lt;span class="caps"&gt;HTML&lt;/span&gt; table with the names of the (known) Pokémon on the left and byte positions as columns.  When I figured something out, or at least had a suspicion, I labelled the column and changed that byte to print as something more readable (e.g., printing the names of types instead of just their&amp;nbsp;numbers).&lt;/p&gt;
&lt;p&gt;Of course, if you have a flash cartridge or emulator (both of which were hard to come by at the time), you can always invoke the nuclear option: &lt;em&gt;change the data&lt;/em&gt; and see what changes in the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;Still, easy, right?  How hard could this&amp;nbsp;be.&lt;/p&gt;
&lt;h3 id="sprites-in-which-it-gets-hard"&gt;&lt;a class="toclink" href="#sprites-in-which-it-gets-hard"&gt;Sprites: In which it gets&amp;nbsp;hard&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What we really really wanted were the &lt;em&gt;sprites&lt;/em&gt;.  This was a new generation with new Pokémon, after all, and sprites were the primary way we got to &lt;em&gt;see&lt;/em&gt; them.  Unlike nearly everything else, this hadn&amp;#8217;t already been figured out by other people by the time I showed&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;Finding them was easy enough — there&amp;#8217;s a file named &lt;code&gt;/poketool/pokegra/pokegra.narc&lt;/code&gt;, which is conspicuously large.  It&amp;#8217;s a &lt;span class="caps"&gt;NARC&lt;/span&gt; containing 2964 records.  A little factoring reveals that 2964 is 494 × 6 — aha!  There are 493 Pokémon, plus one&amp;nbsp;dummy.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python2 -m porigonz pokemon-diamond.nds extract /poketool/pokegra/pokegra.narc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This will extract the contents of &lt;code&gt;pokegra.narc&lt;/code&gt; to a directory called &lt;code&gt;pokemon-diamond.nds:data&lt;/code&gt;, which I guess might be invalid on Windows or something, so use &lt;code&gt;-d&lt;/code&gt; to give another directory name if you need to.  Anyway, in there you&amp;#8217;ll find a &lt;em&gt;directory&lt;/em&gt; called &lt;code&gt;pokegra.narc&lt;/code&gt;, inside of which are 2964 numbered binary&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;Some brief inspection reveals that they definitely come in groups of six: the filesizes consistently repeat 6.5K, 6.5K, 6.5K, 6.5K, 72, 72.  Sometimes a couple of the files are empty, but the pattern is otherwise very distinct.  Four sprites per Pokémon,&amp;nbsp;then?&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s have a look at the first file!  Since it&amp;#8217;s a dummy sprite, it should be blank or perhaps a question mark, right?  Oh boy I&amp;#8217;m so&amp;nbsp;excited.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5247&lt;/span&gt; &lt;span class="mi"&gt;434&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;fffe&lt;/span&gt; &lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="mi"&gt;3019&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="mi"&gt;0100&lt;/span&gt;  &lt;span class="n"&gt;RGCN&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.......&lt;/span&gt;
&lt;span class="mi"&gt;00000010&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5241&lt;/span&gt; &lt;span class="mi"&gt;4843&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;a00&lt;/span&gt; &lt;span class="mi"&gt;1400&lt;/span&gt; &lt;span class="mi"&gt;0300&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="n"&gt;RAHC&lt;/span&gt; &lt;span class="o"&gt;...........&lt;/span&gt;
&lt;span class="mi"&gt;00000020&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0100&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0019&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;1800&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;................&lt;/span&gt;
&lt;span class="mi"&gt;00000030&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;de54&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="n"&gt;e00a&lt;/span&gt; &lt;span class="mi"&gt;2374&lt;/span&gt; &lt;span class="mi"&gt;927&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;db5&lt;/span&gt; &lt;span class="mi"&gt;7476&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TY&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.|].&lt;/span&gt;&lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="mi"&gt;00000040&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt; &lt;span class="mi"&gt;2183&lt;/span&gt; &lt;span class="n"&gt;c890&lt;/span&gt; &lt;span class="n"&gt;ab40&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;a06&lt;/span&gt; &lt;span class="n"&gt;a53c&lt;/span&gt; &lt;span class="n"&gt;dced&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;f55&lt;/span&gt;  &lt;span class="o"&gt;..!....&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;:..&amp;lt;...&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;
&lt;span class="mi"&gt;00000050&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;e90&lt;/span&gt; &lt;span class="n"&gt;e9a5&lt;/span&gt; &lt;span class="n"&gt;b0e1&lt;/span&gt; &lt;span class="mi"&gt;3324&lt;/span&gt; &lt;span class="n"&gt;e2a2&lt;/span&gt; &lt;span class="n"&gt;ed42&lt;/span&gt; &lt;span class="mi"&gt;4480&lt;/span&gt; &lt;span class="mi"&gt;9790&lt;/span&gt;  &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;BD&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00000060&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5632&lt;/span&gt; &lt;span class="n"&gt;b157&lt;/span&gt; &lt;span class="mi"&gt;989&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;bb3e&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;af2&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="n"&gt;e8&lt;/span&gt; &lt;span class="n"&gt;accd&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;f92&lt;/span&gt;  &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;W&lt;/span&gt;&lt;span class="o"&gt;...&amp;gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;.....&lt;/span&gt;
&lt;span class="mi"&gt;00000070&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;e57&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="n"&gt;b8&lt;/span&gt; &lt;span class="mi"&gt;8064&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="n"&gt;b0&lt;/span&gt; &lt;span class="mi"&gt;3295&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;d4c&lt;/span&gt; &lt;span class="mi"&gt;1476&lt;/span&gt; &lt;span class="n"&gt;a77b&lt;/span&gt;  &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Wy&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;dC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.}&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.{&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hm.  Okay, so, this is a problem.  No matter what the actual contents are, this is a &lt;em&gt;sprite&lt;/em&gt;, and virtually all Pokémon sprites have a big ol&amp;#8217; blob of completely empty space in the upper-left corner.  Every corner, in fact.  Except for a handful of truly massive species, the corners should be empty.  So no matter what scheme this is using or what order the pixels are in, I should be seeing a &lt;em&gt;whole lot&lt;/em&gt; of zeroes somewhere.  And I&amp;#8217;m&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;Compression?  Seems very unlikely, since &lt;em&gt;every file&lt;/em&gt; is either 0, 72, or 6448 bytes, without&amp;nbsp;exception.&lt;/p&gt;
&lt;p&gt;Well, let&amp;#8217;s see what we&amp;#8217;ve got here.  &lt;code&gt;RGCN&lt;/code&gt; and &lt;code&gt;RAHC&lt;/code&gt; are almost certainly magic numbers, so this is one file format nested inside another.  (A lot of file formats start with a short fixed string identifying them, a so-called &amp;#8220;magic number&amp;#8221;.  Every &lt;span class="caps"&gt;GIF&lt;/span&gt; starts with the text &lt;code&gt;GIF89a&lt;/code&gt;, for example.  A &lt;span class="caps"&gt;NARC&lt;/span&gt; file starts with &lt;code&gt;CRAN&lt;/code&gt; — presumably it&amp;#8217;s &amp;#8220;backwards&amp;#8221; because it&amp;#8217;s being read as an actual little-endian number.)  I assume the real data begins at &lt;code&gt;0x30&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Without that leading &lt;code&gt;0x30&lt;/code&gt; (48) bytes, the file is 6400 bytes large, which is a mighty conspicuous square number!  Pokémon sprites have always been square, so this could mean they&amp;#8217;re 80×80, one byte per pixel.  (Hm, but Pokémon sprites don&amp;#8217;t need anywhere near 256&amp;nbsp;colors?)&lt;/p&gt;
&lt;p&gt;I see a &lt;code&gt;30&lt;/code&gt; in the first line, which is probably the address of the data.  I also see a &lt;code&gt;10&lt;/code&gt;, which is probably the (16-bit?) length of that initial header, or the address of the second header.  What about in the second header?  Well, uh, hm.  I see a lot of what seem to be small 16-bit or 32-bit numbers: &lt;code&gt;0x000a&lt;/code&gt; is 10, &lt;code&gt;0x0014&lt;/code&gt; is 20, &lt;code&gt;0x0003&lt;/code&gt; is 3; &lt;code&gt;0x0018&lt;/code&gt; is 24.  A quick check reveals that &lt;code&gt;0x1900&lt;/code&gt; is 6400 (the size of the data), and so &lt;code&gt;0x1920&lt;/code&gt; is the size of the data plus this second&amp;nbsp;header.&lt;/p&gt;
&lt;p&gt;This hasn&amp;#8217;t really told me anything I don&amp;#8217;t already know.  It seems very conspicuous that there&amp;#8217;s no &lt;code&gt;0x50&lt;/code&gt;, which is 80, my assumed size of the&amp;nbsp;sprite.&lt;/p&gt;
&lt;p&gt;Well, hm, let&amp;#8217;s look at the second file.  It&amp;#8217;s in the block for the same &amp;#8220;Pokémon&amp;#8221;, so maybe it&amp;#8217;ll provide some&amp;nbsp;clues.&lt;/p&gt;
&lt;p&gt;Ah.  No.  It starts out completely identical.  In fact, &lt;code&gt;md5sum&lt;/code&gt; reveals that all &lt;em&gt;four&lt;/em&gt; of these first sprites are identical.  Might make sense for a dummy Pokémon.  Does that pattern hold for the next Pokémon, which I assume is Bulbasaur?  Not quite!  Files 6 and 7 are identical, and 8 and 9 are identical, but they&amp;#8217;re distinct from each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s the point of them then?  Further inspection reveals that &lt;em&gt;most&lt;/em&gt; Pokémon have paired sprites like this, but Pikachu does &lt;em&gt;not&lt;/em&gt; — suggesting (correctly) that the sprites are male versus female, so Pokémon that don&amp;#8217;t have gender differences naturally have identical pairs of&amp;nbsp;sprites.&lt;/p&gt;
&lt;p&gt;Okay, then, let&amp;#8217;s look at Pikachu&amp;#8217;s first sprite, 150.  The key is often in the differences, remember.  If the dummy sprite is either blank or a question mark, then it should still have a lot of corner pixels in common with the relatively small&amp;nbsp;Pikachu.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00000030&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b6bd&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;f4c&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;c6e&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;d16&lt;/span&gt; &lt;span class="n"&gt;b226&lt;/span&gt; &lt;span class="n"&gt;db0b&lt;/span&gt; &lt;span class="mi"&gt;0818&lt;/span&gt; &lt;span class="n"&gt;c934&lt;/span&gt;  &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;oLln&lt;/span&gt;&lt;span class="o"&gt;=..&amp;amp;.....&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;00000040&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;eeb7&lt;/span&gt; &lt;span class="mi"&gt;876&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;e41f&lt;/span&gt; &lt;span class="mi"&gt;9542&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;a6d&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="n"&gt;da&lt;/span&gt; &lt;span class="mi"&gt;0022&lt;/span&gt; &lt;span class="n"&gt;a1cb&lt;/span&gt;  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;Bjms&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&lt;/span&gt;
&lt;span class="s2"&gt;00000050: 2683 9f01 5cfa ed9b 2275 0bce f8c4 79bf  &amp;amp;...\...&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;00000060&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;eff&lt;/span&gt; &lt;span class="n"&gt;b76b&lt;/span&gt; &lt;span class="n"&gt;d4dd&lt;/span&gt; &lt;span class="mi"&gt;4582&lt;/span&gt; &lt;span class="n"&gt;da1d&lt;/span&gt; &lt;span class="n"&gt;a346&lt;/span&gt; &lt;span class="n"&gt;f0e0&lt;/span&gt; &lt;span class="mi"&gt;5170&lt;/span&gt;  &lt;span class="o"&gt;^..&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;Qp&lt;/span&gt;
&lt;span class="mi"&gt;00000070&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;960&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;cf0a&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;caa&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;d55&lt;/span&gt; &lt;span class="mi"&gt;9247&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;ba4&lt;/span&gt; &lt;span class="n"&gt;e855&lt;/span&gt; &lt;span class="mi"&gt;293&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;G&lt;/span&gt;&lt;span class="o"&gt;;..&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;00000080&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ce8a&lt;/span&gt; &lt;span class="n"&gt;e73e&lt;/span&gt; &lt;span class="n"&gt;c43f&lt;/span&gt; &lt;span class="n"&gt;f575&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;ad2&lt;/span&gt; &lt;span class="n"&gt;d346&lt;/span&gt; &lt;span class="n"&gt;e003&lt;/span&gt; &lt;span class="mi"&gt;0189&lt;/span&gt;  &lt;span class="o"&gt;...&amp;gt;.?.&lt;/span&gt;&lt;span class="n"&gt;uJ&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="mi"&gt;00000090&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;065&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;ff67&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c7e&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;d43&lt;/span&gt; &lt;span class="mi"&gt;029&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b8e&lt;/span&gt; &lt;span class="n"&gt;d8ca&lt;/span&gt; &lt;span class="n"&gt;d9b0&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;~&lt;/span&gt;&lt;span class="n"&gt;MC&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.....&lt;/span&gt;
&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;e5a&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;e6&lt;/span&gt; &lt;span class="n"&gt;b445&lt;/span&gt; &lt;span class="n"&gt;a51d&lt;/span&gt; &lt;span class="n"&gt;ba8a&lt;/span&gt; &lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;d08a&lt;/span&gt; &lt;span class="n"&gt;b115&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;..........&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Well.  Nope.  How does that compare to Pikachu&amp;#8217;s second sprite, 151 — which ought to be &lt;em&gt;extremely&lt;/em&gt; similar, seeing as the only gender difference is a notch in the&amp;nbsp;tail?&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00000030&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2957&lt;/span&gt; &lt;span class="n"&gt;ce67&lt;/span&gt; &lt;span class="n"&gt;e76f&lt;/span&gt; &lt;span class="n"&gt;c494&lt;/span&gt; &lt;span class="n"&gt;f5fe&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;adf&lt;/span&gt; &lt;span class="n"&gt;d367&lt;/span&gt; &lt;span class="n"&gt;e008&lt;/span&gt;  &lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="mi"&gt;00000040&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0182&lt;/span&gt; &lt;span class="mi"&gt;0697&lt;/span&gt; &lt;span class="n"&gt;ff78&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c33&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;dac&lt;/span&gt; &lt;span class="mi"&gt;020&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b8f&lt;/span&gt; &lt;span class="n"&gt;d82f&lt;/span&gt;  &lt;span class="o"&gt;.....&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;../&lt;/span&gt;
&lt;span class="mi"&gt;00000050&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d989&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;ef7&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;d7&lt;/span&gt; &lt;span class="n"&gt;b45a&lt;/span&gt; &lt;span class="n"&gt;a566&lt;/span&gt; &lt;span class="n"&gt;ba57&lt;/span&gt; &lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;bc&lt;/span&gt; &lt;span class="n"&gt;d04f&lt;/span&gt;  &lt;span class="o"&gt;..&amp;gt;....&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;W&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="mi"&gt;00000060&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b1ce&lt;/span&gt; &lt;span class="mi"&gt;7668&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fea&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;ceb&lt;/span&gt; &lt;span class="n"&gt;fd8d&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="n"&gt;a5&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;b4d&lt;/span&gt; &lt;span class="n"&gt;c848&lt;/span&gt;  &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;vh&lt;/span&gt;&lt;span class="o"&gt;/.,...&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;H&lt;/span&gt;
&lt;span class="mi"&gt;00000070&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="n"&gt;b0&lt;/span&gt; &lt;span class="n"&gt;aeca&lt;/span&gt; &lt;span class="mi"&gt;4712&lt;/span&gt; &lt;span class="n"&gt;a4c4&lt;/span&gt; &lt;span class="mi"&gt;5582&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;ad4&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="n"&gt;a4&lt;/span&gt; &lt;span class="n"&gt;c0fa&lt;/span&gt;  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.*.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;00000080&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;618&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;e6fd&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;faf&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;cc7&lt;/span&gt; &lt;span class="n"&gt;ada3&lt;/span&gt; &lt;span class="n"&gt;e2c3&lt;/span&gt; &lt;span class="n"&gt;cb1f&lt;/span&gt; &lt;span class="n"&gt;b845&lt;/span&gt;  &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;..........&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;
&lt;span class="mi"&gt;00000090&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ee2&lt;/span&gt; &lt;span class="mi"&gt;7721&lt;/span&gt; &lt;span class="mi"&gt;94&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="mi"&gt;0552&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;a54&lt;/span&gt; &lt;span class="mi"&gt;6320&lt;/span&gt; &lt;span class="n"&gt;b009&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;!...&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Tc&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="n"&gt;c4&lt;/span&gt; &lt;span class="mi"&gt;5657&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;fc8&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;cc7&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;ded&lt;/span&gt; &lt;span class="mi"&gt;5266&lt;/span&gt; &lt;span class="n"&gt;fb05&lt;/span&gt; &lt;span class="n"&gt;a826&lt;/span&gt;  &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;VW&lt;/span&gt;&lt;span class="o"&gt;....].&lt;/span&gt;&lt;span class="n"&gt;Rf&lt;/span&gt;&lt;span class="o"&gt;...&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Oh, my god.  Nothing is similar at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Make a histogram?  Every possible value appears with roughly the same frequency.  Now that &lt;em&gt;is&lt;/em&gt; interesting, and suggests some form of encryption — most likely one big &amp;#8220;mask&amp;#8221; xor&amp;#8217;d with the whole sprite.  But how to find the&amp;nbsp;mask?&lt;/p&gt;
&lt;p&gt;(It doesn&amp;#8217;t matter exactly what &lt;em&gt;xor&lt;/em&gt; is, here.  It only has two relevant properties.  One is that it&amp;#8217;s self-reversing, making it handy for encryption like this — &lt;code&gt;(data xor mask) xor mask&lt;/code&gt; produces the original data.  The other is that anything xor&amp;#8217;d with zero is left unchanged, so if I think the original data was zero — as it ought to be for the blank pixels in the corners of a sprite — then the encrypted data is just the mask!  So I &lt;em&gt;know&lt;/em&gt; at least the beginning parts of the mask for most sprites; I just have to figure out how to use a little bit of that to reconstitute the whole&amp;nbsp;thing.)&lt;/p&gt;
&lt;p&gt;I stared at this for days.  I printed out copies of sprite hex and stared at them more on breaks at work.  I threw everything I knew, which admittedly wasn&amp;#8217;t a lot, at this ridiculous&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;And slowly, some patterns started to emerge.  Consider the first digit of the last column in the above hex dump: it goes &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;.  In fact, if you look at the entire byte, they go &lt;code&gt;e0&lt;/code&gt;, &lt;code&gt;d8&lt;/code&gt;, &lt;code&gt;d0&lt;/code&gt;, &lt;code&gt;c8&lt;/code&gt;, etc.  That&amp;#8217;s just subtracting &lt;code&gt;08&lt;/code&gt; on each&amp;nbsp;row.&lt;/p&gt;
&lt;p&gt;Are there other cases like this?  &lt;em&gt;Kinda&lt;/em&gt;!  In the third column, the second digit alternates between &lt;code&gt;7&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt;; closer inspection reveals that byte&amp;#8217;s increasing by &lt;code&gt;18&lt;/code&gt; every row.  Oh, the sixth column too.  Hang on — in &lt;em&gt;every column&lt;/em&gt;, the second digit alternates between two values.  That seems true for every other file we&amp;#8217;ve seen so far,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;This is extremely promising!  Let&amp;#8217;s try this.  Take the first two rows, which are bytes 0–15 and bytes 16–31.  Subtract the second row from the first row bytewise, making a sort of &amp;#8220;delta row&amp;#8221;.  For the second Pikachu, that&amp;nbsp;produces:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d82b 3830 1809 789f 58ae b82c 9828 f827
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As expected, the second digit in each column is an &lt;code&gt;8&lt;/code&gt;.  Now just start with the first row and keep adding the delta to it to produce enough rows to cover the whole file, and xor that with the file itself.&amp;nbsp;Results:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;................&lt;/span&gt;
&lt;span class="mi"&gt;00000010&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;  &lt;span class="o"&gt;................&lt;/span&gt;
&lt;span class="mi"&gt;00000020&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0024&lt;/span&gt; &lt;span class="mi"&gt;0030&lt;/span&gt; &lt;span class="mi"&gt;0056&lt;/span&gt; &lt;span class="mi"&gt;0088&lt;/span&gt; &lt;span class="mi"&gt;003&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;0060&lt;/span&gt; &lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;0019&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;V&lt;/span&gt;&lt;span class="o"&gt;...&amp;lt;.&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="mi"&gt;00000030&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0016&lt;/span&gt; &lt;span class="mi"&gt;009&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;0060&lt;/span&gt; &lt;span class="mi"&gt;009&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;0085&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;c6&lt;/span&gt; &lt;span class="mi"&gt;0092&lt;/span&gt; &lt;span class="mi"&gt;0035&lt;/span&gt;  &lt;span class="o"&gt;.....&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;.........&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;00000040&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;b3&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;ed&lt;/span&gt; &lt;span class="mi"&gt;0081&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;d4&lt;/span&gt; &lt;span class="mi"&gt;0034&lt;/span&gt; &lt;span class="mi"&gt;005&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;a3&lt;/span&gt; &lt;span class="mi"&gt;005&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;  &lt;span class="o"&gt;.........&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;.[...^&lt;/span&gt;
&lt;span class="mi"&gt;00000050&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt; &lt;span class="mi"&gt;0033&lt;/span&gt; &lt;span class="mi"&gt;0068&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;c7&lt;/span&gt; &lt;span class="mi"&gt;0078&lt;/span&gt; &lt;span class="mi"&gt;0030&lt;/span&gt; &lt;span class="mi"&gt;008&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;  &lt;span class="o"&gt;.....&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="mi"&gt;00000060&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0092&lt;/span&gt; &lt;span class="mi"&gt;0065&lt;/span&gt; &lt;span class="mi"&gt;0084&lt;/span&gt; &lt;span class="mi"&gt;009&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;0040&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;b3&lt;/span&gt; &lt;span class="mi"&gt;0077&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;fb&lt;/span&gt;  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.....&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="mi"&gt;00000070&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0040&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;e0&lt;/span&gt; &lt;span class="mi"&gt;0066&lt;/span&gt; &lt;span class="mi"&gt;002&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;002&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;0075&lt;/span&gt; &lt;span class="mi"&gt;007&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;003&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.*.-.&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;z&lt;/span&gt;&lt;span class="o"&gt;.?&lt;/span&gt;
&lt;span class="mi"&gt;00000080&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0076&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;da&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;b3&lt;/span&gt; &lt;span class="mi"&gt;0008&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="n"&gt;e6&lt;/span&gt; &lt;span class="mi"&gt;0097&lt;/span&gt; &lt;span class="mi"&gt;003&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.............&amp;lt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Promising!  We got a bunch of zeroes, as expected, though everything else is still fairly garbled.  It might help if we, say, printed this out to a&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;By now it had become clear that the small files were palettes of sixteen colors stored as &lt;span class="caps"&gt;RGB555&lt;/span&gt; — that is, each color is packed into two bytes, with five bits each for the red, green, and blue channels.  Sixteen colors means two pixels can be crammed into a single byte, so the sprites are actually 160×80, not 80×80.  Combining this knowledge with the above partially-decrypted output, we&amp;nbsp;get:&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-08-02-datamining-pokemon/pikachu-partial.png" alt="A somewhat obscured Pikachu sprite; half of the columns are garbled"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Success!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kinda!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Meanwhile another fansite found our code and put up a full set of these ugly-ass corrupt sprites, so that was&amp;nbsp;nice.&lt;/p&gt;
&lt;p&gt;It took me a while to notice another pattern, which emerges if you break the sprite into blocks that are 512 bytes wide (rather than only 16).  You get&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2957 ce67 e76f c494 f5fe 4adf d367 e008 ...
29e2 ce3e e742 c4d3 f5d9 4a46 d30a e057 ...
296d ce15 e715 c412 f5b4 4aad d3ad e0a6 ...
29f8 ceec e7e8 c451 e561 a450 9763 e7f5 ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This time, the byte in the first column is always &lt;em&gt;identical&lt;/em&gt; all the way down.  Well, kind of.  This is encrypted data, remember, and I only know what the mask is because the beginning of the data is usually blank.  The exceptions are when the mask is hitting actual colored pixels, at which point it becomes&amp;nbsp;garbage.&lt;/p&gt;
&lt;p&gt;But even better, look at the second byte in each column.  Now they&amp;#8217;re all separated by a constant, all the way down!  That means I can repeat the same logic as before, except with two &amp;#8220;rows&amp;#8221; that are 512 bytes long, and as long as the first 1024 bytes of the original data are all zeroes, I&amp;#8217;ll get a perfect sprite&amp;nbsp;out!&lt;/p&gt;
&lt;p&gt;And indeed, I did!  Mostly.  Legendary Pokémon and a handful of others tend to be quite large, so they didn&amp;#8217;t start with as many zeroes as I needed for this scheme to work.  But it &lt;em&gt;mostly&lt;/em&gt; worked, and that was pretty goddamn&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;magical, a long-time co-conspirator, managed to scrounge up &lt;a href="https://gist.github.com/magical/44505dc6c23871be8e4d57707d296d7a"&gt;my final &amp;#8220;working&amp;#8221; code from that era&lt;/a&gt; (which then helped me find my own local copy of all my D/P research stuff, which I oughta put up somewhere).  It&amp;#8217;s total nonsense, but it came pretty close to&amp;nbsp;working.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;Hm?  What?  You want to know the &lt;em&gt;real&lt;/em&gt; answer?  Yeah, I bet you&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;Okay, here you go.  So the games have a random number generator, for&amp;#8230;  generating random numbers.  This being fairly simple hardware with fairly simple (non-crypto) requirements, the random number generator is also fairly simple.  It&amp;#8217;s an &lt;span class="caps"&gt;LCG&lt;/span&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Linear_congruential_generator"&gt;&lt;em&gt;linear congruential generator&lt;/em&gt;&lt;/a&gt;, which is a really bizarre name for a very simple&amp;nbsp;idea:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ax + b
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The generator is defined by the numbers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.  (You have to pick them carefully, or you&amp;#8217;ll get numbers that don&amp;#8217;t look particularly random.)  You pick a starting number (a &lt;em&gt;seed&lt;/em&gt;) and call that &lt;code&gt;x&lt;/code&gt;.  When you want a random number, you compute &lt;code&gt;ax + b&lt;/code&gt;.  You then &lt;em&gt;take a modulus&lt;/em&gt;, which really means &amp;#8220;chop off the higher digits because you only have so much space to store the answer&amp;#8221;.  That&amp;#8217;s your new &lt;code&gt;x&lt;/code&gt;, which you&amp;#8217;ll plug in to get the next random number, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;In the case of the gen 4 Pokémon games, &lt;code&gt;a = 0x4e6d&lt;/code&gt; and &lt;code&gt;b = 0x6073&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What does any of this have to do with the encryption?  Well!  The entire sprite is interpreted as a bunch of 16-bit integers.  The last one is used as the seed and plugged into the &lt;span class="caps"&gt;RNG&lt;/span&gt;, and then it keeps spitting out a sequence of numbers.  Reverse them, since you&amp;#8217;re starting at the end, and that&amp;#8217;s the&amp;nbsp;mask.&lt;/p&gt;
&lt;p&gt;The seed technically overlaps with the last four pixels, but it happens to work since no Pokémon sprites touched the bottom-right corner in Diamond and Pearl.  In Platinum a couple very large sprites broke that rule, so they ended up switching this around and starting from the beginning.  Same idea,&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;Of course, porigon-z &lt;a href="https://github.com/eevee/porigon-z/blob/master/porigonz/nds/util/sprites.py"&gt;knows how to handle this&lt;/a&gt;&amp;#8230;  though it&amp;#8217;s currently hardcoded to use the Platinum approach.  Funny story: the algorithm was originally thought to go from the &lt;em&gt;beginning&lt;/em&gt;, not the end, and it used an &lt;span class="caps"&gt;LCG&lt;/span&gt; with different constants.  Turns out someone had just discovered the &lt;em&gt;reverse&lt;/em&gt; of the Pokémon &lt;span class="caps"&gt;LCG&lt;/span&gt;, which would produce exactly the same sequence, backwards.  Super&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;am&lt;/em&gt; a little curious: why were the sprites encrypted in the first place?  What possible point is there?  They &lt;em&gt;must&lt;/em&gt; have known we cracked the encryption, but then they used it again for Platinum, and again Heart Gold and Soul Silver.  Maybe it was only intended to be enough to delay us, during the gap between the Japanese and worldwide releases&amp;#8230;?&amp;nbsp;Hm.&lt;/p&gt;
&lt;p&gt;Incidentially, the entire game text is also encrypted in much the same way.  Without the encryption, it&amp;#8217;s just &lt;span class="caps"&gt;UTF&lt;/span&gt;-16 — a common character encoding that uses two bytes for every character.  I have no idea what the encryption is for, or why it&amp;#8217;s &lt;em&gt;still&lt;/em&gt; used in Sun and&amp;nbsp;Moon.&lt;/p&gt;
&lt;p&gt;Oh hey, so.  Why did that thing with subtracting the two rows kinda-sorta work?  &lt;em&gt;Well!&lt;/em&gt;  That&amp;#8217;s a very good question that I only just recently bothered looking&amp;nbsp;into.&lt;/p&gt;
&lt;h3 id="some-math"&gt;&lt;a class="toclink" href="#some-math"&gt;SOME&amp;nbsp;MATH&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I think it&amp;#8217;s because of one of the &lt;a href="https://en.wikipedia.org/wiki/Linear_congruential_generator#Period_length"&gt;rules for choosing good factors for an &lt;span class="caps"&gt;LCG&lt;/span&gt;&lt;/a&gt; — in particular, &lt;code&gt;a - 1&lt;/code&gt; should be divisible by 4, or the &lt;span class="caps"&gt;LCG&lt;/span&gt; won&amp;#8217;t run through all possible values.  That means &lt;code&gt;a&lt;/code&gt; can be written as &lt;code&gt;4m + 1&lt;/code&gt;, for some integer &lt;code&gt;m&lt;/code&gt;.  I&amp;#8217;ll come back to this in a&amp;nbsp;moment.&lt;/p&gt;
&lt;p&gt;First, consider what happens when you start with a value &lt;code&gt;x&lt;/code&gt; and run it through the &lt;span class="caps"&gt;LCG&lt;/span&gt; a few times.  At this point I apologize for not having MathJax or something on this blog, but oh&amp;nbsp;well.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;step 0: x
step 1: ax + b
step 2: a(ax + b) + b = a²x + ab + b
step 3: a(a²x + ab + b) + b = a³x + a²b + ab + b
...
step n: aⁿ x + (aⁿ⁻¹ + aⁿ⁻² + ... + a² + a + 1) b
      = aⁿ x + (aⁿ - 1) / (a - 1) b
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;(That last step is a pretty common trick; you can do the multiplication yourself if you don&amp;#8217;t believe&amp;nbsp;me.)&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m going to restrict the cases we care about to when &lt;code&gt;n&lt;/code&gt; is a power of two, because powers of two are interesting.  Let&amp;#8217;s say it&amp;#8217;s, I dunno, 8.  So we have some &lt;code&gt;a⁸&lt;/code&gt; terms in there.  That&amp;#8217;s equivalent to squaring &lt;code&gt;a&lt;/code&gt; three times.  We know &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;4m + 1&lt;/code&gt;, so let&amp;#8217;s try squaring that&amp;nbsp;repeatedly.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a² = (4m + 1)² = 16m² + 8m + 1
a⁴ = (16m² + 8m + 1)² = 256m⁴ + 256m³ + 96m² + 16m + 1
a⁸ = ?!
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;An interesting pattern emerges!  &lt;code&gt;a² - 1&lt;/code&gt; is divisible by 8, and &lt;code&gt;a⁴ - 1&lt;/code&gt; is divisible by 16.  It wouldn&amp;#8217;t be outrageous to assume that &lt;code&gt;a⁸ - 1&lt;/code&gt; is divisible by&amp;nbsp;32.&lt;/p&gt;
&lt;p&gt;But we can do one better: &lt;code&gt;a² - 1&lt;/code&gt; is actually divisible by &lt;code&gt;8m&lt;/code&gt;, and &lt;code&gt;a⁴ - 1&lt;/code&gt; is divisible by &lt;code&gt;16m&lt;/code&gt;, and of course &lt;code&gt;a⁸ - 1&lt;/code&gt; is divisible by &lt;code&gt;32m&lt;/code&gt;.  In other words, we can write &lt;code&gt;a⁸&lt;/code&gt; as &lt;code&gt;32mj + 1&lt;/code&gt;, where &lt;code&gt;j&lt;/code&gt; is a bunch of junk we don&amp;#8217;t care&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s look at the formula for step 8 and replace some of those &lt;code&gt;a&lt;/code&gt;s.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a⁸ x + (a⁸ - 1) / (a - 1) b
= (32mj + 1) x + (32mj) / (4m) b
= 32mjx + x + 8jb
= 8(4mjx + jb) + x
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Aha!  All of these variables are integers, so this is 8, times &lt;em&gt;a bunch of garbage&lt;/em&gt;, plus the original number &lt;code&gt;x&lt;/code&gt;.  Or in other words, by feeding &lt;code&gt;x&lt;/code&gt; through the &lt;span class="caps"&gt;LCG&lt;/span&gt; eight times, we know it increases by a multiple of&amp;nbsp;eight.&lt;/p&gt;
&lt;p&gt;And that explains almost everything.  This particular &lt;span class="caps"&gt;LCG&lt;/span&gt; operates two bytes at a time, so when you look down columns in &lt;code&gt;xxd&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s sixteen byte wide output, you&amp;#8217;re seeing values that are eight steps apart.  Repeatedly adding eight (or an odd multiple of eight) to a number in hex will cause the last digit to alternate between two values, just like repeatedly adding five to a number in decimal.  (But why did the digits alternate down the second column?  Because these are &lt;em&gt;little-endian&lt;/em&gt; two-byte numbers, so the &amp;#8220;last&amp;#8221; or smallest digit appears at the end of the first&amp;nbsp;byte.)&lt;/p&gt;
&lt;p&gt;Similarly, comparing bytes that are 512 apart is the same as comparing two-byte numbers that are 256 steps apart.  You can repeat the same logic to find that after 256 steps, you get 256 times a bunch of garbage, plus &lt;code&gt;x&lt;/code&gt;.  So the last byte will always be unchanged.  256 is &lt;code&gt;0x100&lt;/code&gt; in hex, so in hex it has the same &amp;#8220;shifting to the left&amp;#8221; powers as 100 has in&amp;nbsp;decimal.&lt;/p&gt;
&lt;p&gt;I did gloss over two minor things.  One, why does the value specifically increase by an &lt;em&gt;odd&lt;/em&gt; multiple of eight every eight steps?  That&amp;#8217;s because &lt;code&gt;4mjx + jb&lt;/code&gt; happens to be odd: &lt;code&gt;4mjx&lt;/code&gt; is obviously even, &lt;code&gt;j&lt;/code&gt; is always odd (if you look at what it must be for &lt;code&gt;a²&lt;/code&gt; and &lt;code&gt;a⁴&lt;/code&gt;, you&amp;#8217;ll see it&amp;#8217;s a lot of even terms plus one at the end), and &lt;em&gt;for this particular &lt;span class="caps"&gt;LCG&lt;/span&gt;&lt;/em&gt;, &lt;code&gt;b&lt;/code&gt; is also odd.  If &lt;code&gt;b&lt;/code&gt; were even, you&amp;#8217;d have &lt;em&gt;sixteen&lt;/em&gt; times some garbage plus &lt;code&gt;x&lt;/code&gt;, and so the smallest hex digit would remain the same after eight&amp;nbsp;steps.&lt;/p&gt;
&lt;p&gt;And two, why can I take the same garbage and keep adding it repeatedly to skip ahead 256 steps at a time, when the garbage &lt;em&gt;depends on&lt;/em&gt; the previous value &lt;code&gt;x&lt;/code&gt;?  Well, let&amp;#8217;s see what happens when you take step 256 and plug it back into&amp;nbsp;itself:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;step 0: x
step 256: 256(4mjx + jb) + x
step 512: 256(4mj(256(4mjx + jb) + x) + jb) + (256(4mjx + jb) + x)
        = 256(256(4mj)(4mjx + jb) + 4mjx + jb) + 256(4mjx + jb) + x
    = 65536(4mj)(4mjx + jb) + 256(4mjx + jb) + 256(4mjx + jb) + x
    = 65536(4mj)(4mjx + jb) + 512(4mjx + jb) + x
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That huge term on the left is divisible by 65536, which is &lt;code&gt;0x10000&lt;/code&gt; in hex — in other words, no matter what it is, adding it on can&amp;#8217;t change the last four hex digits.  The &lt;span class="caps"&gt;LCG&lt;/span&gt; only &lt;em&gt;spits out&lt;/em&gt; four hex digits, so no matter what all of that stuff is, it won&amp;#8217;t make any difference.  And once you throw that away, what&amp;#8217;s left is&amp;#8230;  the same expression for step 256, except that the garbage term has been doubled!  We can find the garbage term by subtracting step 0 from step 256 to cancel out the lone &lt;code&gt;x&lt;/code&gt;, and then we can add it to step 256 to get step 512.  By the same reasoning, we can add it again to get step 768, then step 1024, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;I hope that clears that&amp;nbsp;up.&lt;/p&gt;
&lt;h2 id="the-dark-days"&gt;&lt;a class="toclink" href="#the-dark-days"&gt;The dark&amp;nbsp;days&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So Nintendo &lt;span class="caps"&gt;DS&lt;/span&gt; cartridge have a little filesystem on them, making them act kinda like any other disk.&amp;nbsp;Nice.&lt;/p&gt;
&lt;p&gt;Game Boy cartridges&amp;#8230;  don&amp;#8217;t.  A Game Boy cartridge is essentially just a single file, a program.  You pop the cartridge in, and the Game Boy runs that&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;Where is the data, then?  Baked into the program — referred to as &lt;em&gt;hard-coded&lt;/em&gt;.  Just, somewhere, mixed in alongside all the program code.  There&amp;#8217;s no nice index of where it is; rather, somewhere there&amp;#8217;s some code that happens to say &amp;#8220;look at the byte at &lt;code&gt;0x006f9d10&lt;/code&gt; in this program and treat it as&amp;nbsp;data&amp;#8221;.&lt;/p&gt;
&lt;p&gt;I wasn&amp;#8217;t involved in data dumping in these days; I was copying stuff straight out of the wildly inaccurate Prima strategy guide.  (Again, you know, I was 12.)  It&amp;#8217;s hard to say exactly how people fished out the data, though I can take a few&amp;nbsp;guesses.&lt;/p&gt;
&lt;h3 id="a-few-guesses"&gt;&lt;a class="toclink" href="#a-few-guesses"&gt;A few&amp;nbsp;guesses&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To our advantage is the fact that Game Boy cartridges are &lt;em&gt;much&lt;/em&gt; smaller than &lt;span class="caps"&gt;DS&lt;/span&gt; cartridges, so there&amp;#8217;s much less to sift through.  Pokémon Red and Blue are on 1 &lt;span class="caps"&gt;MB&lt;/span&gt; cartridges, and even those are half empty (unused NULs); the original Japanese Red and Green barely fit into 512 &lt;span class="caps"&gt;KB&lt;/span&gt;, and Red and Blue ended up just slightly&amp;nbsp;bigger.&lt;/p&gt;
&lt;p&gt;To our disadvantage is that these are the very first games, so we don&amp;#8217;t have any pre-existing knowledge to look for.  We don&amp;#8217;t know any Pokémon&amp;#8217;s base stats; we may not even know that &amp;#8220;base stats&amp;#8221; are a thing yet.  Also, it&amp;#8217;s not immediately obvious, but the Pokémon aren&amp;#8217;t even stored in order.  Oh, and Mew is completely separate; it really was a last-minute&amp;nbsp;addition.&lt;/p&gt;
&lt;p&gt;What &lt;em&gt;do&lt;/em&gt; we know?  Well, by playing the game, we can see what moves a Pokémon learns and when.  There don&amp;#8217;t seem to be all that many moves, so it&amp;#8217;s reasonable to assume that a move would be represented with a single byte.  Levels are capped at 100, so that&amp;#8217;s probably also a single byte.  &lt;em&gt;Most likely&lt;/em&gt;, the level-up moves are stored as either &lt;code&gt;level move level move...&lt;/code&gt; or &lt;code&gt;move level move level...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Great!  All we need to do is put together a string of known moves both ways and find&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Except, ah, hm.  We don&amp;#8217;t actually know how the moves are numbered.  But we still know the levels, so maybe we can get somewhere.  Let&amp;#8217;s take Bulbasaur, which we know learns Leech Seed at level 7, Vine Whip at level 13, and Poison Powder at level 20.  (Or, I guess, that should be &lt;span class="caps"&gt;LEECH&lt;/span&gt; &lt;span class="caps"&gt;SEED&lt;/span&gt;, &lt;span class="caps"&gt;VINE&lt;/span&gt; &lt;span class="caps"&gt;WHIP&lt;/span&gt;, and &lt;span class="caps"&gt;POISONPOWDER&lt;/span&gt;.)  No matter whether the levels or moves come first, this will result in a string&amp;nbsp;like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;07 ?? 0D ?? 14
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So we can do my favorite thing and slap together a regex for that.  (A &lt;em&gt;regex&lt;/em&gt; is a very compact way to search text — or bytes — for a particular pattern.  A lone &lt;code&gt;.&lt;/code&gt; means any single character, so the regex below is a straightforward translation of the pattern&amp;nbsp;above.)&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;rb&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x07.\x0d.\x14&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rom&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{match.start():08x} {match.group().hex()}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
&lt;span class="mo"&gt;0003&lt;/span&gt;&lt;span class="n"&gt;b848&lt;/span&gt; &lt;span class="mo"&gt;074&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="n"&gt;d1614&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Exactly one match!  Let&amp;#8217;s have a look at that position in the&amp;nbsp;file.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;0003&lt;/span&gt;&lt;span class="n"&gt;b840&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7700&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0110&lt;/span&gt; &lt;span class="mi"&gt;0900&lt;/span&gt; &lt;span class="mi"&gt;0749&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;d16&lt;/span&gt; &lt;span class="mi"&gt;144&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b4b&lt;/span&gt;  &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;........&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;K&lt;/span&gt;
&lt;span class="mi"&gt;0003&lt;/span&gt;&lt;span class="n"&gt;b850&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;224&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;294&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;304&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0749&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;d16&lt;/span&gt; &lt;span class="mi"&gt;164&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;e4b&lt;/span&gt;  &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;O0L&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;K&lt;/span&gt;
&lt;span class="mi"&gt;0003&lt;/span&gt;&lt;span class="n"&gt;b860&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;b4a&lt;/span&gt; &lt;span class="mi"&gt;374&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;414&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0730&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;d23&lt;/span&gt; &lt;span class="mi"&gt;1228&lt;/span&gt; &lt;span class="mi"&gt;1637&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;J7OAL&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;.(.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;0003&lt;/span&gt;&lt;span class="n"&gt;b870&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b84&lt;/span&gt; &lt;span class="mi"&gt;2370&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;b67&lt;/span&gt; &lt;span class="mi"&gt;3238&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;0013&lt;/span&gt;  &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;g28&lt;/span&gt;&lt;span class="o"&gt;....!...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This seems pretty promising!  It looks like the same set of moves is repeated 16 bytes later, but with different (slightly higher) levels after a certain point, which matches how evolved Pokémon behave.  So this looks to be at least Bulbasaur and Ivysaur, though I&amp;#8217;m not quite sure what happened to&amp;nbsp;Venusaur.&lt;/p&gt;
&lt;p&gt;By repeating this process with some other Pokémon, we can start to fill in a mapping of moves to their ids.  Eventually we&amp;#8217;ll realize that a Pokémon&amp;#8217;s starting moves don&amp;#8217;t seem to appear within this structure, and so we&amp;#8217;ll go searching for those for a Pokémon that starts with moves we know the ids for.  That will lead us to the basic Pokémon data along with base stats, because starting moves happen to be stored there in these early&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;The text isn&amp;#8217;t encrypted, but also isn&amp;#8217;t &lt;span class="caps"&gt;ASCII&lt;/span&gt;, but it&amp;#8217;s possible to find it in much the same way by treating it as a cryptogram (or a substitution cipher).  I assume that there&amp;#8217;s &lt;em&gt;some&lt;/em&gt; consistent scheme, such that the letter &amp;#8220;A&amp;#8221; is always represented with the same byte.  So I pick some text that I know has a few repeated letters, like &lt;code&gt;BULBASAUR&lt;/code&gt;, and I recognize that it could be substituted in some way to read as &lt;code&gt;123145426&lt;/code&gt;.  I can turn that into a&amp;nbsp;regex!&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;rb&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(.)(.)(.)\1(.)(.)\4\2(.)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOTALL&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{match.start():08x} {match.group().hex()}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unfortunately, this produces a zillion matches, most of them solid strings of &lt;code&gt;NUL&lt;/code&gt; bytes.  The problem is that nothing in the regex requires that the different groups are, well, &lt;em&gt;different&lt;/em&gt;.  You could write extra code to filter those cases out, or if you&amp;#8217;re masochistic enough, you could express it directly within the regex using &lt;code&gt;(?!...)&lt;/code&gt; negative lookahead&amp;nbsp;assertions:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;rb&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(.)(?!\1)(.)(?!\1)(?!\2)(.)\1(?!\1)(?!\2)(?!\3)(.)(?!\1)(?!\2)(?!\3)(?!\4)(.)\4\2(?!\1)(?!\2)(?!\3)(?!\4)(?!\5)(.)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOTALL&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{match.start():08x} {match.group().hex()}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="mi"&gt;820&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;4305&lt;/span&gt;&lt;span class="n"&gt;ff43441b440522&lt;/span&gt;
&lt;span class="mo"&gt;0001&lt;/span&gt;&lt;span class="n"&gt;c80e&lt;/span&gt; &lt;span class="mi"&gt;81948&lt;/span&gt;&lt;span class="n"&gt;b818092809491&lt;/span&gt;
&lt;span class="mo"&gt;00054&lt;/span&gt;&lt;span class="n"&gt;a94&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;a4d350a556d554d43&lt;/span&gt;
&lt;span class="mo"&gt;0007&lt;/span&gt;&lt;span class="n"&gt;a55a&lt;/span&gt; &lt;span class="mi"&gt;33466&lt;/span&gt;&lt;span class="n"&gt;f33fff0ff4670&lt;/span&gt;
&lt;span class="mo"&gt;0007&lt;/span&gt;&lt;span class="n"&gt;c20c&lt;/span&gt; &lt;span class="mf"&gt;4305e843440444050&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="mf"&gt;0008e7&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;fa8b37fa0a6a0a8ad&lt;/span&gt;
&lt;span class="mf"&gt;00094e75&lt;/span&gt; &lt;span class="mi"&gt;81948&lt;/span&gt;&lt;span class="n"&gt;b818092809491&lt;/span&gt;
&lt;span class="mo"&gt;000&lt;/span&gt;&lt;span class="n"&gt;a0bcd&lt;/span&gt; &lt;span class="n"&gt;a77fb3a7a4b1a47fb6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That&amp;#8217;s much more reasonable.  (The set of matches, I mean, not the regex.)  It wouldn&amp;#8217;t be hard to write a script with a bunch of known strings in it, generate appropriate regexes for each, eliminate inconsistent matches, and eventually generate a full alphabet.  (Or you could assume that &amp;#8220;B&amp;#8221; immediately follows &amp;#8220;A&amp;#8221; and in general the letters are clustered together, which would lead you to correctly suspect that the strings at &lt;code&gt;0x0001c80e&lt;/code&gt; and &lt;code&gt;0x00094e75&lt;/code&gt; are the ones you&amp;nbsp;want.)&lt;/p&gt;
&lt;p&gt;Even better, once you have an alphabet, you can use it to translate &lt;em&gt;entire &lt;span class="caps"&gt;ROM&lt;/span&gt;&lt;/em&gt; — plenty of it will be garbage, but you&amp;#8217;ll find quite a lot of blocks of human-readable text!  And now you have all the names of everything and also the entire game&amp;nbsp;script.&lt;/p&gt;
&lt;h3 id="modern-day-and-a-brief-tour-of-gbz80-assembly"&gt;&lt;a class="toclink" href="#modern-day-and-a-brief-tour-of-gbz80-assembly"&gt;Modern day and a brief tour of gbz80&amp;nbsp;assembly&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But like I said, I wasn&amp;#8217;t involved in any of that.  Until recently!  I&amp;#8217;ve been working on an experiment for veekun where I re-dump all the games to a new &lt;span class="caps"&gt;YAML&lt;/span&gt;-based format.  &lt;a href="https://eev.ee/blog/2016/08/05/storing-pokémon-without-sql/"&gt;Long story&lt;/a&gt; short: the current database is a pain to work with, and some old data has been lost entirely.  Also, most of the data was extracted bits at a time with short hacky scripts that we then threw away, and I&amp;#8217;d like to have more permanent code that can dump &lt;em&gt;everything&lt;/em&gt; at once.  It&amp;#8217;ll be nice to have an audit trail, too — multiple times in the past, we&amp;#8217;ve discovered that some old thing was dumped imperfectly or copied from an unreliable&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;So I started re-dumping Red and Blue, from scratch.  I&amp;#8217;ve made &lt;a href="https://github.com/veekun/pokedex/blob/yaml/pokedex/extract/rby.py"&gt;modest progress&lt;/a&gt;, though it&amp;#8217;s taken a backseat to Sun and Moon&amp;nbsp;lately.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s helped &lt;em&gt;immensely&lt;/em&gt; that there&amp;#8217;s an open source disassembly of Red and Blue floating around.  What on earth is a disassembly?  I&amp;#8217;m so glad you&amp;nbsp;asked!&lt;/p&gt;
&lt;p&gt;Game Boy games were written in &lt;em&gt;assembly code&lt;/em&gt;, which is just about as simple and painful as you can get.  It&amp;#8217;s human-readable, kinda, but it&amp;#8217;s built from the basic set of &lt;em&gt;instructions&lt;/em&gt; that a particular &lt;span class="caps"&gt;CPU&lt;/span&gt; family understands.  It can&amp;#8217;t directly express concepts like &amp;#8220;if this, do that, otherwise do something else&amp;#8221; or &amp;#8220;repeat this code five times&amp;#8221;.  Instead, it&amp;#8217;s a single long sequence of basic operations like &amp;#8220;compare two numbers&amp;#8221; and &amp;#8220;jump ahead four instructions&amp;#8221;.  (Very few programmers work with assembly nowadays, but for various reasons, no other programming languages would work on the Game Boy at the&amp;nbsp;time.)&lt;/p&gt;
&lt;p&gt;To give you a more concrete idea of what this is like to work with: the Game Boy&amp;#8217;s &lt;span class="caps"&gt;CPU&lt;/span&gt; doesn&amp;#8217;t have an instruction for multiplying, so you have to do it yourself by adding repeatedly.  I thought that would make a good example, but it turns out that Pokémon&amp;#8217;s multiply code is &lt;em&gt;sixty lines long&lt;/em&gt;.  Division is even longer!  Here&amp;#8217;s something a bit simpler, which fills a span of&amp;nbsp;memory:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FillMemory::
; Fill bc bytes at hl with a.
    push de
    ld d, a
.loop
    ld a, d
    ld [hli], a
    dec bc
    ld a, b
    or c
    jr nz, .loop
    pop de
    ret
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;CPUs tend to have a small number of &lt;em&gt;registers&lt;/em&gt;, which can hold values while the &lt;span class="caps"&gt;CPU&lt;/span&gt; works on them — even as fast as &lt;span class="caps"&gt;RAM&lt;/span&gt; is, it&amp;#8217;s considered much slower than registers.  The downside is, well, you only have a few registers.  The Game Boy &lt;span class="caps"&gt;CPU&lt;/span&gt; (a modified &lt;a href="https://en.wikipedia.org/wiki/Zilog_Z80"&gt;Z80&lt;/a&gt;) has eight registers that can each hold one byte: &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;f&lt;/code&gt;, plus &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt;..  They can be used together in pairs to store 16-bit values, giving the four combinations &lt;code&gt;af&lt;/code&gt;, &lt;code&gt;bc&lt;/code&gt;, &lt;code&gt;de&lt;/code&gt;, and &lt;code&gt;hl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(If you need more than 16 bits, well, that&amp;#8217;s your problem!  16 bits is the most the &lt;span class="caps"&gt;CPU&lt;/span&gt; understands; it can&amp;#8217;t even access memory addresses beyond that range, so you&amp;#8217;re limited to 64K.  &amp;#8220;But wait&amp;#8221;, you ask, &amp;#8220;how can a Game Boy cartridge be 512K or 1M?&amp;#8221;  Very painfully, that&amp;#8217;s&amp;nbsp;how.)&lt;/p&gt;
&lt;p&gt;Now we can understand the comment in the above code.  Starting at the memory address given by the 16-bit number in &lt;code&gt;hl&lt;/code&gt;, it will copy the value in &lt;code&gt;a&lt;/code&gt; into each byte, for a total of &lt;code&gt;bc&lt;/code&gt; bytes.  Translated into English, the above means something like&amp;nbsp;this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Save copies of &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt;, so I can mess with them without losing any important data that was in them.  (This code doesn&amp;#8217;t use &lt;code&gt;e&lt;/code&gt;, but there&amp;#8217;s no &lt;code&gt;push d&lt;/code&gt; instruction.)&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;a&lt;/code&gt;, the fill value, into &lt;code&gt;d&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;d&lt;/code&gt;, the fill value, into &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;a&lt;/code&gt;, the fill value, into the memory at address &lt;code&gt;hl&lt;/code&gt;.  Then increase &lt;code&gt;hl&lt;/code&gt; (the actual registers, not the memory) by&amp;nbsp;1.&lt;/li&gt;
&lt;li&gt;Decrease &lt;code&gt;bc&lt;/code&gt;, the number of bytes to fill, by&amp;nbsp;1.&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;b&lt;/code&gt;, part of the number of bytes to fill, into &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;OR&lt;/span&gt; &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;c&lt;/code&gt;, the other part of the number of bytes to fill, and leave the result in &lt;code&gt;a&lt;/code&gt;.  The result will be zero only if &lt;code&gt;bc&lt;/code&gt; itself is zero, in which case the &amp;#8220;zero&amp;#8221; &lt;em&gt;flag&lt;/em&gt; will be&amp;nbsp;set.&lt;/li&gt;
&lt;li&gt;If the &lt;strong&gt;z&lt;/strong&gt;ero flag is &lt;strong&gt;n&lt;/strong&gt;ot set (i.e., if &lt;code&gt;bc&lt;/code&gt; isn&amp;#8217;t zero, meaning we&amp;#8217;re not done yet), &lt;em&gt;jump&lt;/em&gt; back to the instruction marked by &lt;code&gt;.loop&lt;/code&gt;, which is step&amp;nbsp;3.&lt;/li&gt;
&lt;li&gt;Restore &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt; to their previous&amp;nbsp;values.&lt;/li&gt;
&lt;li&gt;Return to whatever code jumped here in the first&amp;nbsp;place.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even this relatively simple example has to resort to a weird trick — ORing &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; together — just to check if &lt;code&gt;bc&lt;/code&gt;, a value the &lt;span class="caps"&gt;CPU&lt;/span&gt; understands, is zero or&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;CPUs don&amp;#8217;t execute assembly code directly.  It has to be &lt;em&gt;assembled&lt;/em&gt; into &lt;em&gt;machine code&lt;/em&gt;, which is (surprise!) a sequence of bytes corresponding to &lt;span class="caps"&gt;CPU&lt;/span&gt; instructions.  When the above code is compiled, it produces these bytes, which you can verify for yourself appear in Pokémon Red and Blue in exactly one&amp;nbsp;place:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d5 57 7a 22 0b 78 b1 20 f9 d1 c9
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I stress that this is way beyond anything virtually any programmer actually needs to know.  Even the few programmers working with assembly, as far as I know, don&amp;#8217;t usually care about the actual bytes that are spat out.  I&amp;#8217;ve actually had &lt;em&gt;trouble&lt;/em&gt; tracking down lists of opcodes before — almost no one is trying to &lt;em&gt;read&lt;/em&gt; machine code.  We are out in the weeds a bit&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;To finally answer your hypothetical question: &lt;em&gt;disassembly&lt;/em&gt; is the process of converting this machine code back into assembly.  Most of it can be done automatically, but it takes extra human effort to make the result sensible.  Let&amp;#8217;s consult the Game Boy &lt;span class="caps"&gt;CPU&lt;/span&gt;&amp;#8217;s (rather terse) &lt;a href="http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html"&gt;opcode reference&lt;/a&gt; and see if we can make sense of this, pretending we don&amp;#8217;t know what the original code&amp;nbsp;was.&lt;/p&gt;
&lt;p&gt;Find &lt;code&gt;d5&lt;/code&gt; in the table — it&amp;#8217;s in row &lt;code&gt;Dx&lt;/code&gt;, column &lt;code&gt;x5&lt;/code&gt;.  That&amp;#8217;s &lt;code&gt;push de&lt;/code&gt;.  The first number in the box is &lt;code&gt;1&lt;/code&gt;, meaning the instruction is only one byte long, so the next instruction is the very next byte.  That&amp;#8217;s &lt;code&gt;57&lt;/code&gt;, which is &lt;code&gt;ld d, a&lt;/code&gt;.  Keep on going.  Eventually we hit &lt;code&gt;20&lt;/code&gt;, which is &lt;code&gt;jr nz, r8&lt;/code&gt; and &lt;em&gt;two&lt;/em&gt; bytes long — the notes at the bottom explain that &lt;code&gt;r8&lt;/code&gt; is 8-bit signed data.  That means the next byte is part of this instruction; it&amp;#8217;s &lt;code&gt;f9&lt;/code&gt;, but it&amp;#8217;s signed, so really that&amp;#8217;s -7.  We end up&amp;nbsp;with:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;push de
ld d, a
ld a, d
ld (hl+), a
dec bc
ld a, b
or c
jr nz, $-07
pop de
ret
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This looks an awful lot like what we started with, but there are a couple notable exceptions.  First, the &lt;code&gt;FillMemory::&lt;/code&gt; line is completely missing.  That&amp;#8217;s just another kind of label, and the only way to know that the first line should be labelled at &lt;em&gt;all&lt;/em&gt; is to find some other place in the code that tries to jump here.  Given just these bytes, we can&amp;#8217;t even tell if this is a complete snippet.  Once we find that out, there&amp;#8217;s still no way to recover the name &lt;code&gt;FillMemory&lt;/code&gt;; even &lt;em&gt;that&lt;/em&gt; is just a fan name and not the name from the original code.  Someone came up with that name by reading this assembly code, understanding what it&amp;#8217;s intended to do, and giving it a&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;Second, the &lt;code&gt;.loop&lt;/code&gt; label is missing.  The &lt;code&gt;jr&lt;/code&gt; line forgot about the label and ended up with a number, which is how many bytes to jump backwards or forwards.  (You can imagine how a label is much easier to work with than a number of bytes, especially when some instructions are one byte long and some are two!)  An automated disassembler would be smart enough to notice this and would put a label in the right place.  A &lt;em&gt;really good&lt;/em&gt; disassembler might even recognize that this code is a simple loop that executes some number of times, and name that label &lt;code&gt;.loop&lt;/code&gt;; otherwise, or for more complicated kinds of jumps, it would have a meaningless name that a human would have to&amp;nbsp;improve.&lt;/p&gt;
&lt;p&gt;And there&amp;#8217;s a whole project where people have done the work of restoring names like this and splitting code up sensibly!  The whole thing even assembles into a byte-for-byte identical copy of the original games.  It&amp;#8217;s really quite impressive, and it&amp;#8217;s made tinkering with the original games vastly more accessible.  You still have to write assembly, of course, but it&amp;#8217;s better than editing machine code.  Imagine trying to add a new instruction in the middle of the loop above; you&amp;#8217;d screw up the &lt;code&gt;jr&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s byte count, &lt;em&gt;and&lt;/em&gt; every single later address in the &lt;span class="caps"&gt;ROM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;But more relevant to this post, a disassembly makes it easy to figure out where data is, since I don&amp;#8217;t have to go hunting for it!  When the code is assembled, it can generate a &lt;code&gt;.sym&lt;/code&gt; file, which lists every single &amp;#8220;global&amp;#8221; label and the position it ended up in the final &lt;span class="caps"&gt;ROM&lt;/span&gt;.  Many of those labels are for functions, like &lt;code&gt;FillMemory&lt;/code&gt; is, but some of them are for blocks of&amp;nbsp;data.&lt;/p&gt;
&lt;h3 id="snagging-data"&gt;&lt;a class="toclink" href="#snagging-data"&gt;Snagging&amp;nbsp;data&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I set out to write some code to dump data from Game Boy games.  Red/Green, Red/Blue, and Yellow were all fairly similar, so I wanted to use as much of the same code as possible for all of those games (and their various&amp;nbsp;translations).&lt;/p&gt;
&lt;p&gt;A very early pain point was, well, the existence of all those translations.  Because there&amp;#8217;s no filesystem, the only obvious way to locate data is to either search for it (which requires knowing it ahead of time, a catch-22 for a script that&amp;#8217;s meant to &lt;em&gt;extract&lt;/em&gt; it) or to bake in the addresses.  The games contain quite a lot of data I want, and they exist in quite a few distinct versions, so that would make for &lt;em&gt;a lot&lt;/em&gt; of&amp;nbsp;addresses.&lt;/p&gt;
&lt;p&gt;Also, with a disassembly readily available, it was now (relatively) easy for people to modify the games as they saw fit, in much the same way as it&amp;#8217;s easy to modify most aspects of modern games by changing the data files.  But if I simply had a list of addresses for each known release, then my code wouldn&amp;#8217;t know what to do with modified games.  It&amp;#8217;s not a &lt;em&gt;huge&lt;/em&gt; deal — obviously I don&amp;#8217;t intend to put fan modifications into veekun — but it seemed silly to write all this extraction code and then only have it work on a small handful of specific&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;I decided to at least &lt;em&gt;try&lt;/em&gt; to find data automatically.  How can I do that, when the positions of the data only existed buried within machine code&amp;nbsp;somewhere?&lt;/p&gt;
&lt;p&gt;Obviously, I just need to find that machine code.  See, that whole previous section was actually&amp;nbsp;relevant!&lt;/p&gt;
&lt;p&gt;I set out to do that.  Remember the goofy regex from earlier, which searched for particular patterns of bytes?  I did something like that, except with machine code.  And by machine code, I mean assembly.  And by assembly, I mean—  okay just look at&amp;nbsp;this.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ld a, [#wd11e]
    dec a
    ld hl, #TechnicalMachines
    ld b, $0
    ld c, a
    add hl, bc
    ld a, [hl]
    ld [#wd11e], a
    ret
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I wrote my own little assembler that can convert Game Boy assembly into Game Boy machine code.  The difference is that when it sees something like &lt;code&gt;#foo&lt;/code&gt;, it assumes that&amp;#8217;s a value I &lt;em&gt;don&amp;#8217;t know yet&lt;/em&gt; and sticks in a regex capturing group instead.  It&amp;#8217;s smart enough to know whether the value has to be one or two bytes, based on the instruction.  It also knows that if the same placeholder appears twice, it must have the same value both times.  I can also pass in a placeholder value, if I only know it at&amp;nbsp;runtime.&lt;/p&gt;
&lt;p&gt;I have half a dozen or so chunks like this.  Every time I wanted to find something new, I went looking for code that referenced it and copied the smallest unique chunk I could (to reduce the risk that the code itself is different between games, or in a fan hack).  I did run into a few goofy difficulties, such as code that changed completely in Yellow, but I ended up with something that seems to be pretty robust and knows as little as possible about the&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;I even auto-detect the language&amp;#8230;  by examining the name of the &lt;span class="caps"&gt;TOWN&lt;/span&gt; &lt;span class="caps"&gt;MAP&lt;/span&gt;, the first item that has a unique name in every official&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;This is probably ridiculous overkill, but it was a blast to get working.  It also leaves the door open for some&amp;#8230;  shenanigans I&amp;#8217;ve wanted to do for a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;But enough about the Game Boy.  Let&amp;#8217;s get back to the&amp;nbsp;future.&lt;/p&gt;
&lt;h2 id="the-3ds-and-what-im-doing-now"&gt;&lt;a class="toclink" href="#the-3ds-and-what-im-doing-now"&gt;The 3DS, and what I'm doing&amp;nbsp;now&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recent games have been slightly more complicated, though the complexity is largely in someone else&amp;#8217;s court.  The &lt;span class="caps"&gt;3DS&lt;/span&gt; uses encryption — real, serious encryption, not baby stuff you can work around by comparing rows of&amp;nbsp;bytes.&lt;/p&gt;
&lt;p&gt;When X and Y came out, the encryption still hadn&amp;#8217;t been broken, so all of veekun&amp;#8217;s initial data was acquired by&amp;#8230;  making a Google Docs spreadsheet and asking for volunteers to fill it in.  It wasn&amp;#8217;t &lt;em&gt;great&lt;/em&gt;, but it was better than&amp;nbsp;nothing.&lt;/p&gt;
&lt;p&gt;This was late 2013, and I suppose it&amp;#8217;s around when veekun&amp;#8217;s gentle decline into stagnation began.  When X and Y were finally ripped, I was&amp;#8230;  what was I doing?  I guess I was busy at work?  For whatever reason, I had barely any involvement in it.  Then Omega Ruby and Alpha Sapphire came out, and now &lt;em&gt;everyone&lt;/em&gt; was busy, and it took forever just to get stuff like movesets&amp;nbsp;dumped.&lt;/p&gt;
&lt;p&gt;Now I&amp;#8217;m working on Sun and Moon again.  It&amp;#8217;s not especially hard — much of the basic structure has been preserved since Diamond and Pearl, and a lot of the Omega Ruby and Alpha Sapphire code I wrote works exactly the same with Sun and Moon — but there are a lot of edge&amp;nbsp;cases.&lt;/p&gt;
&lt;h3 id="some-changes-in-xy-and-beyond"&gt;&lt;a class="toclink" href="#some-changes-in-xy-and-beyond"&gt;Some changes in X/Y and&amp;nbsp;beyond&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The most obvious wrinkle is that the filenames are gone.  This has actually been the case since Heart Gold and Soul Silver — all the files now simply have names like &lt;code&gt;/a/0/0/0&lt;/code&gt; and count upwards from there.  I don&amp;#8217;t know the reason for the change, but I assume the original filenames weren&amp;#8217;t intended to be left in the game in the first place.  The files move around in every new pair of games, too, requiring bunches of people to go through the files by hand and note down what each of them appears to&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;Newer games use &lt;span class="caps"&gt;GARC&lt;/span&gt; instead of &lt;span class="caps"&gt;NARC&lt;/span&gt;.  I don&amp;#8217;t know what the G stands for now.  (Gooder?  Gen 6?)  It&amp;#8217;s basically the same idea, except that now a single &lt;span class="caps"&gt;GARC&lt;/span&gt; archive has &lt;em&gt;two&lt;/em&gt; levels of nesting — that is, a &lt;span class="caps"&gt;GARC&lt;/span&gt; contains some number of sub-&lt;em&gt;archives&lt;/em&gt;, and each of those in turn contains some number of subfiles.  Usually there&amp;#8217;s only one subfile per subarchive, but I&amp;#8217;ve seen zanier schemes once or&amp;nbsp;twice.&lt;/p&gt;
&lt;p&gt;Also, just in case that&amp;#8217;s not enough levels of containers for you, there are &lt;em&gt;also&lt;/em&gt; a number of other single-level containers embedded inside GARCs.  They&amp;#8217;re all very basic and nearly identical: just a list of start and end&amp;nbsp;offsets.&lt;/p&gt;
&lt;p&gt;Oh, and some of the data is compressed now.  (Maybe that was the case before X/Y?  I don&amp;#8217;t remember.)  Compression is fun.  Any given data might be compressed with one of two flavors of &lt;a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Storer%E2%80%93Szymanski"&gt;&lt;span class="caps"&gt;LZSS&lt;/span&gt;&lt;/a&gt;, and it seems completely arbitrary what&amp;#8217;s compressed and what&amp;#8217;s not.  There&amp;#8217;s no indication of what&amp;#8217;s compressed or what&amp;#8217;s not, either; the only &amp;#8220;header&amp;#8221; that compressed data has is that the first byte is either &lt;code&gt;0x10&lt;/code&gt; or &lt;code&gt;0x11&lt;/code&gt;, which isn&amp;#8217;t particularly helpful since plenty of valid data also begins with one of those&amp;nbsp;bytes.&lt;/p&gt;
&lt;p&gt;But there was one much bigger &lt;em&gt;practical&lt;/em&gt; problem with X and Y, one I&amp;#8217;d been dreading for a while.  X and Y, you see, use &lt;em&gt;models&lt;/em&gt; — which means they don&amp;#8217;t have any sprites for us to rip at all.  And that &lt;em&gt;kind of sucks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The community&amp;#8217;s solution has been for a few people (who have screen-capture hardware) to take screenshots and cut them out.  It works, but it&amp;#8217;s not &lt;em&gt;great&lt;/em&gt;.  The thing I&amp;#8217;ve wanted for a very long time is rips of the actual&amp;nbsp;models.&lt;/p&gt;
&lt;p&gt;(Later games went back to including &amp;#8220;sprites&amp;#8221; that are just static screenshots of the models.  Maybe out of kindness to us?  Okay, yeah, doubtful.  Oh, and those sprites are in the incredibly obtuse &lt;span class="caps"&gt;ETC1&lt;/span&gt; format, which I had never heard of and needed help to identify, and which I will let you just &lt;a href="https://www.khronos.org/registry/OpenGL/extensions/OES/OES_compressed_ETC1_RGB8_texture.txt"&gt;read about yourself&lt;/a&gt;.)&lt;/p&gt;
&lt;h3 id="extracting-models"&gt;&lt;a class="toclink" href="#extracting-models"&gt;Extracting&amp;nbsp;models&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Pokémon models are an absolute &lt;em&gt;massive&lt;/em&gt; chunk of the game data.  All the data combined is &lt;span class="caps"&gt;3GB&lt;/span&gt;; the Pokémon models are a hair under &lt;em&gt;half&lt;/em&gt; of that, despite being&amp;nbsp;compressed.&lt;/p&gt;
&lt;p&gt;At least this makes them easy to find, since they&amp;#8217;re all packed into a single &lt;span class="caps"&gt;GARC&lt;/span&gt;&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;That file contains, I don&amp;#8217;t know, a zillion other files.  And many of &lt;em&gt;those&lt;/em&gt; files are generic containers, containing more files.  And none of these files are named.  Of course.  It&amp;#8217;s easy enough to notice that there are nine files per Pokémon, since the sizes follow a rough pattern like the sprites did in Diamond and Pearl.  (You&amp;#8217;d think that they&amp;#8217;d use &lt;span class="caps"&gt;GARC&lt;/span&gt;&amp;#8217;s two levels of nesting to group the per-Pokémon files together, but apparently&amp;nbsp;not.)&lt;/p&gt;
&lt;p&gt;At this point, I had zero experience with 3D — in fact, working on this was my &lt;em&gt;introduction&lt;/em&gt; to 3D and Blender — so I didn&amp;#8217;t get very far on my own.  I basically had to wait a few years for other people to figure it out, look at their source code, replicate it myself, and then figure out some of the bits they missed.  The one thing I &lt;em&gt;did&lt;/em&gt; get myself was texture animations, which are generally used to make Pokémon change expressions — last I saw, no one had gotten those ripped, but I managed it.  Hooray.  I&amp;#8217;m sure someone else has done the same by&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Anyway, I bring up models because of two very weird things that I never would&amp;#8217;ve guessed in a million&amp;nbsp;years.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;One was the mesh data itself.  A &lt;a href="https://en.wikipedia.org/wiki/Polygon_mesh"&gt;&lt;em&gt;mesh&lt;/em&gt;&lt;/a&gt; is just the description of a 3D model&amp;#8217;s shape — its vertices (points), the edges between vertices, and the faces that fill in the space between the&amp;nbsp;edges.&lt;/p&gt;
&lt;p&gt;And, well, those are the three parts to a basic mesh.  A few very simple model formats are even just those things written out: a list of vertices (defined by three numbers each, x y z), a list of edges (defined by the two vertices they connect), and a list of faces (defined by their&amp;nbsp;edges).&lt;/p&gt;
&lt;p&gt;It should be easy to find models by looking for long lists of triplets of numbers — vertex coordinates.  Well, not quite.  Pokémon models are stored as &lt;em&gt;compiled shaders&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;shader&lt;/em&gt; is a simple kind of program that runs directly on a video card, since video cards tend to be a more appropriate place for doing a bunch of graphics-related math.  On a desktop or phone or whatever, you&amp;#8217;d usually write a shader as text, then compile it when your program/game runs.  In fact, you &lt;em&gt;have&lt;/em&gt; to do this, since the compilation is different for each kind of video&amp;nbsp;card.&lt;/p&gt;
&lt;p&gt;But Pokémon games only have to worry about &lt;em&gt;one&lt;/em&gt; video card: the graphics chip in the &lt;span class="caps"&gt;3DS&lt;/span&gt;.  And there&amp;#8217;s absolutely no reason to waste time compiling shaders while the game is running, when they could just do it ahead of time and put the &lt;em&gt;compiled&lt;/em&gt; shader in the game directly.  (Incidentally, the Dolphin emulator recently wrote about how &lt;a href="https://dolphin-emu.org/blog/2017/07/30/ubershaders/"&gt;GameCube games do much the same thing&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;So they did that.  Thankfully, the compiled shader is much simpler than machine code, and the parts I care about are just the parts that load in the mesh data — which mostly looks like opcodes for &amp;#8220;here&amp;#8217;s some data&amp;#8221;, followed by some data.  It would probably be possible to figure out without knowing anything about the particular graphics chip, but if you didn&amp;#8217;t know it was supposed to be a shader, you&amp;#8217;d be mighty confused by all the mesh data surrounded by weird extra junk that doesn&amp;#8217;t look at all like mesh&amp;nbsp;data.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The other was &lt;em&gt;skeletal animation&lt;/em&gt;.  The basic idea is that you want to make a high-resolution model move around, but it would be a huge pain in the ass to describe the movement of every single vertex.  Instead, you make an invisible &amp;#8220;skeleton&amp;#8221; — a branching tree of &lt;em&gt;bones&lt;/em&gt;.  The bones tend to follow major parts of the body, so they do look like very simple skeletons, with spines and arms and whatnot (though of course skeletons aren&amp;#8217;t limited only to living creatures).  Every vertex attaches to one or more of those bones — a rough first pass of this can be done automatically — and then by animating the much simpler skeleton, vertices will all move to match the bones they&amp;#8217;re attached&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;The skeleton itself isn&amp;#8217;t too surprising.  It&amp;#8217;s a tree, whatever; we&amp;#8217;ve seen one of those already, with the &lt;span class="caps"&gt;DS&lt;/span&gt; directory structure.  The skeletons and models are in a neutral pose by default: T for bipeds, simply standing on all fours for quadrupeds, etc.  All of this is pretty&amp;nbsp;straightforward.&lt;/p&gt;
&lt;p&gt;But then there are the animations&amp;nbsp;themselves.&lt;/p&gt;
&lt;p&gt;An animation has some number of &lt;em&gt;keyframes&lt;/em&gt; which specify a position, rotation, and size for each bone.  Animating the skeleton involves smoothly moving each bone from one keyframe&amp;#8217;s position to the&amp;nbsp;next.&lt;/p&gt;
&lt;p&gt;Position, rotation, and size each exist in three dimensions, so there are nine possible values for each keyframe.  You might expect a set of nine values, then, times the number of keyframes, times the number of&amp;nbsp;bones.&lt;/p&gt;
&lt;p&gt;But no!  These animations are stored the other way: each of those nine values is animated &lt;em&gt;separately&lt;/em&gt; per bone.  Also, each of those nine values can have a different number of keyframes, even for the same bone.  Also, each of those nine values is optional, and if it&amp;#8217;s not animated then its keyframes are simply missing, and there&amp;#8217;s a set of bitflags indicating which values are&amp;nbsp;present.&lt;/p&gt;
&lt;p&gt;Okay, well, you might at least expect that a single value&amp;#8217;s keyframes are given by a list of numbers,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Not quite!  Such a set of keyframes has an initial &amp;#8220;scale&amp;#8221; and &amp;#8220;offset&amp;#8221;, given as single-precision floating point numbers (which are fairly accurate).  Each keyframe then gives a &amp;#8220;value&amp;#8221; as an integer, which is actually the numerator of a fraction whose denominator is 65,535.  So the &lt;em&gt;actual&lt;/em&gt; value of each keyframe&amp;nbsp;is:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;offset + scale * value / 65535
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Maybe this is a more common scheme than I suspect.  Animation &lt;em&gt;does&lt;/em&gt; take up an awful lot of space, and this isn&amp;#8217;t an entirely unreasonable way to squish it down.  The fraction thing is just &lt;em&gt;incredibly&lt;/em&gt; goofy at first blush.  I have no idea how anyone figured out what was going on there.  (It&amp;#8217;s used for texture animation,&amp;nbsp;too.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Anyway, thanks mostly to other people&amp;#8217;s hard work, I managed to write a script that can dump models and then play them with a pretty decent in-browser &lt;a href="http://stuff.veekun.com/veekun-model-viewer/"&gt;model viewer&lt;/a&gt;.  I never got around to finishing it, which is a shame, because it took &lt;em&gt;so&lt;/em&gt; much effort and it&amp;#8217;s &lt;em&gt;so&lt;/em&gt; close to being really good.  (My local copy has texture animation mostly working; the online version doesn&amp;#8217;t&amp;nbsp;yet.)&lt;/p&gt;
&lt;p&gt;Hopefully I will someday, because I think this is pretty dang cool, and there&amp;#8217;s a lot of interesting stuff that could be done with it.  (For example, one request: applying one Pokémon&amp;#8217;s animations to another Pokémon&amp;#8217;s model.&amp;nbsp;Hm.)&lt;/p&gt;
&lt;p&gt;The one thing that really haunts me about it is the outline effect.  It&amp;#8217;s not actually the effect from the games; I had to approximate it, and there are a few obvious ways it falls flat.  I would &lt;em&gt;love&lt;/em&gt; to exactly emulate what the games do, but I just don&amp;#8217;t know what that is.  But maybe&amp;#8230;  maybe there&amp;#8217;s a chance I can find the compiled shader and figure it out.  Maybe.&amp;nbsp;Somehow.&lt;/p&gt;
&lt;h3 id="some-annoying-edge-cases"&gt;&lt;a class="toclink" href="#some-annoying-edge-cases"&gt;Some annoying edge&amp;nbsp;cases&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s finish up with some small bumps in the road that are still fresh in my&amp;nbsp;mind.&lt;/p&gt;
&lt;p&gt;TMs are still in the Pokémon data, as is compatibility with move tutors.  Alas, the lists of what the TMs and tutor moves &lt;em&gt;are&lt;/em&gt; are embedded in the code, just like in the Game Boy days.  You don&amp;#8217;t really &lt;em&gt;need&lt;/em&gt; to know the &lt;span class="caps"&gt;TM&lt;/span&gt; order, since they have a numbering exposed to the player in-game, and &lt;span class="caps"&gt;TM&lt;/span&gt; compatibility is in that same order&amp;#8230;  but move tutors have no natural ordering, so you have to either match them up by hand or somehow find the list in the&amp;nbsp;binary.&lt;/p&gt;
&lt;p&gt;I had a similar problem with incense items, which each affect the breeding outcome for a specific Pokémon.  In Ruby and Sapphire, the incense effects were hardcoded.  I don&amp;#8217;t mean they were a data structure baked into the code; I mean they were actually &amp;#8220;if the baby is this species and one parent is holding this incense, do this; otherwise,&amp;#8221; etc.  I spent a good few hours hunting for something similar in later games, to no avail — I&amp;#8217;d searched for every permutation of machine code I could think of and come up with nothing.  I was about to give up when someone pointed out to me that incense &lt;em&gt;is&lt;/em&gt; now a data structure; it&amp;#8217;s just in the one format I&amp;#8217;d forgotten to try searching for.&amp;nbsp;Alas.&lt;/p&gt;
&lt;p&gt;Moves have a bunch of metadata, like &amp;#8220;status effect inflicted&amp;#8221; or &amp;#8220;min/max number of turns to last&amp;#8221;.  Trouble is, I&amp;#8217;m &lt;em&gt;pretty&lt;/em&gt; sure that same information is duplicated within the code for each individual move — most moves get their own code, and there&amp;#8217;s no single &amp;#8220;generic move&amp;#8221; function.  Which raises the question&amp;#8230;  what is this metadata actually used for?  Is it useful to expose on veekun?  Is it guaranteed to be correct?  I already know that some of it is a little misleading; for example, &lt;a href="https://veekun.com/dex/moves/tri%20attack"&gt;Tri Attack&lt;/a&gt; is listed as inflicting some mystery one-off status effect, because the format doesn&amp;#8217;t allow expressing what it &lt;em&gt;actually&lt;/em&gt; does (inflict one of burn, freezing, or paralysis at&amp;nbsp;random).&lt;/p&gt;
&lt;p&gt;Items have a similar problem: they get a bunch of their own data, but it&amp;#8217;s not entirely clear what most of it is used for.  It&amp;#8217;s not even straightforward to identify how the game decides which items go in which&amp;nbsp;pocket.&lt;/p&gt;
&lt;p&gt;Moves also have flags, and it took some effort to figure out what each of them meant.  Sun and Moon added a new flag, and I agonized over it for a while before I was fed the answer: it&amp;#8217;s an obscure detail relating to move animations.  No idea how anyone figured &lt;em&gt;that&lt;/em&gt;&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;In Omega Ruby and Alpha Sapphire, there are &lt;em&gt;two&lt;/em&gt; lists of item names.  They&amp;#8217;re exactly identical, with one exception: in Korean, the items &amp;#8220;&lt;span class="caps"&gt;PP&lt;/span&gt; Up&amp;#8221; and &amp;#8220;&lt;span class="caps"&gt;PP&lt;/span&gt; Max&amp;#8221; have their names written with English letters &amp;#8220;&lt;span class="caps"&gt;PP&lt;/span&gt;&amp;#8221; in one list but with Hangul in the other list.  Why?  No&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;Evolution types are numbered.  Method 4 is a regular level up; method 5 is a trade; method 21 is levelling up while knowing a specific move, which is given as a parameter.  Cool.  But there are two oddities.  Karrablast and Shelmet only evolve when traded &lt;em&gt;with each other&lt;/em&gt;, but the data doesn&amp;#8217;t indicate this in any way; they both get the same unique evolution method, but there&amp;#8217;s no parameter to indicate what they need to be traded &lt;em&gt;with&lt;/em&gt;, as you might expect.  Also, Shedinja isn&amp;#8217;t listed as an evolution at all, since it&amp;#8217;s produced as a side effect of Nincada&amp;#8217;s evolution (which is listed as a normal level-up).  To my considerable chagrin, that means neither of these cases can be ripped 100%&amp;nbsp;automatically.&lt;/p&gt;
&lt;p&gt;Pokémon are listed in a different order, depending on context.  Sometimes they&amp;#8217;re identified by species, e.g. Deoxys.  Sometimes they&amp;#8217;re identified by form, e.g. Attack Forme Deoxys.  Sometimes they&amp;#8217;re identified by species and also a separate per-species form number.  Sometimes the numbering includes aesthetic-only forms, like Unown, that only affect visuals.  But sprites and models both seem to have their own completely separate numberings, which are (of course) baked into the&amp;nbsp;binary.&lt;/p&gt;
&lt;p&gt;Incidentally, it turns out that all of the Totem Pokémon in Sun and Moon count as distinct forms!  They&amp;#8217;re just not obtainable.  Do I expose them on veekun, then?  I guess&amp;nbsp;so?&lt;/p&gt;
&lt;p&gt;Encounters are particularly thorny.  The data is simple enough: for each map, there&amp;#8217;s a list of Pokémon that can be encountered by various methods (e.g. walking in grass, fishing, surfing).  But each of those Pokémon appears at a different &lt;em&gt;rate&lt;/em&gt;, and those rates are somewhere in the code, not in the data.  And there are some weird cases like swarms, which have special rules.  And there are unique encounters that aren&amp;#8217;t listed in this data at all, and which veekun has thus never had.  And how do you even figure out where a map is &lt;em&gt;anyway&lt;/em&gt;, when a named place can span multiple maps, and the encounters are only very slightly different in each&amp;nbsp;map?&lt;/p&gt;
&lt;p&gt;Anyway, that&amp;#8217;s why veekun is taking so long.  Also because I&amp;#8217;ve spent several days not working on veekun so I could write this post, which could be much longer but has gone on more than long enough already.  I hope some of this was&amp;nbsp;interesting!&lt;/p&gt;
&lt;p&gt;Oh, and all my recent code is &lt;a href="https://github.com/veekun/pokedex/tree/yaml/pokedex/extract"&gt;on the &lt;code&gt;pokedex&lt;/code&gt; GitHub&lt;/a&gt;.  The model extraction stuff isn&amp;#8217;t up yet, but it will be&amp;#8230;  eventually?  Next time I work on it,&amp;nbsp;maybe?&lt;/p&gt;</content><category term="patreon"></category></entry><entry><title>Some memorable levels</title><link href="https://eev.ee/blog/2017/07/01/some-memorable-levels/" rel="alternate"></link><published>2017-07-01T16:27:00-07:00</published><updated>2017-07-01T16:27:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-07-01:/blog/2017/07/01/some-memorable-levels/</id><summary type="html">&lt;p&gt;Another &lt;a href="https://www.patreon.com/eevee"&gt;Patreon&lt;/a&gt; request from &lt;a href="https://www.patreon.com/user?u=2491881"&gt;Nova Dasterin&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maybe something about level design. In relation to a vertical shmup since I&amp;#8217;m working on one of&amp;nbsp;those.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve been thinking about level design a lot lately, seeing as how I&amp;#8217;ve started&amp;#8230;  designing levels.  Shmups are probably the genre I&amp;#8217;m the &lt;em&gt;worst&lt;/em&gt; at, but perhaps some general principles will apply&amp;nbsp;universally.&lt;/p&gt;
&lt;p&gt;And speaking of general principles, that&amp;#8217;s something I&amp;#8217;ve been thinking about&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been struggling to create a more expansive tileset for a platformer, due to two general problems: figuring out what I want to show, and figuring out how to show it with a limited size and palette.  I&amp;#8217;ve been browsing through a lot of pixel art from games I remember fondly in the hopes of finding some inspiration, but so far all I&amp;#8217;ve done is very nearly copy a dirt tile someone submitted to my potluck&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;Recently I realized that I might have been going about &lt;em&gt;looking for inspiration&lt;/em&gt; all wrong.  I&amp;#8217;ve been sifting through stuff in the hopes of finding something that would create some flash of enlightenment, but so far that aimless tourism has only found me a thing or two to&amp;nbsp;copy.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t want to copy a small chunk of the final product; I want to &lt;em&gt;understand&lt;/em&gt; the underlying ideas that led the artist to create what they did in the first place.  Or, no, that&amp;#8217;s not quite right either.  I don&amp;#8217;t want someone else&amp;#8217;s ideas; I want to identify what &lt;em&gt;I&lt;/em&gt; like, figure out &lt;em&gt;why I like it&lt;/em&gt;, and turn that into some kinda of general design idea.  Find the underlying themes that appeal to me and figure out some principles that I could apply.  You know, examine stuff&amp;nbsp;critically.&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t had time to take a deeper look at pixel art this way, so I&amp;#8217;ll try it right now with level design.  Here, then, are some levels from various games that stand out to me for whatever reason; the feelings they evoke when I think about them; and my best effort at unearthing some design principles from those&amp;nbsp;feelings.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Another &lt;a href="https://www.patreon.com/eevee"&gt;Patreon&lt;/a&gt; request from &lt;a href="https://www.patreon.com/user?u=2491881"&gt;Nova Dasterin&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maybe something about level design. In relation to a vertical shmup since I&amp;#8217;m working on one of&amp;nbsp;those.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve been thinking about level design a lot lately, seeing as how I&amp;#8217;ve started&amp;#8230;  designing levels.  Shmups are probably the genre I&amp;#8217;m the &lt;em&gt;worst&lt;/em&gt; at, but perhaps some general principles will apply&amp;nbsp;universally.&lt;/p&gt;
&lt;p&gt;And speaking of general principles, that&amp;#8217;s something I&amp;#8217;ve been thinking about&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been struggling to create a more expansive tileset for a platformer, due to two general problems: figuring out what I want to show, and figuring out how to show it with a limited size and palette.  I&amp;#8217;ve been browsing through a lot of pixel art from games I remember fondly in the hopes of finding some inspiration, but so far all I&amp;#8217;ve done is very nearly copy a dirt tile someone submitted to my potluck&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;Recently I realized that I might have been going about &lt;em&gt;looking for inspiration&lt;/em&gt; all wrong.  I&amp;#8217;ve been sifting through stuff in the hopes of finding something that would create some flash of enlightenment, but so far that aimless tourism has only found me a thing or two to&amp;nbsp;copy.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t want to copy a small chunk of the final product; I want to &lt;em&gt;understand&lt;/em&gt; the underlying ideas that led the artist to create what they did in the first place.  Or, no, that&amp;#8217;s not quite right either.  I don&amp;#8217;t want someone else&amp;#8217;s ideas; I want to identify what &lt;em&gt;I&lt;/em&gt; like, figure out &lt;em&gt;why I like it&lt;/em&gt;, and turn that into some kinda of general design idea.  Find the underlying themes that appeal to me and figure out some principles that I could apply.  You know, examine stuff&amp;nbsp;critically.&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t had time to take a deeper look at pixel art this way, so I&amp;#8217;ll try it right now with level design.  Here, then, are some levels from various games that stand out to me for whatever reason; the feelings they evoke when I think about them; and my best effort at unearthing some design principles from those&amp;nbsp;feelings.&lt;/p&gt;


&lt;h2 id="doom-ii-map10-refueling-base"&gt;&lt;a class="toclink" href="#doom-ii-map10-refueling-base"&gt;Doom II: MAP10, Refueling&amp;nbsp;Base&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/doom2-refueling-base-1.png" alt="Opening view of Refueling Base, showing a descent down some stairs into a room not yet visible"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;screenshots mine — map via &lt;a href="https://doomwiki.org/wiki/MAP10:_Refueling_Base_%28Doom_II%29"&gt;doom wiki&lt;/a&gt; — see also &lt;a href="http://ian-albert.com/games/doom_2_maps/MAP10.jpg"&gt;textured perspective map&lt;/a&gt; (warning: large!) via &lt;a href="http://ian-albert.com/games/doom_2_maps/"&gt;ian albert&lt;/a&gt; — &lt;a href="https://www.youtube.com/watch?v=yU_yBamWeSo"&gt;pistol start&amp;nbsp;playthrough&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m surprising myself by picking Refueling Base.  I would&amp;#8217;ve expected myself to pick &lt;span class="caps"&gt;MAP08&lt;/span&gt;, Tricks and Traps, for its collection of uniquely bizarre puzzles and mechanisms.  Or &lt;span class="caps"&gt;MAP13&lt;/span&gt;, Downtown, the map that had me convinced (erroneously) that Doom levels supported multi-story structures.  Or at least &lt;span class="caps"&gt;MAP08&lt;/span&gt;, The Pit, which stands out for the unique way it &lt;em&gt;feels&lt;/em&gt; like a plunge into enemy&amp;nbsp;territory.&lt;/p&gt;
&lt;p&gt;(Curiously, those other three maps are all Sandy Petersen&amp;#8217;s sole work.  Refueling Base was started by Tom Hall in the original Doom days, then finished by Sandy for Doom &lt;span class="caps"&gt;II&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;But Refueling Base is the level I have the most visceral reaction to: it &lt;em&gt;terrifies&lt;/em&gt;&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;See, I got into Doom &lt;span class="caps"&gt;II&lt;/span&gt; through my dad, who played it on and off sometimes.  My dad wasn&amp;#8217;t an expert gamer or anything, but as a ten-year-old, I &lt;em&gt;assumed&lt;/em&gt; he was.  I watched him play Refueling Base one night.  He died.  Again, and again, over and over.  I don&amp;#8217;t even have very strong memories of his particular attempts, but watching my &lt;em&gt;parent&lt;/em&gt; be swiftly and repeatedly defeated — at a time when I still somewhat revered parents — left enough of an impression that hearing the level music still makes my skin&amp;nbsp;crawl.&lt;/p&gt;
&lt;p&gt;This may seem strange to bring up as a first example in a post about level design, but I don&amp;#8217;t think it would have impressed on me quite so much if the level weren&amp;#8217;t designed the way it is.  (It&amp;#8217;s just a video game, of course, and since then I&amp;#8217;ve successfully beaten it from a pistol start myself.  But wow, little kid fears sure do&amp;nbsp;linger.)&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/doom2-refueling-base-map.png" alt="Map of Refueling Base, showing multiple large rooms and numerous connections between them"&gt;
&lt;/div&gt;

&lt;p&gt;The one thing that most defines the map has to be its &lt;strong&gt;interconnected layout&lt;/strong&gt;.  Almost every major area (of which there are at least half a dozen) has at least three exits.  Not only are you rarely faced with a dead end, but you&amp;#8217;ll almost always have a &lt;em&gt;choice&lt;/em&gt; of where to go next, and that choice will lead into more&amp;nbsp;choices.&lt;/p&gt;
&lt;p&gt;This hugely informs the early combat.  Many areas near the beginning are simply adjacent with no doors between them, so it&amp;#8217;s easy for monsters to start swarming in from all directions.  It&amp;#8217;s very easy to feel overwhelmed by an endless horde; no matter where you run, they just seem to keep coming.  (In fact, Refueling Base has the most monsters of any map in the game by far: 279.  The runner up is the preceding map at 238.)  Compounding this effect is the relatively scant ammo and health in the early parts of the map; getting very far from a pistol start is an uphill&amp;nbsp;battle.&lt;/p&gt;
&lt;p&gt;The connections between rooms also yield numerous possible routes through the map, as well as several possible ways to approach any given room.  Some of the connections are secrets, which usually connect the &amp;#8220;backs&amp;#8221; of two rooms.  Clearing out one room thus rewards you with a sneaky way into another room that puts you behind all the&amp;nbsp;monsters.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/doom2-refueling-base-3.png" alt="Outdoor area shown from the back; a large number of monsters are lying in wait"&gt;
&lt;/div&gt;

&lt;p&gt;In fact, the map &lt;strong&gt;rewards you for exploring it&lt;/strong&gt; in&amp;nbsp;general.&lt;/p&gt;
&lt;p&gt;Well, okay.  It might be more accurate to say that that map punishes you for not exploring it.  From a pistol start, the map is surprisingly difficult — the early areas offer rather little health and ammo, and your best chance of success is a very specific route that collects weapons as quickly as possible.  Many of the most precious items are squirrelled away in (numerous!) secrets, and you&amp;#8217;ll have an especially tough time if you don&amp;#8217;t find any of them — though they tend to be&amp;nbsp;telegraphed.&lt;/p&gt;
&lt;p&gt;One particularly nasty surprise is in the area shown above, which has three small exits at the back.  Entering or leaving via any of those exits will open one of the capsule-shaped pillars, revealing even &lt;em&gt;more&lt;/em&gt; monsters.  A couple of those are pain elementals, monsters which attack by spawning another monster and shooting it at you — not something you want to be facing with the starting&amp;nbsp;pistol.&lt;/p&gt;
&lt;p&gt;But nothing about the level indicates this, so you have to make the association the hard way, probably after making several mad dashes looking for cover.  My successful attempt avoided this whole area entirely until I&amp;#8217;d found some more impressive firepower.  It&amp;#8217;s fascinating to me, because it&amp;#8217;s a fairly unique effect that doesn&amp;#8217;t make any kind of &lt;em&gt;realistic&lt;/em&gt; sense, yet it&amp;#8217;s still built out of familiar level mechanics: walk through an area and something opens up.  Almost like 2D sidescroller design logic applied to a 3D space.  I really like it, and wish I saw more of it.  So maybe that&amp;#8217;s a more interesting design idea: &lt;strong&gt;don&amp;#8217;t be afraid to do something weird only once&lt;/strong&gt;, as long as it&amp;#8217;s built out of familiar pieces so the player has a chance to make sense of&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;A similarly oddball effect is hidden in a &amp;#8220;barracks&amp;#8221; area, visible on the far right of the map.  A secret door leads to a short U-shaped hallway to a marble skull door, which is themed nothing like the rest of the room.  Opening it seems to lead back into the room you were just in, but walking &lt;em&gt;through&lt;/em&gt; the doorway teleports you to a back entrance to the boss fight at the end of the&amp;nbsp;level.&lt;/p&gt;
&lt;p&gt;It sounds so bizarre, but the telegraphing makes it seem very natural; if anything, the &amp;#8220;oh, I get it!&amp;#8221; moment overrides the weirdness.  It stops being something random and becomes something consciously designed.  I believe that this might have been built by someone, even if there&amp;#8217;s no sensible reason to have built&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In fact, that single weird teleporter is exactly the kind of thing I&amp;#8217;d like to be better at building.  It could&amp;#8217;ve been just a plain teleporter pad, but instead it&amp;#8217;s a strange thing that adds a lot of texture to the level and makes it much more memorable.  I don&amp;#8217;t know how to even begin to have &lt;em&gt;ideas&lt;/em&gt; like that.  Maybe it&amp;#8217;s as simple as looking at mundane parts of a level and wondering: what could I do with this&amp;nbsp;instead?&lt;/p&gt;
&lt;p&gt;I think a big problem &lt;em&gt;I&lt;/em&gt; have is limiting myself to the expected and sensible, to the point that I don&amp;#8217;t even consider more outlandish ideas.  I can&amp;#8217;t shake that habit simply by bolding some text in a blog post, but maybe it would help to keep this in mind: &lt;strong&gt;you can probably get away with anything, as long as you justify it somehow&lt;/strong&gt;.  Even &amp;#8220;justify&amp;#8221; here is too strong a word; it takes only the slightest nod to make an arbitrary behavior feel like part of a world.  Why does picking up a tiny glowing knight helmet give you 1% armor in Doom?  Does anyone care?  Have you even thought about it before?  It&amp;#8217;s green and looks like armor; the bigger armor pickup is also green; yep, checks&amp;nbsp;out.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/doom2-refueling-base-5.png" alt="A dark and dingy concrete room full of monsters; a couple are standing under light fixtures"&gt;
&lt;/div&gt;

&lt;p&gt;On the other hand, the map as a whole ends up feeling very disorienting.  There&amp;#8217;s no shortage of landmarks, but every space is distinct in both texture and shape, so &lt;em&gt;everything&lt;/em&gt; feels like a landmark.  No one part of the map feels particularly central; there are a few candidates, but they neighbor other equally grand areas with just as many exits.  It&amp;#8217;s hard to get truly lost, but it&amp;#8217;s also hard to feel like you have a solid grasp of where everything is.  The space itself doesn&amp;#8217;t make much sense, even though small chunks of it do.  Of course, given that the Hellish parts of Doom were all just very weird overall, this is pretty&amp;nbsp;fitting.&lt;/p&gt;
&lt;p&gt;This sort of design fascinates me, because the way it feels to play is so different from the way it &lt;em&gt;looks&lt;/em&gt; as a mapper with God Vision.  Looking at the overhead map, I can identify all the familiar places easily enough, but I don&amp;#8217;t know how to &lt;em&gt;feel&lt;/em&gt; the way the map feels to play; it just looks like some rooms with doors between them.  Yet I can see screenshots and have a sense of how &amp;#8220;deep&amp;#8221; in the level they are, how difficult they are to reach, whether I want to visit or avoid them.  The lesson here might be that most of the interesting flavor of the map isn&amp;#8217;t actually contained within the overhead view; it&amp;#8217;s in the use of height and texture and&amp;nbsp;interaction.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/doom2-refueling-base-4.png" alt="Dark room with numerous alcoves in the walls, all of them containing a hitscan monster"&gt;
&lt;/div&gt;

&lt;p&gt;I realize as I describe all of this that I&amp;#8217;m really just describing different kinds of &lt;strong&gt;contrast&lt;/strong&gt;.  If I know one thing about creative work (and I do, I only know one thing), it&amp;#8217;s that effectively managing contrast is super duper&amp;nbsp;important.&lt;/p&gt;
&lt;p&gt;And it appears here in spades!  A brightly-lit, outdoor, wide-open round room is only a short jog away from a dark, cramped room full of right angles and alcoves.  A wide straight hallway near the beginning is directly across from a short, curvy, organic hallway.  Most of the monsters in the map are small fry, but a couple stronger critters are sprinkled here and there, and then the exit is guarded by the toughest monster in the game.  Some of the connections between rooms are simple doors; others are bizarre secret corridors or unnatural twisty&amp;nbsp;passages.&lt;/p&gt;
&lt;p&gt;You could even argue that the map has too &lt;em&gt;much&lt;/em&gt; contrast, that it starts to lose cohesion.  But if anything, I think this is one of the more cohesive maps in the first third of the game; many of the earlier maps aren&amp;#8217;t so much places as they are concepts.  This one feels distinctly like it could be &lt;em&gt;something&lt;/em&gt;.  The theming is all over the place, but enough of the parts seem&amp;nbsp;deliberate.&lt;/p&gt;
&lt;p&gt;I hadn&amp;#8217;t even thought about it until I sat down to write this post, but since this is a &amp;#8220;refueling base&amp;#8221;, I suppose those outdoor capsules (which contain green slime, inset into the floor) could be the fuel tanks!  I already referred to that dark techy area as &amp;#8220;barracks&amp;#8221;.  Elsewhere is a rather large barren room, which might be where the vehicles in need of refueling are parked?  Or is this just my imagination, and none of it was intended this&amp;nbsp;way?&lt;/p&gt;
&lt;p&gt;It doesn&amp;#8217;t really matter either way, because even in this abstract world of ambiguity and vague hints, all of those rooms still &lt;em&gt;feel like a place&lt;/em&gt;.  I don&amp;#8217;t have to know what the place &lt;em&gt;is&lt;/em&gt; for it to look internally&amp;nbsp;consistent.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m hesitant to say every game should have the loose design sense of Doom &lt;span class="caps"&gt;II&lt;/span&gt;, but it might be worth keeping in mind that &lt;strong&gt;anything can be a believable world as long as it looks consciously designed&lt;/strong&gt;.  And I&amp;#8217;d say this applies even for natural spaces — we frequently treat real-world nature as though it were &amp;#8220;designed&amp;#8221;, just with a different aesthetic&amp;nbsp;sense.&lt;/p&gt;
&lt;p&gt;Okay, okay.  I&amp;#8217;m sure I could clumsily ramble about Doom forever, but I do that enough as it is.  Other people have &lt;a href="https://www.youtube.com/playlist?list=PLEdRlER1F5rEoZ9repPcJM2jWvrXVDBSY"&gt;plenty to say&lt;/a&gt; if you&amp;#8217;re&amp;nbsp;interested.&lt;/p&gt;
&lt;p&gt;I do want to stick in one final comment about &lt;a href="https://doomwiki.org/wiki/MAP13:_Downtown_%28Doom_II%29"&gt;&lt;span class="caps"&gt;MAP13&lt;/span&gt;, Downtown&lt;/a&gt;, while I&amp;#8217;m talking about theming.  I&amp;#8217;ve seen a few people rag on it for being &amp;#8220;just a box&amp;#8221; with a lot of ideas sprinkled around — the map is basically a grid of skyscrapers, where each building has a different little mini encounter inside.  And I think that&amp;#8217;s &lt;em&gt;really cool&lt;/em&gt;, because those encounters are arranged in a way that very strongly reinforces the theme of the level, of what this place is supposed to &lt;em&gt;be&lt;/em&gt;.  It doesn&amp;#8217;t play quite like anything else in the game, simply because it was designed around a shape for flavor reasons.  &lt;strong&gt;Weird physical constraints can do interesting things to level&amp;nbsp;design.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="braid-world-4-7-fickle-companion"&gt;&lt;a class="toclink" href="#braid-world-4-7-fickle-companion"&gt;Braid: World 4-7, Fickle&amp;nbsp;Companion&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/braid-fickle-companion-1.png" alt="Simple-looking platformer level with a few ladders, a switch, and a locked door"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;screenshots via &lt;a href="https://strategywiki.org/wiki/Braid/World_4:_Time_and_Place"&gt;StrategyWiki&lt;/a&gt; — &lt;a href="https://www.youtube.com/watch?v=bfeDL4aCp-o"&gt;playthrough&lt;/a&gt; — &lt;a href="https://www.youtube.com/watch?v=vvtnek-ezuM"&gt;playthrough of secret&amp;nbsp;area&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I love Braid.  If you&amp;#8217;re not familiar (!), it&amp;#8217;s a platformer where you have the ability to rewind time — whenever you want, for as long as you want, all the way back to when you entered the&amp;nbsp;level.&lt;/p&gt;
&lt;p&gt;The game starts in world 2, where you do fairly standard platforming and use the rewind ability to do some finnicky jumps with minimal frustration.  It gets more interesting in world 3 with the addition of glowing green objects, which aren&amp;#8217;t affected by the reversal of&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;And then there&amp;#8217;s world 4, &amp;#8220;Time and Place&amp;#8221;.  I &lt;em&gt;love&lt;/em&gt; world 4, so much.  It&amp;#8217;s unlike anything I&amp;#8217;ve ever seen in any other game, and it&amp;#8217;s so simple yet so&amp;nbsp;clever.&lt;/p&gt;
&lt;p&gt;The premise is this: for everything except you, time moves forwards as you move right, and backwards as you move&amp;nbsp;left.&lt;/p&gt;
&lt;p&gt;This has some &lt;em&gt;weird implications&lt;/em&gt;, which all come together in the final level of the world, Fickle Companion.  It&amp;#8217;s so named because you have to use one (single-use) key to open three doors, but that key is very easy to&amp;nbsp;lose.&lt;/p&gt;
&lt;p&gt;Say you pick up the key and walk to the right with it.  Time continues forwards for the key, so it stays with you as expected.  Now you climb a ladder.  Time is frozen since you aren&amp;#8217;t moving horizontally, but the key stays with you anyway.  Now you walk to the left.  Oops — the key follows its own path &lt;em&gt;backwards in time&lt;/em&gt;, going down the ladder and back along the path you carried it in the first place.  You can&amp;#8217;t fix this by walking to the right again, because that will simply advance time normally for the key; since you&amp;#8217;re no longer holding it, it will simply fall to the ground and stay&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;You can see how this might be a problem in the screenshot above (where you get the key earlier in the level, to the left).  You can climb the first ladder, but to get to the door, you have to walk &lt;em&gt;left&lt;/em&gt; to get to the second ladder, which will reverse the key back down to the&amp;nbsp;ground.&lt;/p&gt;
&lt;p&gt;The solution is in the cannon in the upper right, which spits out a Goomba-like critter.  It has the timeproof green glow, so the critters it spits out have the same green glow — making them immune to both your time reversal power &lt;em&gt;and&lt;/em&gt; to the effect your movement has on time.  What you have to do is get one of the critters to &lt;em&gt;pick up the key&lt;/em&gt; and carry it leftwards for you.  Once you have the puzzle piece, you have to rewind time and do it again elsewhere.  (Or, more likely, the other way around; this next section acts as a decent hint for how to do the earlier&amp;nbsp;section.)&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/braid-fickle-companion-2.png" alt="A puzzle piece trapped behind two doors, in a level containing only one key"&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s hard to convey how bizarre this is in just text.  If you haven&amp;#8217;t played Braid, it&amp;#8217;s absolutely worth it just for this one world, this one &lt;em&gt;level&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And it gets even better, slash more ridiculous: there&amp;#8217;s a super duper secret hidden very cleverly in this level.  Reaching it involves bouncing &lt;em&gt;twice&lt;/em&gt; off of critters; solving the puzzle hidden there involves bouncing the &lt;em&gt;critters&lt;/em&gt; off of &lt;em&gt;you&lt;/em&gt;.  It&amp;#8217;s ludicrous and perhaps a bit too tricky, but very clever.  Best of all, it&amp;#8217;s something that an enterprising player might just think to do on a whim — hey, this is possible here, I wonder what happens if I try it.  And the game &lt;strong&gt;rewards the player for trying something creative&lt;/strong&gt;!  (Ironically, it&amp;#8217;s most rewarding to have a clever idea when it turns out the designer already had the same&amp;nbsp;idea.)&lt;/p&gt;
&lt;p&gt;What can I take away from this?&amp;nbsp;Hm.&lt;/p&gt;
&lt;p&gt;Well, the underlying idea of linking time with position is pretty novel, but getting to it may not be all that hard: just &lt;strong&gt;combine different concepts and see what happens&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A similar principle is to &lt;strong&gt;apply a general concept to everything and see what happens&lt;/strong&gt;.  This is the first sighting of a timeproof wandering critter; previously timeproofing had only been seen on keys, doors, puzzle pieces, and stationary monsters.  Later it even applies to Tim himself in special&amp;nbsp;circumstances.&lt;/p&gt;
&lt;p&gt;The use of timeproofing on puzzle pieces is especially interesting, because the puzzle pieces — despite being collectibles that animate moving into the &lt;span class="caps"&gt;UI&lt;/span&gt; when you get them — are &lt;em&gt;also&lt;/em&gt; affected by time.  If the pieces in this level weren&amp;#8217;t timeproof, then as soon as you collected one and moved left to leave its alcove, time would move backwards and the puzzle piece would reverse &lt;em&gt;out of the &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/em&gt; and right back into the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;Along similar lines, the music and animated background are also subject to the flow of time.  It&amp;#8217;s obvious enough that the music plays backwards when you rewind time, but in world 4, the music only plays &lt;em&gt;at all&lt;/em&gt; while you&amp;#8217;re moving.  It&amp;#8217;s a fantastic effect that makes the whole world feel as weird and jerky as it really &lt;em&gt;is&lt;/em&gt; under these rules.  It drives the concept home instantly, and it makes your weird influence over time feel all the more significant and far-reaching.  I love when games &lt;strong&gt;weave all the elements of the game into the gameplay&lt;/strong&gt; like this, even (especially?) for the sake of a single oddball&amp;nbsp;level.&lt;/p&gt;
&lt;p&gt;Admittedly, this is all about gameplay or puzzle mechanics, not so much level design.  What I like about the &lt;em&gt;level itself&lt;/em&gt; is how simple and straightforward it is: it contains exactly as much as it needs to, yet still invites trying the wrong thing first, which immediately teaches the player why it won&amp;#8217;t work.  And it&amp;#8217;s something that feels like it &lt;em&gt;ought&lt;/em&gt; to work, except that the rules of the game get in the way just enough.  This makes for my favorite kind of puzzle, the type where you feel like you&amp;#8217;ve tried everything and it &lt;em&gt;must&lt;/em&gt; be impossible — until you realize the creative combination of things you haven&amp;#8217;t tried yet.  I&amp;#8217;m talking about puzzles again, oops; I guess the general level design equivalent of this is that players tend to try the first thing they see first, so if you &lt;strong&gt;put required parts later&lt;/strong&gt;, players will be more likely to see optional&amp;nbsp;parts.&lt;/p&gt;
&lt;p&gt;I think that&amp;#8217;s all I&amp;#8217;ve got for this one puzzle room.  I do want to say (again) that I love &lt;em&gt;both&lt;/em&gt; endings of Braid.  The normal ending weaves together the game mechanics and (admittedly loose) plot in a way that gave me chills when I first saw it; the secret ending &lt;em&gt;completely&lt;/em&gt; changes both how the ending plays and how you might interpret the finale, all by making only the slightest changes to the&amp;nbsp;level.&lt;/p&gt;
&lt;h2 id="portal-testchamber-18-advanced"&gt;&lt;a class="toclink" href="#portal-testchamber-18-advanced"&gt;Portal: Testchamber 18&amp;nbsp;(advanced)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/portal-testchamber-18-advanced.png" alt="View into a Portal test chamber; the ceiling and most of the walls are covered in metal"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;screenshot mine — &lt;a href="https://www.youtube.com/watch?v=ninRkHZ7WOg"&gt;playthrough of normal map&lt;/a&gt; — &lt;a href="https://www.youtube.com/watch?v=wNr9l8EZxz4"&gt;playthrough of advanced&amp;nbsp;map&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I love Portal.  I blazed through the game in a couple hours the night it came out.  I&amp;#8217;d seen the trailer and &lt;em&gt;instantly&lt;/em&gt; grasped the concept, so the very slow and gentle learning curve was actually a bit frustrating for me; I just wanted to portal around a big playground, and I finally got to do that in the six &amp;#8220;serious&amp;#8221; tests towards the end, 13 through&amp;nbsp;18.&lt;/p&gt;
&lt;p&gt;Valve threw an interesting curveball with these six maps.  As well as being more complete puzzles by themselves, Valve added &amp;#8220;challenges&amp;#8221; requiring that they be done with as few portals, time, or steps as possible.  I only bothered with the portal challenges — time and steps seemed less about puzzle-solving and more about twitchy reflexes — and within them I found buried an extra layer of puzzles.  All of the minimum portal requirements were only possible if you found an alternative solution to the map: skipping part of it, making do with only one cube instead of two, etc.  But Valve offered no hints, only a target number.  It was a clever way to make me think harder about familiar&amp;nbsp;areas.&lt;/p&gt;
&lt;p&gt;Alongside the challenges were &amp;#8220;advanced&amp;#8221; maps, and &lt;em&gt;these&lt;/em&gt; blew me away.  They were six maps identical in layout to the last six test chambers, but with a simple added twist that completely changed how you had to approach them.  Test 13 has two buttons with two boxes to place on them; the advanced version removes a box and also changes the floor to lava.  Test 14 is a live fire course with turrets you have to knock over; the advanced version puts them all in impenetrable cages.  Test 17 is based around making extensive use of a single cube; the advanced version changes it to a&amp;nbsp;ball.&lt;/p&gt;
&lt;p&gt;But the one that sticks out the most to me is test 18, a potpourri of everything you&amp;#8217;ve learned so far.  The beginning part has you cross several large pits of toxic sludge by portaling from the ceilings; the advanced version simply changes the ceilings to unportalable metal.  It seems you&amp;#8217;re completely stuck after only the first jump, unless you happen to catch a glimpse of the portalable &lt;em&gt;floor&lt;/em&gt; you pass over in mid-flight.  Or you might remember from the regular version of the map that the floor was portalable there, since you used it to progress further.  Either way, you have to fire a portal in midair in a way you&amp;#8217;ve never had to do before, and the result feels &lt;em&gt;very cool&lt;/em&gt;, like you&amp;#8217;ve defeated a puzzle that was intended to be unsolvable.  All in a level that was fairly easy the first time around, and has been modified only&amp;nbsp;slightly.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure where I&amp;#8217;m going with this.  I could say it&amp;#8217;s good to &lt;strong&gt;make the player feel clever&lt;/strong&gt;, but that feels wishy-washy.  What I really appreciated about the advanced tests is that they exploited inklings of ideas I&amp;#8217;d started to have when playing through the regular game; they encouraged me to take the spark of inspiration this game mechanic gave me and &lt;em&gt;run with it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So I suppose the better underlying principle here — the &lt;em&gt;most&lt;/em&gt; important principle in level design, in any creative work — is to &lt;strong&gt;latch onto what gets you fired up and run with it&lt;/strong&gt;.  I am absolutely certain that the level designers for this game loved the portal concept as much as I do, they explored it thoroughly, and they felt &lt;em&gt;compelled&lt;/em&gt; to fit their wilder puzzle ideas in&amp;nbsp;somehow.&lt;/p&gt;
&lt;p&gt;More of that.  Find the stuff that feels like it&amp;#8217;s going to burst out of your head, and let it&amp;nbsp;burst.&lt;/p&gt;
&lt;h2 id="chips-challenge-level-122-totally-fair-and-level-131-totally-unfair"&gt;&lt;a class="toclink" href="#chips-challenge-level-122-totally-fair-and-level-131-totally-unfair"&gt;Chip's Challenge: Level 122, Totally Fair and Level 131, Totally&amp;nbsp;Unfair&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/chips-challenge-totally-fair-mechanism.png" alt="A small maze containing a couple monsters and ending at a brown button"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;screenshots mine — &lt;a href="https://strategywiki.org/wiki/Chip%27s_Challenge/Levels_121-140"&gt;full maps of both levels&lt;/a&gt; — &lt;a href="https://www.youtube.com/watch?v=ZOdjE8KhaXc"&gt;playthrough of Totally Fair&lt;/a&gt; — &lt;a href="https://www.youtube.com/watch?v=zn8wR53CxuA"&gt;playthrough of Totally&amp;nbsp;Unfair&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I mention this because Portal reminded me of it.  The regular and advanced maps in Portal are reminiscent of parallel worlds or duality or whatever you want to call the theme.  I extremely dig that theme, and it shows up in Chip&amp;#8217;s Challenge in an unexpected&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Totally Fair is a wide open level with a little maze walled off in one corner.  The maze contains a monster called a &amp;#8220;teeth&amp;#8221;, which follows Chip at a slightly slower speed.  (The second teeth, here shown facing upwards, starts outside the maze but followed me into it when I took this&amp;nbsp;screenshot.)&lt;/p&gt;
&lt;p&gt;The goal is to lure the teeth into standing on the brown button on the right side.  If anything moves into a &amp;#8220;trap&amp;#8221; tile (the larger brown recesses at the bottom), it cannot move out of that tile until/unless something steps on the corresponding brown button.  So there&amp;#8217;s not much room for error in maneuvering the teeth; if it falls in the water up top, it&amp;#8217;ll die, and if it touches the traps at the bottom, it&amp;#8217;ll be stuck&amp;nbsp;permanently.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;reason&lt;/em&gt; you need the brown button pressed is to acquire the chips on the far right edge of the&amp;nbsp;level.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/chips-challenge-totally-unfair-chips.png" alt="Several chips that cannot be obtained without stepping on a trap"&gt;
&lt;/div&gt;

&lt;p&gt;The gray recesses turn into walls after being stepped on, so once you grab a chip, the only way out is through the force floors and ice that will send you onto the trap.  If you haven&amp;#8217;t maneuvered the teeth onto the button beforehand, you&amp;#8217;ll be trapped&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Doesn&amp;#8217;t seem like a huge deal, since you can go see exactly how the maze is shaped and move the teeth into position fairly easily.  But you see, here is the beginning of Totally&amp;nbsp;Fair.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/chips-challenge-totally-fair-entrance.png" alt="A wall with a single recessed gray space in it"&gt;
&lt;/div&gt;

&lt;p&gt;The gray recess leads up into the maze area, so you can only enter it once.  A force floor in the upper right lets you exit&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Totally Unfair is exactly identical, except the second teeth has been removed, and the entrance to the maze looks like&amp;nbsp;this.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/chips-challenge-totally-unfair-entrance.png" alt="The same wall is now completely solid, and the recess has been replaced with a hint"&gt;
&lt;/div&gt;

&lt;p&gt;You can&amp;#8217;t get into the maze area.  You can&amp;#8217;t even see the maze; it&amp;#8217;s too far away from the wall.  You have to position the teeth completely blind.  In fact, if you take a single step to the left from here, you&amp;#8217;ll have already dumped the teeth into the water and rendered the level&amp;nbsp;impossible.&lt;/p&gt;
&lt;p&gt;The hint tile will tell you to &amp;#8220;Remember sjum&amp;#8221;, where &lt;code&gt;SJUM&lt;/code&gt; is the password to get back to Totally Fair.  So you have to learn that level well enough to recreate the same effect without being able to see your&amp;nbsp;progress.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not impossible, and it&amp;#8217;s not a &amp;#8220;make a map&amp;#8221; faux puzzle.  A few scattered wall blocks near the chips, &lt;em&gt;outside&lt;/em&gt; the maze area, are arranged exactly where the edges of the maze are.  Once you notice that, all you have to do is walk up and down a few times, waiting a moment each time to make sure the teeth has caught up with&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;So in a sense, Totally Unfair is the advanced chamber version of Totally Fair.  It makes a very minor change that force you to approach the whole level completely differently, using knowledge gleaned from your first&amp;nbsp;attempt.&lt;/p&gt;
&lt;p&gt;And crucially, it&amp;#8217;s an actual &lt;em&gt;puzzle&lt;/em&gt;!  A lot of later Chip&amp;#8217;s Challenge levels rely heavily on map-drawing, timing, tedium, or outright luck.  (Consider, if you will, &lt;a href="https://strategywiki.org/wiki/Chip%27s_Challenge/Levels_121-140#Level_133:_BLOBDANCE"&gt;Blobdance&lt;/a&gt;.)  The Totally Fair + Totally Unfair pairing requires a little ingenuity unlike anything else in the game, and the solution is something more than just combinations of existing game mechanics.  There&amp;#8217;s something very interesting about that hint in the walls, a hint you&amp;#8217;d have no reason to pick up on when playing through the first level.  I wish I knew how to verbalize it&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;Anyway, enough puzzle games; let&amp;#8217;s get back to regular ol&amp;#8217; level&amp;nbsp;design.&lt;/p&gt;
&lt;h2 id="links-awakening-level-7-eagles-tower"&gt;&lt;a class="toclink" href="#links-awakening-level-7-eagles-tower"&gt;Link's Awakening: Level 7, Eagle's&amp;nbsp;Tower&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/links-awakening-eagle-tower-before.png" alt="A 4×4 arrangement of rooms with a conspicuous void in the middle"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;maps via &lt;a href="http://www.vgmaps.com/Atlas/GB-GBC/index.htm#LegendOfZeldaLinksAwakeningDX"&gt;vgmaps&lt;/a&gt; and &lt;a href="https://tcrf.net/The_Legend_of_Zelda:_Link%27s_Awakening#Eagle.27s_Tower"&gt;&lt;span class="caps"&gt;TCRF&lt;/span&gt;&lt;/a&gt; — &lt;a href="https://www.youtube.com/watch?v=ffJ5WGob0F8"&gt;playthrough with&amp;nbsp;commentary&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Link&amp;#8217;s Awakening was my first Zelda (and only Zelda for a long time), which made for a slightly confusing introduction to the series — what on earth is a Zelda and why doesn&amp;#8217;t it appear in the&amp;nbsp;game?&lt;/p&gt;
&lt;p&gt;The whole game is a blur of curiosities and interesting little special cases.  It&amp;#8217;s fabulously well put together, especially for a Game Boy game, and the dungeons in particular are fascinating microcosms of design.  I never really appreciated it before, but looking at the &lt;a href="http://www.vgmaps.com/Atlas/GB-GBC/index.htm#LegendOfZeldaLinksAwakeningDX"&gt;full maps&lt;/a&gt;, I&amp;#8217;m struck by how each dungeon has several large areas neatly sliced into individual&amp;nbsp;screens.&lt;/p&gt;
&lt;p&gt;Much like with Doom &lt;span class="caps"&gt;II&lt;/span&gt;, I surprise myself by picking Eagle&amp;#8217;s Tower as the most notable part of the game.  The dungeon isn&amp;#8217;t that interesting within the overall context of the game; it gives you only the mirror shield, possibly the least interesting item in the game, second only to the power bracelet upgrade from the previous dungeon.  The dungeon itself is fairly long, full of traps, and overflowing with crystal switches and toggle blocks, making it possibly the most frustrating of the set.  Getting to it involves spending some excellent quality time with a flying rooster, but you don&amp;#8217;t really &lt;em&gt;do&lt;/em&gt; anything — mostly you just make your way through nondescript caves and&amp;nbsp;mountaintops.&lt;/p&gt;
&lt;p&gt;Having now thoroughly dunked on it, I&amp;#8217;ll tell you what makes it stand out: &lt;em&gt;the player changes the shape of the dungeon&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s something I like a lot about Doom, as well, but it&amp;#8217;s much more dramatic in Eagle&amp;#8217;s Tower.  As you might expect, the dungeon is shaped like a tower, where each floor is on a 4×4 grid.  The top floor, 4F, is a small 2×2 block of rooms in the middle — but one of those rooms is the boss door, and there&amp;#8217;s no way to get to that&amp;nbsp;floor.&lt;/p&gt;
&lt;p&gt;(Well, sort of.  The &amp;#8220;down&amp;#8221; stairs in the upper-right of 3F actually lead up to 4F, but the connection is bogus and puts you in a wall, and both of the upper middle rooms are unreachable during normal&amp;nbsp;gameplay.)&lt;/p&gt;
&lt;p&gt;The primary objective of the dungeon is to smash four support columns on 2F by throwing a huge iron ball at them, which causes 4F to &lt;em&gt;crash down&lt;/em&gt; into the middle of&amp;nbsp;3F.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2017-07-01-level-design/links-awakening-eagle-tower-after.png" alt="The same arrangement of rooms, but the four in the middle have changed"&gt;
&lt;/div&gt;

&lt;p&gt;Even the map on the pause screen updates to reflect this.  In every meaningful sense, &lt;em&gt;you&lt;/em&gt;, the player, have fundamentally reconfigured the shape of this&amp;nbsp;dungeon.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; this.  It feels like I have some impact on the world, that I came along and did something much more significant than mere game mechanics ought to allow.  I saw that the tower was unsolvable as designed, so &lt;em&gt;I fixed it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s clear that the game engine supports rearranging screens arbitrarily — consider the Wind Fish&amp;#8217;s Egg — but this is s wonderfully clever and subtle use of that.  &lt;strong&gt;Let the player feel like they have an impact on the&amp;nbsp;world.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="the-cutting-room-floor"&gt;&lt;a class="toclink" href="#the-cutting-room-floor"&gt;The cutting room&amp;nbsp;floor&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is getting excessively long so I&amp;#8217;m gonna cut it here.  Some other things I thought of but don&amp;#8217;t know how to say more than a paragraph&amp;nbsp;about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Super Mario Land 2: Six Golden Coins has a lot of levels with completely unique themes, backed by very simple tilesets but enhanced by interesting one-off obstacles and enemies.  I don&amp;#8217;t even know how to pick a most interesting one.  Maybe just play the game, or at least &lt;a href="http://www.vgmaps.com/Atlas/GB-GBC/index.htm#SuperMarioLand26GoldenCoins"&gt;peruse the maps&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.nodraw.net/2010/08/tf2-density-of-detailing/"&gt;This post about density of detail in Team Fortress 2&lt;/a&gt; is really good so just read that I guess.  It&amp;#8217;s really about careful balance of contrast again, but through the lens of using contrasting amounts of detail to draw the player&amp;#8217;s attention, while still carrying a simple theme through less detailed&amp;nbsp;areas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metroid Prime is pretty interesting in a lot of ways, but I mostly laugh at how they spaced rooms out with long twisty hallways to improve load times — yet I never really thought about it because they all feel like they belong in the&amp;nbsp;game.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One thing I really &lt;em&gt;appreciate&lt;/em&gt; is level design that hints at a story, that shows me a world that exists persistently, that convinces me this space exists for some reason other than as a gauntlet for me as a player.  But it seems what comes first to my mind is level design that&amp;#8217;s clever or quirky, which probably says a lot about me.  Maybe the original Fallouts are a good place to look for that sort of&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;Conversely, it sticks out like a sore thumb when a game tries to railroad me into experiencing the game As The Designer Intended.  Games are interactive, so the more input the player can give, the better — and this can be as simple as deciding to avoid rather than confront enemies, or deciding to run rather than&amp;nbsp;walk.&lt;/p&gt;
&lt;p&gt;I think that&amp;#8217;s all I&amp;#8217;ve got in me at the moment.  Clearly I need to meditate on this a lot more, but I hope some of this was inspiring in some&amp;nbsp;way!&lt;/p&gt;</content><category term="tech"></category><category term="patreon"></category></entry><entry><title>Digital painter rundown</title><link href="https://eev.ee/blog/2017/06/17/digital-painter-rundown/" rel="alternate"></link><published>2017-06-17T00:58:00-07:00</published><updated>2017-06-17T00:58:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-06-17:/blog/2017/06/17/digital-painter-rundown/</id><summary type="html">&lt;p&gt;Another &lt;a href="https://www.patreon.com/eevee"&gt;patron&lt;/a&gt; post!  &lt;a href="https://www.patreon.com/user?u=199476"&gt;IndustrialRobot&lt;/a&gt;&amp;nbsp;asks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should totally write about drawing/image manipulation programs! (Inspired by &lt;a href="https://eev.ee/blog/2015/05/31/text-editor-rundown/"&gt;https://eev.ee/blog/2015/05/31/text-editor-rundown/&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a little trickier than a text editor comparison — while most text editors are cross-platform, quite a few digital art programs are &lt;em&gt;not&lt;/em&gt;.  So I&amp;#8217;m effectively unable to even try a decent chunk of the offerings.  I&amp;#8217;m also still a &lt;em&gt;relatively&lt;/em&gt; new artist, and image editors are much harder to briefly compare than text&amp;nbsp;editors&amp;#8230;&lt;/p&gt;
&lt;p&gt;Right, now that your expectations have been suitably&amp;nbsp;lowered:&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Another &lt;a href="https://www.patreon.com/eevee"&gt;patron&lt;/a&gt; post!  &lt;a href="https://www.patreon.com/user?u=199476"&gt;IndustrialRobot&lt;/a&gt;&amp;nbsp;asks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should totally write about drawing/image manipulation programs! (Inspired by &lt;a href="https://eev.ee/blog/2015/05/31/text-editor-rundown/"&gt;https://eev.ee/blog/2015/05/31/text-editor-rundown/&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a little trickier than a text editor comparison — while most text editors are cross-platform, quite a few digital art programs are &lt;em&gt;not&lt;/em&gt;.  So I&amp;#8217;m effectively unable to even try a decent chunk of the offerings.  I&amp;#8217;m also still a &lt;em&gt;relatively&lt;/em&gt; new artist, and image editors are much harder to briefly compare than text&amp;nbsp;editors&amp;#8230;&lt;/p&gt;
&lt;p&gt;Right, now that your expectations have been suitably&amp;nbsp;lowered:&lt;/p&gt;


&lt;h2 id="krita"&gt;&lt;a class="toclink" href="#krita"&gt;Krita&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I do all of my digital art in &lt;a href="https://krita.org/en/"&gt;Krita&lt;/a&gt;.  It&amp;#8217;s pretty&amp;nbsp;alright.&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;Okay so Krita grew out of &lt;a href="https://www.calligra.org/"&gt;Calligra&lt;/a&gt;, which used to be KOffice, which was an office suite designed for &lt;span class="caps"&gt;KDE&lt;/span&gt; (a Linux desktop environment).  I bring this up because &lt;span class="caps"&gt;KDE&lt;/span&gt; has a certain&amp;#8230;  reputation.  With &lt;span class="caps"&gt;KDE&lt;/span&gt;, there are at least three completely different ways to do &lt;em&gt;anything&lt;/em&gt;, each of those ways has ludicrous amounts of customization and settings, and somehow it still can&amp;#8217;t do what you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;Krita inherits this aesthetic by attempting to do &lt;em&gt;literally everything&lt;/em&gt;.  It has 17 different brush engines, more than 70 layer blending modes, seven color picker dockers, and an ungodly number of colorspaces.  It&amp;#8217;s clearly intended primarily for drawing, but it also supports animation and vector layers and a pretty decent spread of raster editing tools.  I &lt;em&gt;just right now&lt;/em&gt; discovered that it has Photoshop-like &amp;#8220;layer styles&amp;#8221; (e.g. drop shadow), after a year and a half of using&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In fairness, Krita manages all of this stuff well enough, and (apparently!) it manages to stay out of your way if you&amp;#8217;re not using it.  In less fairness, they managed to break erasing with a Wacom tablet pen for three&amp;nbsp;months?&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t want to rag on it too hard; it&amp;#8217;s an impressive piece of work, and I enjoy using it!  The emotion it evokes isn&amp;#8217;t so much frustration as&amp;#8230;  mystified&amp;nbsp;bewilderment.&lt;/p&gt;
&lt;p&gt;I once filed a ticket suggesting the addition of a brush size palette — a panel showing a grid of fixed brush sizes that makes it easy to switch between known sizes with a tablet pen (and increases the chances that you&amp;#8217;ll be able to get a brush back to the right size again).  It&amp;#8217;s a prominent feature of Paint Tool &lt;span class="caps"&gt;SAI&lt;/span&gt; and Clip Studio Paint, and while I&amp;#8217;ve never used either of those myself, I&amp;#8217;ve seen a good few artists swear by&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The developer response was that I could emulate the behavior by creating brush presets.  But that&amp;#8217;s flat-out wrong: getting the same effect would require creating a ton of brush presets &lt;em&gt;for every brush I have&lt;/em&gt;, plus giving them all distinct icons so the size is obvious at a glance.  Even then, it would be much more tedious to use and fill my presets with&amp;nbsp;junk.&lt;/p&gt;
&lt;p&gt;And that sort of response is what&amp;#8217;s so mysterious to me.  I&amp;#8217;ve never even been able to use this feature myself, but a year of amateur painting with Krita has convinced me that it would be pretty useful.  But a developer didn&amp;#8217;t see the use &lt;em&gt;and&lt;/em&gt; suggested an incredibly tedious alternative that only half-solves the problem and creates new ones.  Meanwhile, of the 28 existing dockable panels, &lt;em&gt;a quarter&lt;/em&gt; of them are different ways to choose&amp;nbsp;colors.&lt;/p&gt;
&lt;p&gt;What is Krita trying to be, then?  What does Krita think it is?  Who precisely is the target audience?  I have no&amp;nbsp;idea.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Anyway, I enjoy drawing in Krita well enough.  It ships with a respectable set of brushes, and there are &lt;a href="https://docs.krita.org/Resources"&gt;plenty more&lt;/a&gt; floating around.  It has canvas rotation, canvas mirroring, perspective guide tools, and other art goodies.  It doesn&amp;#8217;t colordrop on right click by default, which is arguably a grave sin (it shows a customizable radial menu instead), but that&amp;#8217;s easy to rebind.  It understands having a background color &lt;em&gt;beneath&lt;/em&gt; a bottom transparent layer, which is very nice.  You can also toggle &lt;em&gt;any&lt;/em&gt; brush between painting and erasing with the press of a button, and that turns out to be very&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;It doesn&amp;#8217;t support infinite canvases, though it does offer a one-click button to extend the canvas in a given direction.  I&amp;#8217;ve never used it (and didn&amp;#8217;t even know what it did until just now), but would totally use an infinite&amp;nbsp;canvas.&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t used the animation support too much, but it&amp;#8217;s pretty nice to have.  Granted, the only other animation software I&amp;#8217;ve used is Aseprite, so I don&amp;#8217;t have many points of reference here.  It&amp;#8217;s a relatively new addition, too, so I assume it&amp;#8217;ll improve over&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The one annoyance I remember with animation was really an interaction with a larger annoyance, which is: working with selections kind of sucks.  You can&amp;#8217;t drag a selection around with the selection tool; you have to switch to the move tool.  That would be fine if you could at least drag the selection &lt;em&gt;ring&lt;/em&gt; around with the selection tool, but you can&amp;#8217;t do that either; dragging just creates a new&amp;nbsp;selection.&lt;/p&gt;
&lt;p&gt;If you want to &lt;em&gt;copy&lt;/em&gt; a selection, you have to explicitly copy it to the clipboard and paste it, which &lt;em&gt;creates a new layer&lt;/em&gt;.  Ctrl-drag with the move tool doesn&amp;#8217;t work.  So then you have to merge that layer down, which I think is where the problem with animation comes in: a new layer is non-animated by default, meaning it effectively appears in any frame, so simply merging it down with merge it onto &lt;em&gt;every single frame&lt;/em&gt; of the layer below.  And you won&amp;#8217;t even notice until you switch frames or play back the animation.  Not&amp;nbsp;ideal.&lt;/p&gt;
&lt;p&gt;This is another thing that makes me wonder about Krita&amp;#8217;s sense of identity.  It has a lot of fancy general-purpose raster editing features that even &lt;span class="caps"&gt;GIMP&lt;/span&gt; is still struggling to implement, like high color depth support and non-destructive filters, yet something as basic as working with selections is clumsy.  (In fairness, &lt;span class="caps"&gt;GIMP&lt;/span&gt; is a bit clumsy here too, but it has a consistent notion of &amp;#8220;floating selection&amp;#8221; that&amp;#8217;s easy enough to work&amp;nbsp;with.)&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know how well Krita would work &lt;em&gt;as&lt;/em&gt; a general-purpose raster editor; I&amp;#8217;ve never tried to use it that way.  I can&amp;#8217;t think of anything obvious that&amp;#8217;s missing.  The only real gotcha is that some things you might expect to be tools, like smudge or clone, are just types of brush in&amp;nbsp;Krita.&lt;/p&gt;
&lt;h2 id="gimp"&gt;&lt;a class="toclink" href="#gimp"&gt;GIMP&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ah, &lt;a href="https://www.gimp.org/"&gt;&lt;span class="caps"&gt;GIMP&lt;/span&gt;&lt;/a&gt; — open source&amp;#8217;s answer to&amp;nbsp;Photoshop.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s very obviously intended for raster editing, and I&amp;#8217;m pretty familiar with it after half a lifetime of only using Linux.  I even wrote a little Scheme script for it &lt;em&gt;ages&lt;/em&gt; ago to automate some simple edits to a couple hundred files, back before I was aware of ImageMagick.  I don&amp;#8217;t know what to say about it, specifically; it&amp;#8217;s fairly powerful and does a wide variety of&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;In fact I&amp;#8217;d say it&amp;#8217;s almost &lt;em&gt;frustratingly&lt;/em&gt; intended for raster editing.  I used &lt;span class="caps"&gt;GIMP&lt;/span&gt; in my first attempts at digital painting, before I&amp;#8217;d heard of Krita.  It was &lt;em&gt;okay&lt;/em&gt;, but so much of it felt clunky and awkward.  Painting is split between a pencil tool, a paintbrush tool, and an airbrush tool; I don&amp;#8217;t really know why.  The default brushes are largely uninteresting.  Instead of brush presets, there are &lt;em&gt;tool&lt;/em&gt; presets that can be saved for any tool; it&amp;#8217;s a neat idea, but doesn&amp;#8217;t feel like a real substitute for brush&amp;nbsp;presets.&lt;/p&gt;
&lt;p&gt;Much of the same functionality as Krita is there, but it&amp;#8217;s all somehow more clunky.  I&amp;#8217;m sure it&amp;#8217;s possible to fiddle with the interface to get something friendlier for painting, but I never really figured out&amp;nbsp;how.&lt;/p&gt;
&lt;p&gt;And then there&amp;#8217;s the surprising stuff that&amp;#8217;s &lt;em&gt;missing&lt;/em&gt;.  There&amp;#8217;s no canvas rotation, for example.  There&amp;#8217;s only one type of brush, and it just stamps the same pattern along a path.  I don&amp;#8217;t think it&amp;#8217;s possible to smear or blend or pick up color while painting.  The only way to change the brush size is via the very sensitive slider on the tool options panel, which I remember being a little annoying with a tablet pen.  Also, you have to specifically &lt;em&gt;enable&lt;/em&gt; tablet support?  It&amp;#8217;s not difficult or anything, but I have no idea why the default is to &lt;em&gt;ignore&lt;/em&gt; tablet pressure and treat it like a regular mouse&amp;nbsp;cursor.&lt;/p&gt;
&lt;p&gt;As I mentioned above, there&amp;#8217;s also no support for high color depth or non-destructive editing, which is honestly a little embarrassing.  Those are the major things Serious Professionals™ have been asking for for ages, and &lt;span class="caps"&gt;GIMP&lt;/span&gt; has been trying to provide them, but it&amp;#8217;s taking a very long time.  The first signs of &lt;span class="caps"&gt;GEGL&lt;/span&gt;, a new library intended to provide these features, appeared in &lt;span class="caps"&gt;GIMP&lt;/span&gt; 2.6&amp;#8230;  in 2008.  The last major release was in 2012.  &lt;span class="caps"&gt;GIMP&lt;/span&gt; has been working on this new plumbing for almost as long as Krita&amp;#8217;s &lt;em&gt;entire development history&lt;/em&gt;.  (To be fair, Krita has also raised almost €90,000 from three Kickstarters to fund its development; I don&amp;#8217;t know that &lt;span class="caps"&gt;GIMP&lt;/span&gt; is funded at&amp;nbsp;all.)&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know what&amp;#8217;s up with &lt;span class="caps"&gt;GIMP&lt;/span&gt; nowadays.  It&amp;#8217;s still under active development, but the exact status and roadmap are a little unclear.  I still use it for some general-purpose editing, but I don&amp;#8217;t see any reason to use it to&amp;nbsp;draw.&lt;/p&gt;
&lt;p&gt;I do know that canvas rotation will be in the next release, and there was some experimentation with embedding MyPaint&amp;#8217;s brush engine (though when I tried it it was basically unusable), so maybe &lt;span class="caps"&gt;GIMP&lt;/span&gt; &lt;em&gt;is&lt;/em&gt; interested in wooing artists?  I guess we&amp;#8217;ll&amp;nbsp;see.&lt;/p&gt;
&lt;h2 id="mypaint"&gt;&lt;a class="toclink" href="#mypaint"&gt;MyPaint&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ah, &lt;a href="http://mypaint.org/"&gt;MyPaint&lt;/a&gt;.  I gave it a try once.&amp;nbsp;Once.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a shame, really.  It &lt;em&gt;sounds&lt;/em&gt; pretty great: specifically built for drawing, has very powerful brushes, supports an infinite canvas, supports canvas rotation, has a simple &lt;span class="caps"&gt;UI&lt;/span&gt; that gets out of your way.&amp;nbsp;Perfect.&lt;/p&gt;
&lt;p&gt;Or so it seems.  But in MyPaint&amp;#8217;s eagerness to shed unnecessary raster editing tools, it forgot a few of the more useful ones.  Like&amp;nbsp;selections.&lt;/p&gt;
&lt;p&gt;MyPaint has no notion of a selection, nor of copy/paste.  If you want to move a head to align better to a body, for example, the sanctioned approach is to duplicate the layer, erase the head from the old layer, erase everything &lt;em&gt;but&lt;/em&gt; the head from the new layer, then move the new&amp;nbsp;layer.&lt;/p&gt;
&lt;p&gt;I can&amp;#8217;t find anything that resembles &lt;span class="caps"&gt;HSL&lt;/span&gt; adjustment, either.  I guess the workaround for that is to create H/S/L layers and floodfill them with different colors until you get what you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;I can&amp;#8217;t work seriously without these basic editing tools.  I could see myself doodling in MyPaint, but Krita works just as well for doodling as for serious painting, so I&amp;#8217;ve never gone back to&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="drawpile"&gt;&lt;a class="toclink" href="#drawpile"&gt;Drawpile&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://drawpile.net/"&gt;Drawpile&lt;/a&gt; is the modern equivalent to OpenCanvas, I suppose?  It lets multiple people draw on the same canvas simultaneously.  (I would not recommend it as a general-purpose raster&amp;nbsp;editor.)&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a &lt;em&gt;little&lt;/em&gt; clunky in places — I sometimes have bugs where keyboard focus gets stuck in the chat, or my tablet cursor becomes invisible — but the collaborative part works surprisingly well.  It&amp;#8217;s not a brush powerhouse or anything, and I don&amp;#8217;t think it allows textured brushes, but it supports tablet pressure and canvas rotation and locked alpha and &lt;em&gt;selections&lt;/em&gt; and&amp;nbsp;whatnot.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve used it a couple times, and it&amp;#8217;s worked well enough that&amp;#8230;  well, other people made pretty decent drawings with it?  I&amp;#8217;m not sure I&amp;#8217;ve managed yet.  And I wouldn&amp;#8217;t use it single-player.  Still, it&amp;#8217;s&amp;nbsp;fun.&lt;/p&gt;
&lt;h2 id="aseprite"&gt;&lt;a class="toclink" href="#aseprite"&gt;Aseprite&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.aseprite.org/"&gt;Aseprite&lt;/a&gt; is for pixel art so it doesn&amp;#8217;t really belong here at all.  But it&amp;#8217;s very good at that and I like it a&amp;nbsp;lot.&lt;/p&gt;
&lt;h2 id="thats-all"&gt;&lt;a class="toclink" href="#thats-all"&gt;That's&amp;nbsp;all&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I can&amp;#8217;t name any other serious contender that exists for&amp;nbsp;Linux.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m dimly aware of a thing called &amp;#8220;Photo Shop&amp;#8221; that&amp;#8217;s more intended for photos but functions as a passable painter.  More artists seem to swear by Paint Tool &lt;span class="caps"&gt;SAI&lt;/span&gt; and Clip Studio Paint.  Also there&amp;#8217;s Paint.&lt;span class="caps"&gt;NET&lt;/span&gt;, but I have no idea how well it&amp;#8217;s actually suited for&amp;nbsp;painting.&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s it!  That&amp;#8217;s all I&amp;#8217;ve got.  Krita for drawing, &lt;span class="caps"&gt;GIMP&lt;/span&gt; for editing, Drawpile for collaborative&amp;nbsp;doodling.&lt;/p&gt;</content><category term="tech"></category><category term="patreon"></category></entry><entry><title>Teaching tech</title><link href="https://eev.ee/blog/2017/06/10/teaching-tech/" rel="alternate"></link><published>2017-06-10T15:16:00-07:00</published><updated>2017-06-10T15:16:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-06-10:/blog/2017/06/10/teaching-tech/</id><summary type="html">&lt;p&gt;A &lt;a href="https://www.patreon.com/eevee"&gt;sponsored post&lt;/a&gt; from an anonymous&amp;nbsp;patron:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would kinda like to hear about any thoughts you have on technical teaching or technical writing. Pedagogy is something I care about. But I don&amp;#8217;t know how much you do, so feel free to ignore this suggestion&amp;nbsp;:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good news: I care enough that I&amp;#8217;m trying to write a sorta-kinda-teaching&amp;nbsp;book!&lt;/p&gt;
&lt;p&gt;Ironically, one of the biggest problems I&amp;#8217;ve had with writing the introduction to that book is that I keep accidentally rambling on for pages about problems and difficulties with teaching technical subjects.  So maybe this is a good chance to get it out of my&amp;nbsp;system.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A &lt;a href="https://www.patreon.com/eevee"&gt;sponsored post&lt;/a&gt; from an anonymous&amp;nbsp;patron:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would kinda like to hear about any thoughts you have on technical teaching or technical writing. Pedagogy is something I care about. But I don&amp;#8217;t know how much you do, so feel free to ignore this suggestion&amp;nbsp;:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good news: I care enough that I&amp;#8217;m trying to write a sorta-kinda-teaching&amp;nbsp;book!&lt;/p&gt;
&lt;p&gt;Ironically, one of the biggest problems I&amp;#8217;ve had with writing the introduction to that book is that I keep accidentally rambling on for pages about problems and difficulties with teaching technical subjects.  So maybe this is a good chance to get it out of my&amp;nbsp;system.&lt;/p&gt;


&lt;h2 id="phaser"&gt;&lt;a class="toclink" href="#phaser"&gt;Phaser&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I recently tried out a new thing.  It was &lt;a href="https://phaser.io/"&gt;Phaser&lt;/a&gt;, but this isn&amp;#8217;t a dig on them in particular, just a convenient example fresh in my mind.  If anything, they&amp;#8217;re better than&amp;nbsp;most.&lt;/p&gt;
&lt;p&gt;As you can see from Phaser&amp;#8217;s website, it appears to have &lt;em&gt;tons&lt;/em&gt; of documentation.    Two of the six headings are &amp;#8220;&lt;span class="caps"&gt;LEARN&lt;/span&gt;&amp;#8221; and &amp;#8220;&lt;span class="caps"&gt;EXAMPLES&lt;/span&gt;&amp;#8221;, which seems very promising.  And indeed, Phaser&amp;nbsp;offers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Several getting-started&amp;nbsp;walkthroughs&lt;/li&gt;
&lt;li&gt;Possibly hundreds of&amp;nbsp;examples&lt;/li&gt;
&lt;li&gt;A news feed that regularly links to third-party&amp;nbsp;tutorials&lt;/li&gt;
&lt;li&gt;Thorough &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;docs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perfect.  Beautiful.  Surely, a&amp;nbsp;dream.&lt;/p&gt;
&lt;p&gt;Well,&amp;nbsp;almost.&lt;/p&gt;
&lt;p&gt;The examples are all microscopic, usually focused around a single tiny feature — many of them could be explained just as well with one line of code.  There are a few example games, but they&amp;#8217;re short aimless demos.  None of them are complete &lt;em&gt;games&lt;/em&gt;, and there&amp;#8217;s no showcase either.  Games sometimes pop up in the news feed, but most of them don&amp;#8217;t include source code, so they&amp;#8217;re not useful for learning&amp;nbsp;from.&lt;/p&gt;
&lt;p&gt;Likewise, the &lt;span class="caps"&gt;API&lt;/span&gt; docs are &lt;em&gt;just&lt;/em&gt; &lt;span class="caps"&gt;API&lt;/span&gt; docs, leading to the sorts of problems you might imagine.  For example, in a few places there&amp;#8217;s a mention of a &lt;code&gt;preUpdate&lt;/code&gt; stage that (naturally) happens before &lt;code&gt;update&lt;/code&gt;.  You might rightfully wonder what kinds of things happen in &lt;code&gt;preUpdate&lt;/code&gt; — and more importantly, what should &lt;em&gt;you&lt;/em&gt; put there, and&amp;nbsp;why?&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s check the &lt;span class="caps"&gt;API&lt;/span&gt; docs for &lt;a href="https://photonstorm.github.io/phaser-ce/Phaser.Group.html#preUpdate"&gt;&lt;code&gt;Phaser.Group.preUpdate&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The core preUpdate - as called by&amp;nbsp;World.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay, that didn&amp;#8217;t help too much, but let&amp;#8217;s check what &lt;a href="https://photonstorm.github.io/phaser-ce/Phaser.World.html#preUpdate"&gt;&lt;code&gt;Phaser.World&lt;/code&gt;&lt;/a&gt; has to&amp;nbsp;say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The core preUpdate - as called by&amp;nbsp;World.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ah.  Hm.  It turns out &lt;code&gt;World&lt;/code&gt; is a subclass of &lt;code&gt;Group&lt;/code&gt; and inherits this method — and thus its unaltered docstring — from &lt;code&gt;Group&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I did eventually find some brief docs attached to &lt;a href="https://photonstorm.github.io/phaser-ce/Phaser.Stage.html#preUpdate"&gt;&lt;code&gt;Phaser.Stage&lt;/code&gt;&lt;/a&gt; (but only by grepping the source code).  It mentions what the framework uses &lt;code&gt;preUpdate&lt;/code&gt; for, but not &lt;em&gt;why&lt;/em&gt;, and not when I might want to use it&amp;nbsp;too.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The trouble here is that there&amp;#8217;s no narrative documentation — nothing explaining how the library is put together and how I&amp;#8217;m supposed to use it.  I get handed some brief primers and a massive reference, but nothing in between.  It&amp;#8217;s like buying an O&amp;#8217;Reilly book and finding out it only has one chapter followed by a 500-page&amp;nbsp;glossary.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;API&lt;/span&gt; docs are great &lt;em&gt;if you know specifically what you&amp;#8217;re looking for&lt;/em&gt;, but they don&amp;#8217;t explain the best way to approach higher-level problems, and they don&amp;#8217;t offer much guidance on how to mesh nicely with the design of a framework or big library.  Phaser does a decent chunk of stuff for you, off in the background somewhere, so it gives the strong impression that it expects you to build around it in a particular way&amp;#8230;  but it never tells you what that way&amp;nbsp;is.&lt;/p&gt;
&lt;h2 id="tutorials"&gt;&lt;a class="toclink" href="#tutorials"&gt;Tutorials&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ah, but this is what tutorials are for,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;I confess I recoil whenever I hear the word &amp;#8220;tutorial&amp;#8221;.  It conjures an image of a uniquely useless sort of post, which goes something like&amp;nbsp;this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Look at this cool thing I made!  I&amp;#8217;ll teach you how to do it&amp;nbsp;too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press all of these buttons in this order.  Here&amp;#8217;s a screenshot, which looks nothing like what you have, because I&amp;#8217;ve customized the hell out of&amp;nbsp;everything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You did&amp;nbsp;it!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The author is often less than forthcoming about &lt;em&gt;why&lt;/em&gt; they made any of the decisions they did, where you might want to try something else, or what might go wrong (and how to fix&amp;nbsp;it).&lt;/p&gt;
&lt;p&gt;And this is to be expected!  Writing out any of that stuff requires far more extensive knowledge than you need just to do the thing in the first place, &lt;em&gt;and&lt;/em&gt; you need to do a good bit of introspection to sort out something coherent to&amp;nbsp;say.&lt;/p&gt;
&lt;p&gt;In other words, &lt;strong&gt;teaching is hard.&lt;/strong&gt;  It&amp;#8217;s a skill, and it takes practice, and most people blogging are not experts at it.  Including&amp;nbsp;me!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;With Phaser, I noticed that several of the third-party tutorials I tried to look at were 404s — sometimes less than a year after they were linked on the site.  Pretty major downside to relying on the community for teaching&amp;nbsp;resources.&lt;/p&gt;
&lt;p&gt;But I also notice that&amp;#8230;&amp;nbsp;um&amp;#8230;&lt;/p&gt;
&lt;p&gt;Okay, look.  I &lt;strong&gt;really&lt;/strong&gt; am not trying to rag on this author.  I&amp;#8217;m not.  They tried to share their knowledge with the world, and &lt;em&gt;that&amp;#8217;s a good thing&lt;/em&gt;, something worthy of praise.  I&amp;#8217;m glad they did it!  I hope it helps&amp;nbsp;someone.&lt;/p&gt;
&lt;p&gt;But for the sake of example, &lt;a href="https://phaser.io/news/2017/06/mike-dangers-tutorial-part-2"&gt;here is the most recent entry&lt;/a&gt; in Phaser&amp;#8217;s &lt;a href="https://phaser.io/learn/community-tutorials"&gt;list of community tutorials&lt;/a&gt;.  I &lt;em&gt;have&lt;/em&gt; to link it, because it&amp;#8217;s such a perfect example.&amp;nbsp;Consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The post itself is a bulleted list of explanation followed by a single contiguous 250 lines of source code.  (Not that there&amp;#8217;s anything wrong with bulleted lists, mind you.)  That code contains zero comments and zero blank&amp;nbsp;lines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is only part two in what I think is a series aimed at beginners, yet the title and much of the prose focus on &lt;em&gt;object pooling&lt;/em&gt;, a performance hack that&amp;#8217;s easy to add later and that&amp;#8217;s almost certainly unnecessary for a game this simple.  There is no explanation of &lt;em&gt;why&lt;/em&gt; this is done; the prose only says you&amp;#8217;ll understand why it&amp;#8217;s critical once you add a lot more game&amp;nbsp;objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It turns out I only have two things to say here so I don&amp;#8217;t know why I made this a bulleted&amp;nbsp;list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, it&amp;#8217;s not really a guided explanation; it&amp;#8217;s &amp;#8220;look what I&amp;nbsp;did&amp;#8221;.&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s fine, and it can still be interesting.  I&amp;#8217;m not sure English is even this person&amp;#8217;s first language, so I&amp;#8217;m hardly going to criticize them for not writing a novel about&amp;nbsp;platforming.&lt;/p&gt;
&lt;p&gt;The trouble is that I doubt a beginner would walk away from this feeling very enlightened.  They &lt;em&gt;might&lt;/em&gt; be closer to having the game they wanted, so there&amp;#8217;s still value in it, but it feels closer to having someone else do it for them.  And an awful lot of tutorials I&amp;#8217;ve seen — particularly of the &amp;#8220;post on some blog&amp;#8221; form (which I&amp;#8217;m aware is the genre of thing I&amp;#8217;m writing right now) — look&amp;nbsp;similar.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t some huge social problem; it&amp;#8217;s just people writing on their blog and contributing to the corpus of written knowledge.  It &lt;em&gt;does&lt;/em&gt; become a bit stickier when a large project relies on these community tutorials as its main set of teaching&amp;nbsp;aids.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Again, I&amp;#8217;m not ragging on Phaser here.  I had a slightly frustrating experience with it, coming in knowing what I wanted but unable to find a description of the semantics anywhere, but I do sympathize.  Teaching is hard, writing documentation is hard, and programmers would usually rather &lt;em&gt;program&lt;/em&gt; than do either of those things.  For free projects that run on volunteer work, and in an industry where anything other than programming is a little undervalued, getting good docs written can be&amp;nbsp;tricky.&lt;/p&gt;
&lt;p&gt;(Then again, Phaser sells books and plugins, so maybe they could hire a documentation writer.  Or maybe the whole point is for you to buy the&amp;nbsp;books?)&lt;/p&gt;
&lt;h2 id="some-pretty-good-docs"&gt;&lt;a class="toclink" href="#some-pretty-good-docs"&gt;Some pretty good&amp;nbsp;docs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python has pretty good &lt;a href="https://docs.python.org/3/"&gt;documentation&lt;/a&gt;.  It introduces the language with a &lt;a href="https://docs.python.org/3/tutorial/index.html"&gt;tutorial&lt;/a&gt;, then documents everything else in both a library and language&amp;nbsp;reference.&lt;/p&gt;
&lt;p&gt;This sounds an awful lot like Phaser&amp;#8217;s setup, but there&amp;#8217;s some considerable depth in the Python docs.  The tutorial is highly narrative and walks through quite a few corners of the language, stopping to mention common pitfalls and possible use cases.  I clicked &lt;a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"&gt;an arbitrary heading&lt;/a&gt; and found a pleasant, informative read that somehow avoids being bewilderingly&amp;nbsp;dense.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;API&lt;/span&gt; docs also take on a narrative tone — even something as humble as the &lt;a href="https://docs.python.org/3/library/collections.html"&gt;&lt;code&gt;collections&lt;/code&gt; module&lt;/a&gt; offers numerous examples, use cases, patterns, recipes, and hints of interesting ways you might extend the existing&amp;nbsp;types.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m being a little vague and hand-wavey here, but it&amp;#8217;s hard to give specific examples without just quoting two pages of Python documentation.  Hopefully you can see right away what I mean if you just take a look at them.  They&amp;#8217;re good docs,&amp;nbsp;Bront.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve likewise always enjoyed the &lt;a href="http://docs.sqlalchemy.org/en/latest/"&gt;SQLAlchemy documentation&lt;/a&gt;, which follows much the same structure as the main Python documentation.  SQLAlchemy is a database abstraction layer plus &lt;span class="caps"&gt;ORM&lt;/span&gt;, so it can do a &lt;em&gt;lot&lt;/em&gt; of subtly intertwined stuff, and the complexity of the docs reflects this.  Figuring out how to do very advanced things correctly, in particular, can be challenging.  But for the most part it does a very thorough job of introducing you to a large library with a particular philosophy and how to best work alongside&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I softly contrast this with, say, the Perl&amp;nbsp;documentation.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s gotten better since I first learned Perl, but Perl&amp;#8217;s docs are still a bit of a strange beast.  They exist as a flat collection of manpage-like documents with terse names like &lt;a href="http://perldoc.perl.org/perlootut.html"&gt;perlootut&lt;/a&gt;.  The documentation is certainly thorough, but much of it has a strange&amp;#8230;  allocation of&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href="http://perldoc.perl.org/perllol.html#Growing-Your-Own"&gt;perllol&lt;/a&gt; — the explanation of how to make a list of lists, which somehow merits its own separate documentation — offers no fewer than &lt;em&gt;nine&lt;/em&gt; similar variations of the same code for reading a file into a nested lists of words on each line.  Where Python offers examples for a variety of different problems, Perl shows you a lot of subtly different ways to do the same basic&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;A similar problem is that Perl&amp;#8217;s docs sometimes offer far too much context; consider the &lt;a href="http://perldoc.perl.org/perlreftut.html"&gt;references tutorial&lt;/a&gt;, which starts by explaining that references are a powerful &amp;#8220;new&amp;#8221; feature in Perl 5 (first released in 1994).  It then explains why you might want to nest data structures&amp;#8230;  from a Perl 4 perspective, thus explaining why Perl 5 is so much&amp;nbsp;better.&lt;/p&gt;
&lt;h2 id="some-stuff-ive-tried"&gt;&lt;a class="toclink" href="#some-stuff-ive-tried"&gt;Some stuff I've&amp;nbsp;tried&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#8217;t claim to be a great teacher.  I like to talk about stuff I find interesting, and I try to do it in ways that are accessible to people who aren&amp;#8217;t lugging around the mountain of context I already have.  This being just some blog, it&amp;#8217;s hard to tell how well that works, but I do my&amp;nbsp;best.&lt;/p&gt;
&lt;p&gt;I also know that I learn best when I can &lt;em&gt;understand&lt;/em&gt; what&amp;#8217;s going on, rather than just seeing surface-level cause and effect.  Of course, with complex subjects, it&amp;#8217;s hard to develop an understanding before you&amp;#8217;ve seen the cause and effect a few times, so there&amp;#8217;s a balancing act between showing examples and trying to provide an explanation.  Too many concrete examples feel like rote memorization; too much abstract theory feels disconnected from anything&amp;nbsp;tangible.&lt;/p&gt;
&lt;p&gt;The attempt I&amp;#8217;m most pleased with is probably my &lt;a href="https://eev.ee/blog/2016/05/29/perlin-noise/"&gt;post on Perlin noise&lt;/a&gt;.  It covers a fairly specific subject, which made it much easier.  It builds up one step at a time from scratch, with visualizations at every point.  It offers some interpretations of what&amp;#8217;s going on.  It clearly explains some possible extensions to the idea, but distinguishes those from the core&amp;nbsp;concept.&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;is&lt;/em&gt; a little math-heavy, I grant you, but that was hard to avoid with a fundamentally mathematical topic.  I had to be economical with the background information, so I let the math be a little dense in&amp;nbsp;places.&lt;/p&gt;
&lt;p&gt;But the best part about it by far is that &lt;em&gt;I&lt;/em&gt; learned a lot about Perlin noise in the process of writing it.  In several places I realized I couldn&amp;#8217;t explain what was going on in a satisfying way, so I had to dig deeper into it before I could write about it.  Perhaps there&amp;#8217;s a good guideline hidden in there: don&amp;#8217;t try to teach as much as you&amp;nbsp;know?&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m also fairly happy with my series on &lt;a href="https://eev.ee/blog/2015/12/19/you-should-make-a-doom-level-part-1/"&gt;making Doom maps&lt;/a&gt;, though they meander into tangents a little more often.  It&amp;#8217;s hard to talk about something like Doom &lt;em&gt;without&lt;/em&gt; meandering, since it&amp;#8217;s a convoluted ecosystem that&amp;#8217;s grown organically over the course of 24 years and has at least three ways of doing&amp;nbsp;anything.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And finally there&amp;#8217;s the book I&amp;#8217;m trying to write, which is sort of about game&amp;nbsp;development.&lt;/p&gt;
&lt;p&gt;One of my biggest grievances with game development teaching in particular is how often it leaves out important touches.  Very few guides will tell you how to make a title screen or menu, how to handle death, how to get a Mario-style variable jump height.  They&amp;#8217;ll show you how to build a clearly unfinished demo game, then leave you to your own&amp;nbsp;devices.&lt;/p&gt;
&lt;p&gt;I realized that the only reliable way to show how to build a game is to &lt;em&gt;build a real game&lt;/em&gt;, then write about it.  So the book is laid out as a narrative of how I wrote my first few games, complete with stumbling blocks and dead ends and tiny bits of&amp;nbsp;polish.&lt;/p&gt;
&lt;p&gt;I have no idea how well this will work, or whether recapping my own mistakes will be interesting or distracting for a beginner, but it ought to be an interesting&amp;nbsp;experiment.&lt;/p&gt;</content><category term="tech"></category><category term="patreon"></category></entry><entry><title>Introspection</title><link href="https://eev.ee/blog/2017/05/28/introspection/" rel="alternate"></link><published>2017-05-28T13:59:00-07:00</published><updated>2017-05-28T13:59:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-05-28:/blog/2017/05/28/introspection/</id><summary type="html">&lt;p&gt;This month, IndustrialRobot has &lt;a href="https://www.patreon.com/eevee"&gt;generously donated&lt;/a&gt; in order to&amp;nbsp;ask:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do you go about learning about yourself? Has your view of yourself changed recently? How did you handle&amp;nbsp;it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoof.  That&amp;#8217;s incredibly abstract and open-ended — there&amp;#8217;s a lot I could say, but most of it is hard to turn into&amp;nbsp;words.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This month, IndustrialRobot has &lt;a href="https://www.patreon.com/eevee"&gt;generously donated&lt;/a&gt; in order to&amp;nbsp;ask:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do you go about learning about yourself? Has your view of yourself changed recently? How did you handle&amp;nbsp;it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoof.  That&amp;#8217;s incredibly abstract and open-ended — there&amp;#8217;s a lot I could say, but most of it is hard to turn into&amp;nbsp;words.&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;The first example to come to mind — and the most conspicuous, at least from where I&amp;#8217;m sitting — has been the transition from &lt;em&gt;technical&lt;/em&gt; to &lt;em&gt;creative&lt;/em&gt; since quitting my tech job.  I think I touched on this a year ago, but it&amp;#8217;s become all the more pronounced since&amp;nbsp;then.&lt;/p&gt;
&lt;p&gt;I quit in part because I wanted more time to work on my own projects.  Two years ago, those projects included such things as: giving the Python ecosystem a better imaging library, designing an alternative to regular expressions, building a Very Correct &lt;span class="caps"&gt;IRC&lt;/span&gt; bot framework, and a few more things along similar lines.  The goals were all to &lt;em&gt;solve problems&lt;/em&gt; — not hugely important ones, but mildly inconvenient ones that I thought I could bring something novel to.  Problem-solving for its own&amp;nbsp;sake.&lt;/p&gt;
&lt;p&gt;Now that I had all the time in the world to work on these things, I&amp;#8230;  didn&amp;#8217;t.  It turned out they were almost as much of a slog as my job had&amp;nbsp;been!&lt;/p&gt;
&lt;p&gt;The problem, I think, was that there was no &lt;em&gt;point&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This was really weird to realize and come to terms with.  I do &lt;em&gt;like&lt;/em&gt; solving problems for its own sake; it&amp;#8217;s interesting and educational.  And most of the programming folks I know and surround myself with have that same drive and use it to create interesting tools like Twisted.  So besides taking for granted that this was the kind of stuff I &lt;em&gt;wanted&lt;/em&gt; to do, it seemed like the kind of stuff I &lt;em&gt;should&lt;/em&gt; want to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;But even if I create a really interesting tool, what do I have?  I don&amp;#8217;t have a &lt;em&gt;thing&lt;/em&gt;; I have a tool that can be used to &lt;em&gt;build&lt;/em&gt; things.  If I want a &lt;em&gt;thing&lt;/em&gt;, I have to either now build it myself — starting from nearly zero despite all the work on the tool, because it can only do so much in isolation — or convince a bunch of other people to use my tool to build things.  Then they&amp;#8217;d be &lt;em&gt;depending&lt;/em&gt; on my tool, which means I have to maintain and support it, which is even more time and effort poured into this&amp;nbsp;non-thing.&lt;/p&gt;
&lt;p&gt;Despite frequently being drawn to &lt;em&gt;think&lt;/em&gt; about solving abstract tooling problems, it seems I truly want to make &lt;em&gt;things&lt;/em&gt;.  This is probably why I have a lot of abandoned projects boldly described as &amp;#8220;let&amp;#8217;s solve X problem forever!&amp;#8221; — I go to scratch the itch, I do just enough work that it doesn&amp;#8217;t itch any more, and then I lose&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;I spent a few months quietly flailing over this minor existential crisis.  I&amp;#8217;d spent years daydreaming about making tools; what did I have if not that drive?  I was having to force myself to work on what I thought were my passion&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;Meanwhile, I&amp;#8217;d vaguely intended to do some game development, but for some reason dragged my feet forever and then took my sweet time dipping my toes in the water.  I did work on a text adventure, Runed Awakening, on and off&amp;#8230;  but it was a fractal of creative decisions and I had a hard time making all of them.  It might&amp;#8217;ve been too ambitious, despite &lt;em&gt;feeling&lt;/em&gt; small, and that might&amp;#8217;ve discouraged me from pursuing other kinds of games&amp;nbsp;earlier.&lt;/p&gt;
&lt;p&gt;A big part of it might have been the same reason I took so long to even give art a serious try.  I thought of myself as a &lt;em&gt;technical person&lt;/em&gt;, and art is a thing for &lt;em&gt;creative people&lt;/em&gt;, so I&amp;#8217;m simply disqualified, right?  Maybe the same thing applies to&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;Lord knows I had enough trouble when I tried.  I&amp;#8217;d orbited the Doom community for &lt;em&gt;years&lt;/em&gt; but never released a single finished level.  I did finally give it a shot again, now that I had the time.  Six months into my funemployment, I wrote a three-part guide on &lt;a href="https://eev.ee/blog/2015/12/19/you-should-make-a-doom-level-part-1/"&gt;making Doom levels&lt;/a&gt;.  Three months after that, I finally &lt;a href="https://eev.ee/blog/2016/03/31/i-made-a-doom-level/"&gt;released one of my own&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I suppose that opened the floodgates; a couple weeks later, glip and I decided to try making something for the &lt;a href="http://www.lexaloffle.com/pico-8.php"&gt;&lt;span class="caps"&gt;PICO&lt;/span&gt;-8&lt;/a&gt;, and then we &lt;a href="https://eev.ee/blog/2016/05/25/under-construction-our-pico-8-game/"&gt;did that&lt;/a&gt; (almost exactly a year ago!).  Then &lt;a href="https://eevee.itch.io/"&gt;kept doing it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s been incredibly rewarding — far moreso than any &amp;#8220;pure&amp;#8221; tooling problem I&amp;#8217;ve ever approached.  Moreso than even something like &lt;a href="https://veekun.com/"&gt;veekun&lt;/a&gt;, which is a useful &lt;em&gt;thing&lt;/em&gt;.  People have &lt;em&gt;thoughts&lt;/em&gt; and &lt;em&gt;opinions&lt;/em&gt; on games.  Games give people &lt;em&gt;feelings&lt;/em&gt;, which they then tell you about.  Most of the commentary on a reference website is that something is missing or&amp;nbsp;incorrect.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I like doing creative work.&lt;/em&gt;  There was never a singular moment when this dawned on me; it was a slow process over the course of a year or more.  I probably should&amp;#8217;ve had an inkling when I started drawing, half a year before I quit; even my early (and very rough) daily comics made people laugh, and I liked that a lot.  Even the most well-crafted software doesn&amp;#8217;t tend to bring &lt;em&gt;joy&lt;/em&gt; to people, but amateur art&amp;nbsp;can.&lt;/p&gt;
&lt;p&gt;I still like doing technical work, but I prefer when it&amp;#8217;s a means to a creative end.  And, just as important, I prefer when it has a clear and constrained scope.  &amp;#8220;Make a library/tool for X&amp;#8221; is a nebulous problem that could go in a great many directions; &amp;#8220;make a bot that tweets Perlin noise&amp;#8221; has a pretty definitive finish line.  It was interesting to write a little physics engine, but I would&amp;#8217;ve hated doing it if it weren&amp;#8217;t for a game I were making and didn&amp;#8217;t have the clear scope of &amp;#8220;do what I need for this&amp;nbsp;game&amp;#8221;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It feels like creative work is something I&amp;#8217;ve been wanting to do for a long time.  If this were a made-for-&lt;span class="caps"&gt;TV&lt;/span&gt; movie, I would&amp;#8217;ve discovered this impulse one day and immediately revealed myself as a natural-born artistic genius of immense unrealized&amp;nbsp;talent.&lt;/p&gt;
&lt;p&gt;That didn&amp;#8217;t happen.  Instead I&amp;#8217;ve found that even something as mundane as &lt;em&gt;having ideas&lt;/em&gt; is a skill, and while it&amp;#8217;s one I enjoy, I&amp;#8217;ve barely ever exercised it at all.  I have plenty of ideas with technical work, but I run into brick walls &lt;em&gt;all the time&lt;/em&gt; with creative&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;How do I theme this area?  Well, I don&amp;#8217;t know.  How do I think of something?  I don&amp;#8217;t know that either.  It&amp;#8217;s a strange paradox to have an urge to create things but not quite know what those things&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s such a new and completely different kind of problem.  There&amp;#8217;s no right answer, or even an answer I can check for &amp;#8220;correctness&amp;#8221;.  I can do &lt;em&gt;anything&lt;/em&gt;.  With no landmarks to start from, it&amp;#8217;s easy to feel completely lost and just draw&amp;nbsp;blanks.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve essentially recalibrated the &lt;em&gt;texture&lt;/em&gt; of stuff I work on, and I have to find some completely new ways to approach problems.  I haven&amp;#8217;t found them yet.  I don&amp;#8217;t think they&amp;#8217;re anything that can be told or taught.  But I&amp;#8217;m starting to get there, and part of it is just &lt;em&gt;accepting&lt;/em&gt; that I can&amp;#8217;t treat these like problems with clear best solutions and clear algorithms to find those&amp;nbsp;solutions.&lt;/p&gt;
&lt;p&gt;A particularly glaring irony is that I&amp;#8217;ve had a really tough problem designing abstract spaces, even though that&amp;#8217;s exactly the kind of architecture I praise in Doom.  It&amp;#8217;s much trickier than it looks — a good abstract design is &lt;em&gt;reminiscent&lt;/em&gt; of something without quite &lt;em&gt;being&lt;/em&gt; that&amp;nbsp;something.  &lt;/p&gt;
&lt;p&gt;I suppose it&amp;#8217;s similar to a struggle I&amp;#8217;ve had with art.  I&amp;#8217;m drawn to a cartoony style, and cartooning is also a mild form of abstraction, of whittling away details to leave only what&amp;#8217;s most important.  I&amp;#8217;m reminded in particular of the forest background in fox flux — I was completely lost on how to make something &lt;em&gt;reminiscent&lt;/em&gt; of a tree line.  I knew enough to know that drawing trees would&amp;#8217;ve made the background far too busy, but trees are &lt;em&gt;naturally busy&lt;/em&gt;, so how do you represent&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;The answer glip gave me was to make &lt;a href="https://github.com/eevee/fox-flux/blob/059bf95e6a038bcf0f387965e5acdeab6e1ff47e/assets/images/landscape.png"&gt;big chunky leaf shapes&lt;/a&gt; around the edges and where light levels change.  Merely overlapping those shapes implies depth well enough to convey the overall shape of the tree.  The result works very well and looks very simple — yet it took a lot of effort just to get to the &lt;em&gt;idea&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It reminds me of mathematical research, in a way?  You know the general outcome you want, and you know the tools at your disposal, and it&amp;#8217;s up to you to make some creative leaps.  I don&amp;#8217;t think there&amp;#8217;s a way to directly learn how to approach that kind of problem; all you can do is look at what others have done and let it fuel your&amp;nbsp;imagination.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I think I&amp;#8217;m getting a little distracted here, but this is stuff that&amp;#8217;s been rattling around&amp;nbsp;lately.&lt;/p&gt;
&lt;p&gt;If there&amp;#8217;s a more personal meaning to the tree story, it&amp;#8217;s that this is a thing &lt;em&gt;I can do&lt;/em&gt;.  I can learn it, and it makes sense to me, despite being a huge&amp;nbsp;nerd.&lt;/p&gt;
&lt;p&gt;Two and a half years ago, I never would&amp;#8217;ve thought I&amp;#8217;d ever make an entire game from scratch &lt;em&gt;and do all the art for it&lt;/em&gt;.  It was completely unfathomable.  Maybe we can do a lot of things we don&amp;#8217;t expect we&amp;#8217;re capable of, if only we give them a serious&amp;nbsp;shot.&lt;/p&gt;
&lt;p&gt;And ask for help, of course.  I have a hell of a time doing that.  I did a &lt;a href="https://twitter.com/eevee/status/867960854611763200"&gt;painting&lt;/a&gt; recently that factored in &lt;em&gt;mountains&lt;/em&gt; of glip&amp;#8217;s advice, and on some level I feel like I didn&amp;#8217;t quite do it myself, even though every stroke was made by my hand.  Hell, I don&amp;#8217;t even look at references nearly as much as I should.  It feels like cheating, somehow?  I know that&amp;#8217;s ridiculous, but my natural impulse is to put my head down and figure it out myself.  Maybe I&amp;#8217;ve been doing that for too long with programming.  Trust me, it doesn&amp;#8217;t work quite so well in a brand new&amp;nbsp;field.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I&amp;#8217;m getting distracted&amp;nbsp;again!&lt;/p&gt;
&lt;p&gt;To answer your &lt;em&gt;actual&lt;/em&gt; questions: how do I go about learning about myself?  I don&amp;#8217;t!  It happens completely by accident.  I&amp;#8217;ll consciously examine my surface-level thoughts or behaviors or whatever, sure, but the &lt;em&gt;serious fundamental revelations&lt;/em&gt; have all caught me completely by surprise — sometimes slowly, sometimes&amp;nbsp;suddenly.&lt;/p&gt;
&lt;p&gt;Most of them also came from listening to the people who observe me from the outside: I only started drawing in the first place because of some ridiculous deal I made with glip.  At the time I thought they just wanted everyone to draw because art is &lt;em&gt;their thing&lt;/em&gt;, but now I&amp;#8217;m starting to suspect they&amp;#8217;d caught on after eight years of watching me lament that I couldn&amp;#8217;t&amp;nbsp;draw.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know how I &lt;em&gt;handle&lt;/em&gt; such discoveries, either.  What &lt;em&gt;is&lt;/em&gt; handling?  I imagine someone discovering something and trying to come to grips with it, but I don&amp;#8217;t know that I have quite that experience — my grappling usually comes earlier, when I&amp;#8217;m still trying to figure the thing out despite not knowing that there&amp;#8217;s a thing to find out.  Once I know it, it&amp;#8217;s on the table; I can&amp;#8217;t un-know it or reject it meaningfully.  All I can do is figure out what to do with it, and I approach that the same way I approach every other problem: by flailing at it and hoping for the&amp;nbsp;best.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t quite 2000 words.  Sorry.  I&amp;#8217;ve run out of things to say about me.  This paragraph is very conspicuous filler.  Banana.  Atmosphere.&amp;nbsp;Vocation.&lt;/p&gt;</content><category term="personal"></category><category term="patreon"></category></entry><entry><title>A few tidbits on networking in games</title><link href="https://eev.ee/blog/2017/05/22/a-few-tidbits-on-networking-in-games/" rel="alternate"></link><published>2017-05-22T08:06:00-07:00</published><updated>2017-05-22T08:06:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-05-22:/blog/2017/05/22/a-few-tidbits-on-networking-in-games/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.patreon.com/user?u=2491881"&gt;Nova Dasterin&lt;/a&gt; asks, &lt;a href="https://www.patreon.com/eevee"&gt;via Patreon&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How about do something on networking code, for some kind of realtime game (platformer or &lt;span class="caps"&gt;MMORPG&lt;/span&gt; or something).&amp;nbsp;:D&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ah, I see.  You&amp;#8217;re hoping for my usual detailed exploration of everything I know about networking code in&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;Well, joke&amp;#8217;s on you!  I don&amp;#8217;t know &lt;em&gt;anything&lt;/em&gt; about&amp;nbsp;networking.&lt;/p&gt;
&lt;p&gt;Wait&amp;#8230;  wait&amp;#8230;  maybe I know &lt;em&gt;one&lt;/em&gt;&amp;nbsp;thing.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://www.patreon.com/user?u=2491881"&gt;Nova Dasterin&lt;/a&gt; asks, &lt;a href="https://www.patreon.com/eevee"&gt;via Patreon&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How about do something on networking code, for some kind of realtime game (platformer or &lt;span class="caps"&gt;MMORPG&lt;/span&gt; or something).&amp;nbsp;:D&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ah, I see.  You&amp;#8217;re hoping for my usual detailed exploration of everything I know about networking code in&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;Well, joke&amp;#8217;s on you!  I don&amp;#8217;t know &lt;em&gt;anything&lt;/em&gt; about&amp;nbsp;networking.&lt;/p&gt;
&lt;p&gt;Wait&amp;#8230;  wait&amp;#8230;  maybe I know &lt;em&gt;one&lt;/em&gt;&amp;nbsp;thing.&lt;/p&gt;


&lt;h2 id="doom"&gt;&lt;a class="toclink" href="#doom"&gt;Doom&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Surprise!  The thing I know is, roughly, how multiplayer Doom&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;Doom is 100% deterministic.  Its &lt;a href="https://doomwiki.org/wiki/Pseudorandom_number_generator"&gt;random number generator&lt;/a&gt; is really a list of shuffled values; each request for a random number produces the next value in the list.  There is no seed, either; a game always begins at the first value in the list.  Thus, if you play the game twice with &lt;em&gt;exactly identical&lt;/em&gt; input, you&amp;#8217;ll see exactly the same playthrough: same damage, same monster behavior, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s exactly what a Doom demo is: a file containing a recording of player input.  To play back a demo, Doom runs the game as normal, except that it reads input from a file rather than the&amp;nbsp;keyboard.&lt;/p&gt;
&lt;p&gt;Multiplayer works the same way.  Rather than passing around the entirety of the world state, Doom sends the player&amp;#8217;s input to all the other players.  Once a node has received input from every connected player, it advances the world by one tic.  There&amp;#8217;s no client or server; every peer talks to every other&amp;nbsp;peer.&lt;/p&gt;
&lt;p&gt;You can &lt;a href="https://github.com/id-Software/DOOM/blob/master/linuxdoom-1.10/d_net.c"&gt;read the code&lt;/a&gt; if you want to, but at a glance, I don&amp;#8217;t think there&amp;#8217;s anything too surprising here.  Only sending input means there&amp;#8217;s not that much to send, and the receiving end just has to queue up packets from every peer and then play them back once it&amp;#8217;s heard from everyone.  The underlying transport was pluggable (this being the days before we&amp;#8217;d even standardized on &lt;span class="caps"&gt;IP&lt;/span&gt;), which complicated things a bit, but the Unix port that&amp;#8217;s on GitHub just uses &lt;span class="caps"&gt;UDP&lt;/span&gt;.  The Doom Wiki has &lt;a href="https://doomwiki.org/wiki/Doom_networking_component"&gt;some further detail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This approach is very clever and has a few significant advantages.  Bandwidth requirements are fairly low, which is important if it happens to be 1993.  Bandwidth and processing requirements are also completely unaffected by the size of the map, since map state never touches the&amp;nbsp;network.  &lt;/p&gt;
&lt;p&gt;Unfortunately, it has some drawbacks as well.  The biggest is that, well, sometimes you &lt;em&gt;want&lt;/em&gt; to get the world state back in sync.  What if a player drops and wants to reconnect?  Everyone has to quit and reconnect to one another.  What if an extra player wants to join in?  It&amp;#8217;s possible to load a saved game in multiplayer, but because the saved game won&amp;#8217;t have an actor for the new player, you can&amp;#8217;t really load it; you&amp;#8217;d have to start fresh from the beginning of a&amp;nbsp;map.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s fairly fundamental that Doom allows you to save your game at any moment&amp;#8230;  but there&amp;#8217;s no way to load in the middle of a network game.  Everyone has to quit and restart the game, loading the right save file from the command line.  And if some players load the wrong save file&amp;#8230;  I&amp;#8217;m not actually sure what happens!  I&amp;#8217;ve seen ZDoom detect the inconsistency and refuse to start the game, but I suspect that in vanilla Doom, players would have mismatched world states and their movements would look like nonsense when played back in each others&amp;#8217;&amp;nbsp;worlds.&lt;/p&gt;
&lt;p&gt;Ah, yes.  Having the entire game state be generated independently by each peer leads to another big&amp;nbsp;problem.&lt;/p&gt;
&lt;h2 id="cheating"&gt;&lt;a class="toclink" href="#cheating"&gt;Cheating&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Maybe this wasn&amp;#8217;t as big a deal with Doom, where you&amp;#8217;d probably be playing with friends or acquaintances (&lt;a href="https://doomwiki.org/wiki/Broadcast_packet_meltdown"&gt;or coworkers&lt;/a&gt;).  Modern games have matchmaking that pits you against &lt;em&gt;strangers&lt;/em&gt;, and the trouble with strangers is that a nontrivial number of them are &lt;em&gt;assholes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Doom is a very moddable game, and it doesn&amp;#8217;t check that everyone is using exactly the same game data.  As long as you don&amp;#8217;t change anything that would alter the shape of the world or change the number of &lt;span class="caps"&gt;RNG&lt;/span&gt; rolls (since those would completely desynchronize you from other players), you can modify your own game however you like, and no one will be the wiser.  For example, you might change the light level in a dark map, so you can see more easily than the other players.  Lighting doesn&amp;#8217;t affect the game, only how its drawn, and it doesn&amp;#8217;t go over the network, so no one would be the&amp;nbsp;wiser.&lt;/p&gt;
&lt;p&gt;Or you could alter the executable itself!  It knows everything about the game state, including the health and loadout of the other players; altering it to show you this information would give you an advantage.  Also, all that&amp;#8217;s sent is input; no one said the input had to come from a human.  The game knows where all the other players are, so you could modify it to generate the right input to automatically aim at them.  Congratulations; you&amp;#8217;ve invented the &lt;em&gt;aimbot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know how you can reliably fix these issues.  There seems to be an entire underground ecosystem built around playing cat and mouse with game developers.  Perhaps the most infamous example is World of Warcraft, where people farm in-game gold as automatically as possible to sell to other players for real-world&amp;nbsp;cash.&lt;/p&gt;
&lt;p&gt;Egregious cheating in multiplayer really gets on my nerves; I couldn&amp;#8217;t bear knowing that it was rampant in a game I&amp;#8217;d made.  So I will probably not be working on anything with random matchmaking anytime&amp;nbsp;soon.&lt;/p&gt;
&lt;h2 id="starbound"&gt;&lt;a class="toclink" href="#starbound"&gt;Starbound&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s jump to something a little more concrete and&amp;nbsp;modern.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://playstarbound.com/"&gt;Starbound&lt;/a&gt; is a procedurally generated universe exploration game — like Terraria in space.  Or, if you prefer, like Minecraft in space and also flat.  Notably, it supports multiplayer, using the more familiar client/server approach.  The server uses the same data files as single-player, but it runs as a separate process; if you want to run a server on your own machine, you run the server and then connect to &lt;code&gt;localhost&lt;/code&gt; with the&amp;nbsp;client.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve run a server before, but that doesn&amp;#8217;t tell me anything about how it &lt;em&gt;works&lt;/em&gt;.  Starbound is an interesting example because of the existence of &lt;a href="https://github.com/StarryPy/StarryPy3k"&gt;StarryPy&lt;/a&gt; — a proxy server that can add some interesting extra behavior by intercepting packets going to and from the real&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;That means StarryPy necessarily knows what the protocol &lt;em&gt;looks like&lt;/em&gt;, and perhaps we can glean some insights by poking around in it.  Right off the bat there&amp;#8217;s a &lt;a href="https://github.com/StarryPy/StarryPy3k/blob/7d939f0bb5878195bca45aa3f830254c7628239e/packets.py"&gt;list of all the packet types&lt;/a&gt; and &lt;a href="https://github.com/StarryPy/StarryPy3k/blob/7d939f0bb5878195bca45aa3f830254c7628239e/data_parser.py#L641"&gt;rough shapes of their data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I modded StarryPy to print out every single decoded packet it received (from either the client or the server), then connected and immediately disconnected.  (Note that these aren&amp;#8217;t necessarily &lt;span class="caps"&gt;TCP&lt;/span&gt; packets; they&amp;#8217;re just single messages in the Starbound protocol.)  Here is my quick interpretation of what&amp;nbsp;happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The client and server briefly negotiate a connection.  The password, if any, is sent with a challenge and&amp;nbsp;response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client sends a full description of its &amp;#8220;ship world&amp;#8221; — the player&amp;#8217;s ship, which they take with them to other servers.  The server sends a partial description of the planet the player is either on, or&amp;nbsp;orbiting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From here, the server and client mostly communicate world state in the form of small delta updates.  StarryPy doesn&amp;#8217;t delve into the exact format here, unfortunately.  The world basically freezes around you during a multiplayer lag spike, though, so it&amp;#8217;s safe to assume that the vast bulk of game simulation happens server-side, and the effects are broadcast to&amp;nbsp;clients.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The protocol has specific message types for various player actions: damaging tiles, dropping items, connecting wires, collecting liquids, moving your ship, and so on.  So the basic model is that the player can attempt to do stuff with the chunk of the world they&amp;#8217;re looking at, and they&amp;#8217;ll get a reaction whenever the server gets back to&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;(I&amp;#8217;m dimly aware that some subset of object interactions can happen client-side, but I don&amp;#8217;t know exactly which ones.  The implications for custom scripted objects are&amp;#8230;  interesting.  Actually, those are slightly hellish in general; Starbound is very moddable, but last I checked it has no way to send mods from the server to the client or anything similar, and by default the server doesn&amp;#8217;t even enforce that everyone&amp;#8217;s using the same set of mods&amp;#8230;  so it&amp;#8217;s possible that you&amp;#8217;ll have an object on your ship that&amp;#8217;s only provided by a mod you have but the server lacks, and then &lt;em&gt;who knows&lt;/em&gt; what&amp;nbsp;happens.)&lt;/p&gt;
&lt;h2 id="irc"&gt;&lt;a class="toclink" href="#irc"&gt;IRC&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hang on, this isn&amp;#8217;t a video game at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Starbound&amp;#8217;s &amp;#8220;fire and forget&amp;#8221; approach reminds me a lot of &lt;span class="caps"&gt;IRC&lt;/span&gt; — a protocol I&amp;#8217;ve even implemented, a little bit, kinda.  &lt;span class="caps"&gt;IRC&lt;/span&gt; doesn&amp;#8217;t have any way to match the messages you send to the responses you get back, and success is &lt;em&gt;silent&lt;/em&gt; for some kinds of messages, so it&amp;#8217;s impossible (in the general case) to know what caused an error.  The most obvious fix for this would be to attach a message id to messages sent out by the client, and include the same id on responses from the&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;It doesn&amp;#8217;t look like Starbound has message ids or any other solution to this problem — though StarryPy doesn&amp;#8217;t document the protocol well enough for me to be sure.  The server just sends a stream of stuff it thinks is important, and when it gets a request from the client, it queues up a response to that as well.  It&amp;#8217;s &lt;span class="caps"&gt;TCP&lt;/span&gt;, so the client should get all the right messages, eventually.  Some of them might be slightly out of order depending on the order the client does stuff, but that&amp;#8217;s not a big deal; anyway, the server knows the canonical&amp;nbsp;state.&lt;/p&gt;
&lt;h2 id="some-thoughts"&gt;&lt;a class="toclink" href="#some-thoughts"&gt;Some&amp;nbsp;thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I bring up &lt;span class="caps"&gt;IRC&lt;/span&gt; because I&amp;#8217;m kind of at the limit of things that I know.  But one of those things is that &lt;span class="caps"&gt;IRC&lt;/span&gt; is simultaneously very rickety and wildly successful: it&amp;#8217;s a decade older than Google and still in use.  (Some recent offerings are starting to eat its lunch, but those are really because &lt;em&gt;clients&lt;/em&gt; are inaccessible to new users and the protocol hasn&amp;#8217;t evolved much.  The problems with the fundamental design of the protocol are only obvious to server and client&amp;nbsp;authors.)&lt;/p&gt;
&lt;p&gt;Doom&amp;#8217;s cheery assumption that the game will play out the same way for every player feels similarly rickety.  Obviously it &lt;em&gt;works&lt;/em&gt; — well enough that you can go play multiplayer Doom with exactly the same approach right now, 24 years later — but for something as complex as an &lt;span class="caps"&gt;FPS&lt;/span&gt; it really doesn&amp;#8217;t feel like it&amp;nbsp;should.&lt;/p&gt;
&lt;p&gt;So while I don&amp;#8217;t have enough experience &lt;em&gt;writing&lt;/em&gt; multiplayer games to give you a run-down of how to do it, I think the lesson here is that you can get pretty far with simple ideas.  Maybe your game isn&amp;#8217;t deterministic like Doom — although there&amp;#8217;s no reason it &lt;em&gt;couldn&amp;#8217;t&lt;/em&gt; be — but you probably still have to save the game, or at least restore the state of the world on death/loss/restart, right?  There you go: you already have a fragment of a concept of entity state outside the actual entities.  Codify that, stick it on the network, and see what&amp;nbsp;happens.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know if I&amp;#8217;ll be doing any significant multiplayer development myself; I don&amp;#8217;t even play many multiplayer games.  But I&amp;#8217;d always assumed it would be a nigh-impossible feat of architectural engineering, and I&amp;#8217;m starting to think that maybe it&amp;#8217;s no more difficult than anything else in game dev.  Easy to fudge, hard to do well, impossible to truly get right so give up that train of thought right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Also now I am definitely thinking about how a multiplayer puzzle-platformer would&amp;nbsp;work.&lt;/p&gt;</content><category term="tech"></category><category term="gamedev"></category><category term="patreon"></category></entry><entry><title>Why LÖVE?</title><link href="https://eev.ee/blog/2017/03/23/why-love/" rel="alternate"></link><published>2017-03-23T00:23:00-07:00</published><updated>2017-03-23T00:23:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-03-23:/blog/2017/03/23/why-love/</id><summary type="html">&lt;p&gt;This month, &lt;a href="https://www.patreon.com/user/creators?u=199476"&gt;IndustrialRobot&lt;/a&gt; asked my opinion of &lt;span class="caps"&gt;FOSS&lt;/span&gt; game engines — or, more specifically, why I chose&amp;nbsp;LÖVE.&lt;/p&gt;
&lt;p&gt;The short version is that it sort of landed in my lap, I tried it, I liked it, and I don&amp;#8217;t know of anything I might like better.  The long version&amp;nbsp;is&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This month, &lt;a href="https://www.patreon.com/user/creators?u=199476"&gt;IndustrialRobot&lt;/a&gt; asked my opinion of &lt;span class="caps"&gt;FOSS&lt;/span&gt; game engines — or, more specifically, why I chose&amp;nbsp;LÖVE.&lt;/p&gt;
&lt;p&gt;The short version is that it sort of landed in my lap, I tried it, I liked it, and I don&amp;#8217;t know of anything I might like better.  The long version&amp;nbsp;is&amp;#8230;&lt;/p&gt;


&lt;h2 id="love"&gt;&lt;a class="toclink" href="#love"&gt;LÖVE&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;d already made a couple of games (&lt;a href="https://eevee.itch.io/under-construction"&gt;Under Construction&lt;/a&gt;, &lt;a href="https://eevee.itch.io/isaacs-descent"&gt;Isaac&amp;#8217;s Descent&lt;/a&gt;) for the &lt;a href="http://www.lexaloffle.com/pico-8.php"&gt;&lt;span class="caps"&gt;PICO&lt;/span&gt;-8&lt;/a&gt;, a fantasy 8-bit-ish console powered by Lua.  I&amp;#8217;ve got a few strong criticisms of Lua, but we&amp;#8217;ve formed an uneasy truce.  It makes a better JavaScript than JavaScript, at&amp;nbsp;least.&lt;/p&gt;
&lt;p&gt;Coming off of those, I was pretty familiar with Lua, so I was already naturally gravitating towards LÖVE.  I also knew one or two people who&amp;#8217;d used it before, which helped.  And it had the faint ring of familiarity, which I&amp;#8217;ve since realized is only because I&amp;#8217;d once seen a trailer for &lt;a href="http://www.quelsolaar.com/love/"&gt;Love&lt;/a&gt;, the procedurally-generated adventure &lt;span class="caps"&gt;MMO&lt;/span&gt; with zero relationship to the LÖVE&amp;nbsp;engine.&lt;/p&gt;
&lt;p&gt;Hmm.  Perhaps not the most compelling&amp;nbsp;criteria.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;stayed&lt;/em&gt; with LÖVE because it hits a very nice sweet spot for me.  It&amp;#8217;s not a framework or anything, just an engine.  Its &lt;span class="caps"&gt;API&lt;/span&gt; has tidy coverage of use cases at every tier of complexity, if that makes sense?  It can do the obvious basics, like drawing immediate-mode-style circles or sprites, but it can &lt;em&gt;also&lt;/em&gt; batch together those sprite draws for a ridiculous speedup.  Without having to know or care or see any details of OpenGL.  If you &lt;em&gt;do&lt;/em&gt; care about OpenGL, that&amp;#8217;s cool: you can write your own shaders, too.  But you don&amp;#8217;t have&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;LÖVE also has some nice touches like using a virtual filesystem that overlays the game itself with the player&amp;#8217;s save directory (which is created for you).  That means games are automatically moddable!  You can create whatever new assets you want and drop them in your save directory; they&amp;#8217;ll replace existing assets of the same name and be picked up by a directory scan.  It&amp;#8217;s a simple idea that eliminates a whole class of dumb problem I don&amp;#8217;t want to think about — where &lt;em&gt;do&lt;/em&gt; I put save data? — and at the same time opens the door to some really interesting&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;Distribution takes a similar approach.  You can just concatenate a zipped up project to a LÖVE binary and distribute that.  Nothing to build, and games automatically make their source and assets available.  (That&amp;#8217;s a perk for &lt;em&gt;me&lt;/em&gt;; it may not be for you.)  You can also point LÖVE at a separate zip file, or even a directory; the latter effectively gives you development&amp;nbsp;mode.&lt;/p&gt;
&lt;p&gt;Overall, it&amp;#8217;s pretty well thought-out and simple to get into without being opinionated, but with a lot of hidden depth.  I dig that kind of approach.  My one major criticism is that the &lt;span class="caps"&gt;API&lt;/span&gt; is neither forwards- nor backwards-compatible.  My games work on 0.10.2, not 0.9.x (or even 0.10.1), and I can tell from the dev log that they won&amp;#8217;t work on 0.11.0 either.  It&amp;#8217;s unfortunate, but willingness to churn is probably how LÖVE ended up with as nice an &lt;span class="caps"&gt;API&lt;/span&gt; as it has.  Maybe things will calm down whenever it hits&amp;nbsp;1.0.&lt;/p&gt;
&lt;p&gt;Bearing all this in mind, let&amp;#8217;s look at the&amp;nbsp;competition.&lt;/p&gt;
&lt;h2 id="pygame"&gt;&lt;a class="toclink" href="#pygame"&gt;pygame&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m a huge Python dweeb, so pygame seems like an obvious&amp;nbsp;choice.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve never actually tried it.  One of the biggest turn-offs for me is &lt;a href="https://www.pygame.org/docs/"&gt;the website&lt;/a&gt;, which is admittedly frivolous to care about, but prominent use of lime green sets off alarm bells in my&amp;nbsp;head.&lt;/p&gt;
&lt;p&gt;Every time I&amp;#8217;ve looked into pygame, it&amp;#8217;s felt almost abandoned.  I think part of this is that the website has always been using a very generic &lt;span class="caps"&gt;CMS&lt;/span&gt;, where everything is &amp;#8220;nodes&amp;#8221; and there are tons of superfluous features that don&amp;#8217;t seem to belong.  Those setups always feel big and empty and vaguely abstract to me.  I see there&amp;#8217;s now a site revamp in progress, but it&amp;#8217;s basically made out of stock Bootstrap, which gives exactly the same impression.  I feel like any link I click has a 50–50 chance of being broken or leading to a page that&amp;#8217;s been outdated for ten&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;None of this has anything to do with the quality of pygame itself, nor with any concrete facts.  The way pygame presents itself just inspires irrational feelings of &amp;#8220;if you use this, your project is already&amp;nbsp;obsolete&amp;#8221;.&lt;/p&gt;
&lt;p&gt;It doesn&amp;#8217;t help that I&amp;#8217;ve been up to my eyeballs in Python for years, and I&amp;#8217;ve seen plenty of people &lt;em&gt;suggest&lt;/em&gt; using pygame for game development, yet I&amp;#8217;ve never known anyone who has actually &lt;em&gt;used&lt;/em&gt; pygame.  I can&amp;#8217;t name a single game made with pygame.  At least I have an acquaintance who&amp;#8217;s made a bunch of Ludum Dare games with LÖVE; that&amp;#8217;s infinitely&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m also wary of distributing Python software — I know there are lots of tools for doing this, and I&amp;#8217;ve seen it done, and many moons ago I even used Python software on a Windows machine without Python installed.  But I still expect it to be a pain in the ass in some surprising&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;I know I&amp;#8217;m being massively unfair here, and I should really give it a chance sometime.  I just, um, don&amp;#8217;t want&amp;nbsp;to.&lt;/p&gt;
&lt;h2 id="cocos2d"&gt;&lt;a class="toclink" href="#cocos2d"&gt;cocos2d&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No, not the iPhone&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s actually one of the biggest problems with cocos2d: it&amp;#8217;s the name of both a Python library &lt;em&gt;and&lt;/em&gt; a vastly more popular iOS library.  Have fun Googling for solutions to problems!  Oh, and the APIs are almost completely different.  And the Python version is much skimpier.  And very nearly abandoned, having received only two point releases since the last minor release three years&amp;nbsp;ago.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;have&lt;/em&gt; used cocos2d before, on a stub of a game that was abandoned ages ago.  I enjoyed it enough, but something about it always felt&amp;#8230;  clumsy, like everything I tried to do took more effort than necessary.  I don&amp;#8217;t know if it&amp;#8217;s because I was still figuring out game development, because I had to learn cocos&amp;#8217;s little framework (versus writing my own scaffolding in LÖVE), because the game I was working on was a bit nebulous, or because something about the design of cocos itself is wrong.  I &lt;em&gt;do&lt;/em&gt; remember that I had to just about dip into bare vertex-buffer-style OpenGL just to draw lines on the screen for debugging purposes, which I found incredibly annoying.  (Don&amp;#8217;t tell me it&amp;#8217;s faster.  I know.  If I thought performance were a grave concern, I probably wouldn&amp;#8217;t be writing the thing in Python in the first&amp;nbsp;place.)&lt;/p&gt;
&lt;p&gt;I did borrow some of cocos2d&amp;#8217;s ideas for Under Construction and later games, so I don&amp;#8217;t regret using it or anything.  It has some good ideas, and it has some handy touches like built-in vector and &lt;span class="caps"&gt;AABB&lt;/span&gt; types.  I just wasn&amp;#8217;t charmed enough to try using it again.&amp;nbsp;(Yet?)&lt;/p&gt;
&lt;h2 id="gamemaker"&gt;&lt;a class="toclink" href="#gamemaker"&gt;GameMaker&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Closed-source.  Windows only.&amp;nbsp;Eh.&lt;/p&gt;
&lt;p&gt;Their website says &amp;#8220;no barriers to entry&amp;#8221; and &amp;#8220;making games is for everyone&amp;#8221;.  Uh&amp;nbsp;huh.&lt;/p&gt;
&lt;h2 id="unity"&gt;&lt;a class="toclink" href="#unity"&gt;Unity&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ah, yeah, that thing everyone&amp;nbsp;uses.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t have strong opinions of Unity.  It&amp;#8217;s closed-source, but it has &lt;em&gt;some&lt;/em&gt; open source parts, so at least they care a bit and engage with the wider development&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s based on Mono, which gives me pause.  Obviously Mono is open source, and I think large chunks of .&lt;span class="caps"&gt;NET&lt;/span&gt; itself are now too, but I&amp;#8217;m still very wary of the .&lt;span class="caps"&gt;NET&lt;/span&gt; ecosystem.  I don&amp;#8217;t have any concrete reason for this; I think living through the &lt;span class="caps"&gt;IE6&lt;/span&gt; era left me deeply skeptical of anything developer-oriented that has Microsoft fingerprints on it.  I&amp;#8217;m sure their tools are very nice — plenty of people swear by Visual Studio — but I don&amp;#8217;t trust them to actually give a damn about not-Windows.  Homebrew software that can&amp;#8217;t work on Mono just because it makes a bunch of DirectX calls has not left me particularly impressed with the cross-platform support,&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;But more importantly: Unity for Linux is still experimental, or beta, or something?  I think?  The actual download page still claims you need Windows 7 or &lt;span class="caps"&gt;OS&lt;/span&gt; X 10.8, and the Linux builds are only available via a &lt;em&gt;forum thread&lt;/em&gt;, which doesn&amp;#8217;t scream &amp;#8220;stable&amp;#8221; to me.  The thread claims it&amp;#8217;s supported, but&amp;#8230;  it&amp;#8217;s still only in a thread, two and a half years after it was first released.  I don&amp;#8217;t really want to start getting into a huge platform for the first time when the maintainers aren&amp;#8217;t confident enough of their Linux port to actually mention it&amp;nbsp;anywhere.&lt;/p&gt;
&lt;h2 id="various-web-things"&gt;&lt;a class="toclink" href="#various-web-things"&gt;Various web&amp;nbsp;things&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are plenty of these nowadays, like Pixi and&amp;#8230;  um&amp;#8230;  others.  The distribution story is obviously pretty nice, too: just have a web browser.  I&amp;#8217;ve been meaning to try one&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;I only haven&amp;#8217;t because, well, JavaScript.  I don&amp;#8217;t particularly enjoy JavaScript.  It doesn&amp;#8217;t even have a module story yet, unless you tack a bunch of third-party stuff onto it, and I don&amp;#8217;t want the first step of writing a game to be &amp;#8220;fix the language I&amp;#8217;m writing it in&amp;#8221;.  Also I&amp;#8217;ve written more than enough JavaScript in my life already and would like to do something &lt;em&gt;not&lt;/em&gt; web-based for a&amp;nbsp;change.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also something about JavaScript that &lt;em&gt;feels&lt;/em&gt; clumsy to debug, even though that obviously makes no sense, since every web browser now has gobs of interactive debugging tools baked right in.  Maybe it&amp;#8217;s that everything is built out of async and promises and event handlers, and those are all still a bit painful to inspect.  Or maybe my soul is weary from trying to use debuggers on production sites with minified&amp;nbsp;libraries.&lt;/p&gt;
&lt;h2 id="writing-from-scratch"&gt;&lt;a class="toclink" href="#writing-from-scratch"&gt;Writing from&amp;nbsp;scratch&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ugh.&lt;/p&gt;
&lt;p&gt;I know of &lt;span class="caps"&gt;SFML&lt;/span&gt;, and Allegro, and &lt;span class="caps"&gt;SDL&lt;/span&gt;, and various other libraries somewhere between &amp;#8220;game engine&amp;#8221; and &amp;#8220;generic media handling&amp;#8221;.  I could definitely make something happen with one of them.  I could bind to them from Python if I wanted.  Or Rust.  Or, hell,&amp;nbsp;Lua.&lt;/p&gt;
&lt;p&gt;But I don&amp;#8217;t want to?  That sounds like I&amp;#8217;d spend a bunch of time writing plumbing and not so much time writing game.  I mean, yes, okay, I wrote my own physics system even though LÖVE has box2d bindings built in.  But I &lt;em&gt;chose&lt;/em&gt; to do that because I thought the result would be better, not because I had to invent the universe just to get off the&amp;nbsp;ground.&lt;/p&gt;
&lt;p&gt;This is also the approach that would make me care the most about distribution, possibly even in the form of &lt;em&gt;compiling stuff&lt;/em&gt;, which I do not&amp;nbsp;enjoy.&lt;/p&gt;
&lt;h2 id="in-conclusion"&gt;&lt;a class="toclink" href="#in-conclusion"&gt;In&amp;nbsp;conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My reasoning is probably not as, er, directly rational as readers may have&amp;nbsp;hoped.&lt;/p&gt;
&lt;p&gt;In my defense: there were a lot of &lt;em&gt;possible&lt;/em&gt; choices here.  There are dozens of hyperpopular game engines alone, and far greater numbers of less popular&amp;nbsp;one-offs.&lt;/p&gt;
&lt;p&gt;Now, there are two situations I want to avoid more than anything else&amp;nbsp;here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spending all of my time looking at game engines and none of my time actually making a&amp;nbsp;game.&lt;/li&gt;
&lt;li&gt;Getting halfway through a game only to run into a brick wall, because the chosen engine simply cannot do some very straightforward thing I&amp;nbsp;want.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I don&amp;#8217;t want to get stuck with a dud of an engine, but I also don&amp;#8217;t want to spend inordinate amounts of time evaluating dozens of candidates in excruciating detail.  (I have enough trouble just deciding what brand of &lt;span class="caps"&gt;RAM&lt;/span&gt; to buy.)  The solution is to prune &lt;em&gt;extremely aggressively&lt;/em&gt;, discarding anything that has even a &lt;em&gt;whiff&lt;/em&gt; of possible inconvenience later.  Worst case, I run out of engines and just start again, being less picky on the second&amp;nbsp;round.&lt;/p&gt;
&lt;p&gt;pygame?  Unclear how much it&amp;#8217;s still maintained.&amp;nbsp;Pass.&lt;/p&gt;
&lt;p&gt;cocos2d?  Not confident about distribution.&amp;nbsp;Pass.&lt;/p&gt;
&lt;p&gt;Unity?  In beta.&amp;nbsp;Pass.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;XNA&lt;/span&gt;?  Eh on Microsoft.  Also apparently discontinued four years ago.&amp;nbsp;Pass.&lt;/p&gt;
&lt;p&gt;GameMaker?  Don&amp;#8217;t want to rely on Wine.&amp;nbsp;Pass.&lt;/p&gt;
&lt;p&gt;When all was said and done, not too many contenders remained!  So I gave LÖVE a whirl and I liked it well enough.  It&amp;#8217;s entirely possible I&amp;#8217;ve been unfair to one of the things I listed above, or that there&amp;#8217;s some amazing game thing I&amp;#8217;ve never even heard of.  I definitely don&amp;#8217;t claim that LÖVE is the best possible tool for all problems, or that everyone should use it — but &lt;em&gt;I&amp;#8217;m&lt;/em&gt; enjoying it and have successfully made things with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I might write a followup to this sometime that comes from the other direction, listing game engines and why you might &lt;em&gt;want&lt;/em&gt; to use them, rather than why I weeded them&amp;nbsp;out.&lt;/p&gt;</content><category term="tech"></category><category term="gamedev"></category><category term="patreon"></category></entry><entry><title>Utopia</title><link href="https://eev.ee/blog/2017/03/08/utopia/" rel="alternate"></link><published>2017-03-08T19:40:00-08:00</published><updated>2017-03-08T19:40:00-08:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-03-08:/blog/2017/03/08/utopia/</id><summary type="html">&lt;p&gt;It&amp;#8217;s been a while, but someone&amp;#8217;s back on the &lt;a href="https://www.patreon.com/eevee"&gt;Patreon&lt;/a&gt; blog topic tier!  &lt;a href="https://www.patreon.com/user/creators?u=199476"&gt;IndustrialRobot&lt;/a&gt;&amp;nbsp;asks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does your personal utopia look like? Do you think we (as mankind) can achieve it? Why/why&amp;nbsp;not?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hm.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;It&amp;#8217;s been a while, but someone&amp;#8217;s back on the &lt;a href="https://www.patreon.com/eevee"&gt;Patreon&lt;/a&gt; blog topic tier!  &lt;a href="https://www.patreon.com/user/creators?u=199476"&gt;IndustrialRobot&lt;/a&gt;&amp;nbsp;asks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does your personal utopia look like? Do you think we (as mankind) can achieve it? Why/why&amp;nbsp;not?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hm.&lt;/p&gt;


&lt;p&gt;I spent the month up to my eyeballs in a jam game, but this question was in the back of my mind a lot.  I could use it as a springboard to opine about &lt;em&gt;anything&lt;/em&gt;, especially in the current climate: politics, religion, nationalism, war, economics, etc., etc.  But all of that has been done to death by people who actually know what they&amp;#8217;re talking&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;The question does say &amp;#8220;personal&amp;#8221;.  So in a less abstract sense&amp;#8230;  what do I want the world to look&amp;nbsp;like?&lt;/p&gt;
&lt;p&gt;Mostly, I want everyone to have the freedom to &lt;em&gt;make things&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been having a surprisingly hard time writing the rest of this without veering directly into the ravines of &amp;#8220;basic income is good&amp;#8221; and &amp;#8220;maybe capitalism is suboptimal&amp;#8221;.  Those are true, but not really the tone I want here, and anyway they&amp;#8217;ve been done to death by better writers than I.  I&amp;#8217;ve talked this out with Mel a few times, and it sounds much better aloud, so I&amp;#8217;m going to try to drop my Blog Voice and just&amp;#8230;&amp;nbsp;talk.&lt;/p&gt;
&lt;p&gt;*ahem*&lt;/p&gt;
&lt;h2 id="art-versus-business"&gt;&lt;a class="toclink" href="#art-versus-business"&gt;Art versus&amp;nbsp;business&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, art.  Art is&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m construing &amp;#8220;art&amp;#8221; very broadly here.  More broadly than &amp;#8220;media&amp;#8221;, too.  I&amp;#8217;m including &lt;a href="https://www.patreon.com/simonegiertz"&gt;shitty robots&lt;/a&gt;, &lt;a href="https://twitter.com/gamecolorwheel"&gt;weird Twitter almost-bots&lt;/a&gt;, &lt;a href="https://twitter.com/ApprovedNews6"&gt;weird Twitter non-bots&lt;/a&gt;, even a great deal of open source software.  Anything that even remotely resembles creative work — driven perhaps by curiosity, perhaps by practicality, but always by a soul bursting with ideas and a palpable &lt;em&gt;need&lt;/em&gt; to get them&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Western culture thrives on art.  Most culture thrives on art.  I&amp;#8217;m not remotely qualified to defend this, but I suspect you could &lt;em&gt;define&lt;/em&gt; culture in terms of art.  It&amp;#8217;s pretty&amp;nbsp;important.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;d think this would be reflected in how we discuss art, but often&amp;#8230;  it&amp;#8217;s not.  Tell me how often you&amp;#8217;ve heard some of these&amp;nbsp;gems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I could do&amp;nbsp;that.&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;My eight-year-old kid could do&amp;nbsp;that.&amp;#8221;&lt;/li&gt;
&lt;li&gt;Jokes about the worthlessness of liberal arts&amp;nbsp;degrees.&lt;/li&gt;
&lt;li&gt;Jokes about people trying to write novels in their spare time, the subtext being that only dreamy losers try to write novels, or&amp;nbsp;something.&lt;/li&gt;
&lt;li&gt;The caricature of a hippie working on a screenplay at&amp;nbsp;Starbucks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh, and then there was the guy who made a bot to scrape tons of art from artists who were using Patreon as a paywall — and a primary source of income.  The justification was that artists shouldn&amp;#8217;t expect to make a living off of, er, &lt;em&gt;doing art&lt;/em&gt;, and should instead get &amp;#8220;real&amp;nbsp;jobs&amp;#8221;.&lt;/p&gt;
&lt;p&gt;I do wonder.  How many of the people repeating these sentiments listen to music, or go to movies, or bought an iPhone because it&amp;#8217;s prettier?  Are those things not art that took real work to create?  Is creating those things not a &amp;#8220;real&amp;nbsp;job&amp;#8221;?&lt;/p&gt;
&lt;p&gt;Perhaps a &amp;#8220;real job&amp;#8221; has to be one that&amp;#8217;s not enjoyable, not a passion?  And yet I can&amp;#8217;t recall ever hearing anyone say that Taylor Swift should get a &amp;#8220;real job&amp;#8221;.  Or that, say, pro football players should get &amp;#8220;real jobs&amp;#8221;.  What do pro football players even &lt;em&gt;do&lt;/em&gt;?  They play a game a few times a year, and somehow this drives the flow of unimaginable amounts of money.  We dress it up in the more serious-sounding &amp;#8220;sport&amp;#8221;, but it&amp;#8217;s a game in the same general genre as hopscotch.  There&amp;#8217;s nothing wrong with that, but somehow it gets virtually none of the scorn that art&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;Another possible explanation is America&amp;#8217;s partly-Christian, partly-capitalist attitude that you deserve exactly whatever you happen to have at the moment.  (Whereas &lt;em&gt;I&lt;/em&gt; deserve much more and will be getting it any day now.)  Rich people are rich because they earned it, and we don&amp;#8217;t question that further.  Poor people are poor because they failed to earn it, and we don&amp;#8217;t question that further, either.  To do so would suggest that the system is somehow unfair, and hard work does not perfectly correlate with any particular measure of&amp;nbsp;success.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sure that factors in, but it&amp;#8217;s not &lt;em&gt;quite&lt;/em&gt; satisfying: I&amp;#8217;ve also seen a good deal of spite aimed at people who are making a fairly decent chunk through Patreon or similar.  Something is&amp;nbsp;missing.&lt;/p&gt;
&lt;p&gt;I thought, at first, that the key might be the American worship of &lt;em&gt;work&lt;/em&gt;.  Work is an inherent virtue.  Politicians run entire campaigns based on how many jobs they&amp;#8217;re going to create.  Notably, no one seems too bothered about whether the work is &lt;em&gt;useful&lt;/em&gt;, as long as someone decided to pay you for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Finally I stumbled upon the key.  America doesn&amp;#8217;t actually worship work.  &lt;strong&gt;America worships &lt;em&gt;business&lt;/em&gt;.&lt;/strong&gt;  Business means a &lt;em&gt;company&lt;/em&gt; is deciding to pay you.  Business means legitimacy.  Business is what separates a hobby from a&amp;nbsp;career.&lt;/p&gt;
&lt;p&gt;And this presents a problem for&amp;nbsp;art.&lt;/p&gt;
&lt;p&gt;If you want to provide a service or sell a product, that&amp;#8217;ll be hard, but America will at least try to look like it supports you.  People are impressed that you&amp;#8217;re an entrepreneur, a small business owner.  Politicians will brag about policies made in your favor, whether or not they&amp;#8217;re stabbing you in the&amp;nbsp;back.&lt;/p&gt;
&lt;p&gt;Small businesses have a particular structure they can develop into.  You can divide work up.  You can have someone in sales, someone in accounting.  You can provide specifications and pay a factory to make your product.  You can defer all of the non-creative work to someone else, whether that means experts in a particular field or unskilled&amp;nbsp;labor.&lt;/p&gt;
&lt;p&gt;But if your work &lt;em&gt;is&lt;/em&gt; inherently creative, you can&amp;#8217;t do that.  The very thing you&amp;#8217;re making is &lt;em&gt;your&lt;/em&gt; idea in &lt;em&gt;your&lt;/em&gt; style, driven by &lt;em&gt;your&lt;/em&gt; experience.  This is not work that&amp;#8217;s readily parallelizable.  Even if you sell physical merchandise and register as an &lt;span class="caps"&gt;LLC&lt;/span&gt; and have a dedicated workspace and do various other formal business-y things, the basic structure will still &lt;em&gt;look&lt;/em&gt; the same: a single person doing the thing they enjoy.  A&amp;nbsp;hobbyist.&lt;/p&gt;
&lt;p&gt;Consider the bulleted list from above.  Those are all &lt;em&gt;individual&lt;/em&gt; painters or artists or authors or screenwriters.  The kinds of artists who earn respect without question are generally those managed by a &lt;em&gt;business&lt;/em&gt;, those with &lt;em&gt;branding&lt;/em&gt;: musical artists signed to labels, actors working for a studio.  Even football players are part of a tangle of&amp;nbsp;business.&lt;/p&gt;
&lt;p&gt;(This doesn&amp;#8217;t mean that business &lt;em&gt;automatically&lt;/em&gt; confers respect, of course; tech in particular is full of anecdotes about nerds&amp;#8217; disdain for people whose &lt;em&gt;jobs&lt;/em&gt; are design or &lt;span class="caps"&gt;UI&lt;/span&gt; or documentation or whathaveyou.  But a businessy look seems to be a significant&amp;nbsp;advantage.)&lt;/p&gt;
&lt;p&gt;It seems that although art is a large part of what informs culture, we have a culture that defines &amp;#8220;serious&amp;#8221; endeavors in such a way that independent art cannot possibly be&amp;nbsp;&amp;#8220;serious&amp;#8221;.&lt;/p&gt;
&lt;h2 id="art-versus-money"&gt;&lt;a class="toclink" href="#art-versus-money"&gt;Art versus&amp;nbsp;money&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Which wouldn&amp;#8217;t really matter at all, except that we also have a culture that expects you to pay for food and&amp;nbsp;whatnot.&lt;/p&gt;
&lt;p&gt;The reasoning isn&amp;#8217;t too outlandish.  Food is produced from a combination of work and resources.  In exchange for getting the food, you should give back some of your own work and&amp;nbsp;resources.&lt;/p&gt;
&lt;p&gt;Obviously this is riddled with subtle flaws, but let&amp;#8217;s roll with it for now and look at a case study.  Like, uh,&amp;nbsp;me!&lt;/p&gt;
&lt;p&gt;Mel and I built and released two games together in the six weeks between mid-January and the end of February.  Together, those games have made $1,000 in sales.  The sales trail off fairly quickly within a few days of release, so we&amp;#8217;ll call that the total gross for our&amp;nbsp;effort.&lt;/p&gt;
&lt;p&gt;I, dumb, having never actually sold anything before, thought this was phenomenal.  Then I had the misfortune of doing some&amp;nbsp;math.&lt;/p&gt;
&lt;p&gt;Itch takes at least 10%, so we&amp;#8217;re down to $900 net.  Divided over six weeks, that&amp;#8217;s $150 per week, before taxes — or $3.75 per hour if we&amp;#8217;d been working full&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Ah, but wait!  There are &lt;em&gt;two&lt;/em&gt; of us.  And we &lt;em&gt;hadn&amp;#8217;t&lt;/em&gt; been working full time — we&amp;#8217;d been working nearly &lt;em&gt;every waking hour&lt;/em&gt;, which is &lt;em&gt;at least&lt;/em&gt; twice &amp;#8220;full time&amp;#8221; hours.  So we really made less than a dollar an hour.  Even less than that, if you assume overtime&amp;nbsp;pay.&lt;/p&gt;
&lt;p&gt;From the perspective of capitalism, what is our incentive to do this?  Between us, we easily have over &lt;em&gt;thirty years&lt;/em&gt; of experience doing the things we do, and we spent weeks in crunch mode working on something, all to earn a small fraction of minimum wage.  Did we not contribute back our own work and resources?  Was our work worth so much less than waiting&amp;nbsp;tables?&lt;/p&gt;
&lt;p&gt;Waiting tables is a perfectly respectable way to earn a living, mind you.  Ah, but wait!  I&amp;#8217;ve accidentally done something clever here.  It is &lt;em&gt;generally expected&lt;/em&gt; that you tip your waiter, because waiters are underpaid by the business, because the business assumes they&amp;#8217;ll be tipped.  Not tipping is actually, almost impressively, one of the rudest things you can do.  And yet it&amp;#8217;s not expected that you tip an &lt;em&gt;artist&lt;/em&gt; whose work you enjoy, even though many such artists aren&amp;#8217;t being paid &lt;em&gt;at all&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, to be perfectly fair, both games were released for free.  Even a dollar an hour is infinitely more than the zero dollars I was expecting — and I&amp;#8217;m amazed and thankful we got as much as we did!  Thank you so much.  I bring it up not as a complaint, but as an armchair analysis of our systems of&amp;nbsp;incentives.&lt;/p&gt;
&lt;p&gt;People can take art for granted and whatever, yes, but there are several other factors at play here that hamper the ability for art to make&amp;nbsp;money.&lt;/p&gt;
&lt;p&gt;For one, &lt;strong&gt;I don&amp;#8217;t want to sell my work.&lt;/strong&gt;  I suspect a great deal of independent artists and writers and open source developers (!) feel the same way.  I create things because I want to, because &lt;em&gt;I have to&lt;/em&gt;, because I feel so compelled to create that having a non-creative full-time job was making me miserable.  I create things for the sake of expressing an idea.  Attaching a price tag to something reduces the number of people who&amp;#8217;ll experience it.  In other words, selling my work would make it &lt;em&gt;less valuable&lt;/em&gt; in my eyes, in much the same way that adding banner ads to my writing would make it less&amp;nbsp;valuable.&lt;/p&gt;
&lt;p&gt;And yet, I&amp;#8217;m &lt;em&gt;forced&lt;/em&gt; to sell something in some way, or else I&amp;#8217;ll have to find someone who wants me to do bland mechanical work on &lt;em&gt;their&lt;/em&gt; ideas in exchange for money&amp;#8230;  at the cost of producing sharply less work of my own.  Thank goodness for &lt;a href="https://patreon.com/eevee"&gt;Patreon&lt;/a&gt;, at&amp;nbsp;least.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also the reverse problem, in that &lt;strong&gt;people often don&amp;#8217;t want to buy creative work.&lt;/strong&gt;  Everyone does sometimes, but only sometimes.  It&amp;#8217;s kind of a weird situation, and the internet has exacerbated it&amp;nbsp;considerably.&lt;/p&gt;
&lt;p&gt;Consider that if I write a book and print it on paper, that costs something.  I have to pay for the paper and the ink and the use of someone else&amp;#8217;s printer.  If I want one more book, I have to pay a little more.  I can cut those costs pretty considerable by printing a lot of books at once, but each copy still has a price, a &lt;em&gt;marginal cost&lt;/em&gt;.  If I then gave those books away, I would be actively &lt;em&gt;losing&lt;/em&gt; money.  So I can pretty well justify charging for a&amp;nbsp;book.&lt;/p&gt;
&lt;p&gt;Along comes the internet.  Suddenly, copying costs nothing.  Not only does it cost nothing, but it&amp;#8217;s the &lt;em&gt;fundamental operation&lt;/em&gt;.  When you download a file or receive an email or visit a web site, you&amp;#8217;re really getting a &lt;em&gt;copy&lt;/em&gt;!  Even the process which ultimately shows it on your screen involves a number of copies.  This is so natural that we don&amp;#8217;t even call it copying, don&amp;#8217;t even &lt;em&gt;think&lt;/em&gt; of it as&amp;nbsp;copying.&lt;/p&gt;
&lt;p&gt;True, bandwidth does cost something, but the rate is virtually nothing until you start looking at very big numbers indeed.  I pay $60/mo for hosting this blog and a half dozen other sites — even that&amp;#8217;s way more than I need, honestly, but downgrading would be a hassle — and I get &lt;strong&gt;&lt;span class="caps"&gt;6TB&lt;/span&gt;&lt;/strong&gt; of bandwidth.  Even the longest of my posts haven&amp;#8217;t exceeded &lt;span class="caps"&gt;100KB&lt;/span&gt;.  A post could be read by &lt;em&gt;64 million people&lt;/em&gt; before I&amp;#8217;d start having a problem.  If that were the population of a country, it&amp;#8217;d be the 23rd largest in the world, between Italy and the &lt;span class="caps"&gt;UK&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;How, then, do I justify charging for my writing?  (Yes, I realize the irony in using my blog as an example in a post I&amp;#8217;m being paid $88 to&amp;nbsp;write.)&lt;/p&gt;
&lt;p&gt;Well, I do pour effort and expertise and a fraction of my finite lifetime into it.  But it doesn&amp;#8217;t &lt;em&gt;cost&lt;/em&gt; me anything tangible — I already had this hosting for something else! — and it&amp;#8217;s &lt;em&gt;easier&lt;/em&gt; all around to just put it&amp;nbsp;online.&lt;/p&gt;
&lt;p&gt;The same idea applies to a vast bulk of what&amp;#8217;s online, and now suddenly we have a bit of a problem.  Not only are we used to getting everything for free online, but we never bothered to build any sensible payment infrastructure.  You still have to pay for everything by typing in a cryptic sequence of numbers from a little physical plastic card, which will then give you a small loan and charge the seller 30¢ plus 2.9% for the&amp;nbsp;&amp;#8220;convenience&amp;#8221;.&lt;/p&gt;
&lt;p&gt;If a website could say &amp;#8220;pay 5¢ to read this&amp;#8221; and you clicked a button in your browser and that was that, we might be onto something.  But with our current setup, it costs far more than 5¢ to transfer 5¢, even though it&amp;#8217;s just a number in a computer somewhere.  The only people with the power and resources to fix this don&amp;#8217;t &lt;em&gt;want&lt;/em&gt; to fix it — they&amp;#8217;d rather be the ones charging you the 30¢ plus&amp;nbsp;2.9%.&lt;/p&gt;
&lt;p&gt;That leads to another factor of &lt;strong&gt;platforms and publishers&lt;/strong&gt;, which are more than happy to eat a chunk of your earnings even when you do sell stuff.  Google Play, the App Store, Steam, and anecdotally many other big-name comparative platforms all take 30% of your sales.  A third!  And that&amp;#8217;s &lt;em&gt;good&lt;/em&gt;!  It seems common among book publishers to take &lt;strong&gt;85% to 90%&lt;/strong&gt;.  For ebook sales — i.e., ones that don&amp;#8217;t actually cost anything — they may generously lower that to a mere 75% to&amp;nbsp;85%.&lt;/p&gt;
&lt;p&gt;Bless Patreon for only taking 5%.  Itch.io is even better: it defaults to 10%, but &lt;em&gt;gives you a slider&lt;/em&gt;, which you can set to anything from 0% to&amp;nbsp;100%.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve mentioned all this before, so here&amp;#8217;s a more novel thought: &lt;strong&gt;finite disposable income&lt;/strong&gt;.  Your audience only has so much money to spend on media right now.  You can try to be more compelling to encourage them to spend &lt;em&gt;more&lt;/em&gt; of it, rather than saving it, but ultimately everyone has a limit before they just plain run out of&amp;nbsp;money.&lt;/p&gt;
&lt;p&gt;Now, popularity is heavily influenced by social and network effects, so it tends to create a power law distribution: a few things are ridiculously hyperpopular, and then there&amp;#8217;s a steep drop to a &lt;a href="https://en.wikipedia.org/wiki/Long_tail"&gt;long tail&lt;/a&gt; of more modestly popular&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;If a new hyperpopular thing comes out, everyone is likely to want to buy it&amp;#8230;  but then that eats away a significant chunk of that finite pool of money that could&amp;#8217;ve gone to less popular&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t &lt;em&gt;bad&lt;/em&gt;, and buying a popular thing doesn&amp;#8217;t make you a bad person; it&amp;#8217;s just what happens.  I don&amp;#8217;t think there&amp;#8217;s any satisfying alternative that doesn&amp;#8217;t involve radically changing the way we think about our&amp;nbsp;economy.&lt;/p&gt;
&lt;p&gt;Taylor Swift, who I&amp;#8217;m only picking on because her infosec account follows me on Twitter, has sold tens of millions of albums and is worth something like a quarter of a billion dollars.  Does she &lt;em&gt;need&lt;/em&gt; more?  If not, should she make all her albums free from now&amp;nbsp;on?&lt;/p&gt;
&lt;p&gt;Maybe she does, and maybe she shouldn&amp;#8217;t.  The alternative is for someone to somehow &lt;em&gt;prevent&lt;/em&gt; her from making more money, which doesn&amp;#8217;t sit well.  Yet it feels almost heretical to even &lt;em&gt;ask&lt;/em&gt; if someone &amp;#8220;needs&amp;#8221; more money, because we take for granted that she&amp;#8217;s earned it — in part by being invested in by a record label and heavily advertised.  The virtue is work, right?  Don&amp;#8217;t a lot of people work just as hard?  (&amp;#8220;But you have to be talented too!&amp;#8221;  Then please explain how wildly incompetent CEOs still make millions, and leave burning businesses only to be immediately hired by new ones?  Anyway, are we really willing to bet there is &lt;em&gt;no one&lt;/em&gt; equally talented but not as popular by sheer&amp;nbsp;happenstance?)&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s kind of a moot question anyway, since she&amp;#8217;s probably under contract with billionaires and it&amp;#8217;s not up to&amp;nbsp;her.&lt;/p&gt;
&lt;p&gt;Where the hell was I going with&amp;nbsp;this.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Right, so.  Money.  Everyone needs some.  But making it off art can be tricky, unless you&amp;#8217;re one of the lucky handful who strike&amp;nbsp;gold.&lt;/p&gt;
&lt;p&gt;And I&amp;#8217;m still &lt;em&gt;pretty goddamn lucky&lt;/em&gt; to be able to even try this!  I doubt I would&amp;#8217;ve even gotten into game development by now if I were still working for an &lt;span class="caps"&gt;SF&lt;/span&gt; tech company — it just drained so much of my creative energy, and it&amp;#8217;s enough of an uphill battle for me to get stuff done in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;How many people do I know who are bursting with ideas, but have to work a tedious job to keep the lights on, and are too tired at the end of the day to get those ideas out?  Make no mistake, making stuff takes &lt;em&gt;work&lt;/em&gt; — a lot of it.  And that&amp;#8217;s if you&amp;#8217;re already pretty good at the artform.  If you want to &lt;em&gt;learn&lt;/em&gt; to draw or paint or write or code, you have to do just as much work &lt;em&gt;first&lt;/em&gt;, with much more frustration, and not as much to show for&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="utopia"&gt;&lt;a class="toclink" href="#utopia"&gt;Utopia&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So there&amp;#8217;s my utopia.  I want to see a world where people have the breathing room to create the things they dream about and share them with the rest of&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;Can it happen?  Maybe.  I think the cultural issues are a fairly big blocker; we&amp;#8217;d be much better off if we treated independent art with the same reverence as, say, people who play with a ball for twelve hours a year.  Or if we treated liberal arts degrees as just as good as computer science degrees.  (&amp;#8220;But &lt;span class="caps"&gt;STEM&lt;/span&gt; can change the world!&amp;#8221;  Okay.  How many people with computer science degrees would you estimate are changing the world, and how many are making a website 1% faster or keeping a lumbering &lt;span class="caps"&gt;COBOL&lt;/span&gt; beast running or trying to trick 1% more people into clicking on&amp;nbsp;ads?)&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t really mean stuff like piracy, either.  Piracy is a thing, but it&amp;#8217;s&amp;#8230;  complicated.  In my experience it&amp;#8217;s not even artists who care the most about piracy; it&amp;#8217;s massive publishers, the sort who see artists as a sponge to squeeze money out of.  You know, the same people who make everything difficult to actually buy, infest it with &lt;span class="caps"&gt;DRM&lt;/span&gt; so it doesn&amp;#8217;t work on half the stuff you own, and don&amp;#8217;t even sell it in half the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;I mean treating art as a free-floating commodity, detached from anyone who created it.  I mean neo-Nazis adopting a comic book character as their mascot, against the creator&amp;#8217;s wishes.  I mean politicians and even media conglomerates using someone else&amp;#8217;s music in well-funded videos and ads without even asking.  I mean assuming Google Image Search, wonder that it is, is some kind of magical free art machine.  I mean the snotty Reddit post I found while looking up Patreon&amp;#8217;s fee structure, where some doofus was insisting that Patreon couldn&amp;#8217;t possibly pay for a full-time YouTuber&amp;#8217;s &lt;em&gt;time&lt;/em&gt;, because not having a job meant they had lots of time to&amp;nbsp;spare.&lt;/p&gt;
&lt;p&gt;Maybe I should go one step further: everyone &lt;em&gt;should create&lt;/em&gt; at least once or twice.  Everyone should know what it&amp;#8217;s like to have crafted something out of &lt;em&gt;nothing&lt;/em&gt;, to be a fucking &lt;strong&gt;god&lt;/strong&gt; within the microcosm of a computer screen or a sewing machine or a pottery table.  Everyone should know that spark of inspiration that we don&amp;#8217;t seem to know how to teach in math or science classes, even though it&amp;#8217;s the entire basis of those as well.  Everyone should know that there&amp;#8217;s a good goddamn reason I listed open source software as a kind of art at the beginning of this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Basic income and more arts funding for public schools.  If Uber can get billions of dollars for putting little car icons on top of Google Maps and not actually doing any of their own goddamn service themselves, I think we can afford to pump more cash into webcomics and indie games and, yes, even underwater basket&amp;nbsp;weaving.&lt;/p&gt;</content><category term="culture"></category><category term="making things"></category><category term="patreon"></category></entry><entry><title>NEON PHASE</title><link href="https://eev.ee/blog/2017/01/21/neon-phase/" rel="alternate"></link><published>2017-01-21T20:02:00-08:00</published><updated>2017-01-21T20:02:00-08:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-01-21:/blog/2017/01/21/neon-phase/</id><summary type="html">&lt;p&gt;It all started after last year&amp;#8217;s &lt;a href="https://gamesdonequick.com/"&gt;&lt;span class="caps"&gt;AGDQ&lt;/span&gt;&lt;/a&gt;, when I lamented having spent the entire week just watching speedruns instead of doing anything, and thus having lost my rhythm for days&amp;nbsp;afterwards.&lt;/p&gt;
&lt;p&gt;This year, several friends reminded me of this simultaneously, so I begrudgingly went looking for something to focus on during &lt;span class="caps"&gt;AGDQ&lt;/span&gt;.  I&amp;#8217;d already been working on Isaac&amp;#8217;s Descent &lt;span class="caps"&gt;HD&lt;/span&gt;, so why not keep it up?  Work on a video game while watching video&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;Working on a game for a week sounded an awful lot like a game jam, so I jokingly tweeted about a game jam whose express purpose was to not &lt;em&gt;completely&lt;/em&gt; waste the week staring at a Twitch stream.  Then someone suggested I make it an actual jam on itch.io.  Then Mel asked to do a game with&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;And so, thanks to an almost comical sequence of events, we made &lt;a href="https://eevee.itch.io/neon-phase"&gt;&lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt;&lt;/a&gt; — a half-hour explorey&amp;nbsp;platformer.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;It all started after last year&amp;#8217;s &lt;a href="https://gamesdonequick.com/"&gt;&lt;span class="caps"&gt;AGDQ&lt;/span&gt;&lt;/a&gt;, when I lamented having spent the entire week just watching speedruns instead of doing anything, and thus having lost my rhythm for days&amp;nbsp;afterwards.&lt;/p&gt;
&lt;p&gt;This year, several friends reminded me of this simultaneously, so I begrudgingly went looking for something to focus on during &lt;span class="caps"&gt;AGDQ&lt;/span&gt;.  I&amp;#8217;d already been working on Isaac&amp;#8217;s Descent &lt;span class="caps"&gt;HD&lt;/span&gt;, so why not keep it up?  Work on a video game while watching video&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;Working on a game for a week sounded an awful lot like a game jam, so I jokingly tweeted about a game jam whose express purpose was to not &lt;em&gt;completely&lt;/em&gt; waste the week staring at a Twitch stream.  Then someone suggested I make it an actual jam on itch.io.  Then Mel asked to do a game with&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;And so, thanks to an almost comical sequence of events, we made &lt;a href="https://eevee.itch.io/neon-phase"&gt;&lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt;&lt;/a&gt; — a half-hour explorey&amp;nbsp;platformer.&lt;/p&gt;


&lt;h2 id="the-game"&gt;&lt;a class="toclink" href="#the-game"&gt;The&amp;nbsp;game&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;a href="https://eevee.itch.io/neon-phase"&gt;&lt;img src="/media/2017-01-neon-phase/neon-phase.png"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The game is set in the &lt;a href="http://floraverse.com/"&gt;Flora&lt;/a&gt; universe, as is everything Mel gets their hands on.  (I say this with all the love in the world.  ♥  Anyway, my games are &lt;em&gt;also&lt;/em&gt; set in the Flora universe, so who am I to&amp;nbsp;talk.)&lt;/p&gt;
&lt;p&gt;I started out by literally copy-pasting the source code for Isaac&amp;#8217;s Descent &lt;span class="caps"&gt;HD&lt;/span&gt;, the game I&amp;#8217;ve been making with &lt;a href="http://floraverse.com/"&gt;LÖVE&lt;/a&gt; as an extension of an &lt;a href="https://eevee.itch.io/isaacs-descent"&gt;earlier &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 game I made&lt;/a&gt;.  It&amp;#8217;s not terribly far yet, but it&amp;#8217;s &lt;em&gt;almost&lt;/em&gt; to the point of replicating the original game, which meant I had a passable platformer engine that could load Tiled maps and had some notion of an &amp;#8220;actor&amp;#8221;.  We both like platformers, anyway, so a platformer it would&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;We probably didn&amp;#8217;t make the &lt;em&gt;best&lt;/em&gt; use of the week.  I think it took us a couple days to figure out how to collaborate, now that we didn&amp;#8217;t have the &lt;span class="caps"&gt;PICO&lt;/span&gt;-8&amp;#8217;s limitations and tools influencing our direction.  Isaac is tile-based, so I&amp;#8217;d taken for granted that this game would also be tile-based, whereas Mel, being an illustrator, prefers to draw&amp;#8230;  illustrations.  I, an idiot, decided the best way to handle this would be to start cutting the illustrations into tiles and then piecing them back together.  It took several days before I realized that oh, hey, Mel could just draw &lt;em&gt;the entire map&lt;/em&gt; as a single image, and I could make the player run around on&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;So I did that.  Previously, collision had been associated only with tiles, but it wasn&amp;#8217;t too hard to just draw polygons right on the map and use those for collision.  (&lt;em&gt;Bless&lt;/em&gt; &lt;a href="http://www.mapeditor.org/"&gt;Tiled&lt;/a&gt;, by the way.  It has some frustrating rough edges due to being a very general-purpose editor, but I can&amp;#8217;t imagine how much time it would take me to write my own map editor that can do as&amp;nbsp;much.)&lt;/p&gt;
&lt;p&gt;And speaking of collision, while I did have to dig into a few thorny bugs, I&amp;#8217;m &lt;em&gt;thrilled&lt;/em&gt; with how well the physics came out!  The collision detection I&amp;#8217;d written for Isaac&amp;#8217;s Descent &lt;span class="caps"&gt;HD&lt;/span&gt; was designed to support arbitrary polygons, even though so far I&amp;#8217;ve only had square tiles.  I knew the whole time I was making my life a lot harder, but I &lt;em&gt;really&lt;/em&gt; didn&amp;#8217;t want to restrict myself to rectangles right out of the gate.  It paid off in &lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt; — the world is full of sloping, hilly terrain, and you can run across it fairly&amp;nbsp;naturally!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d also thought at first that the game would be a kind of actiony platformer, which is why the very first thing you get greatly resembles a weapon, but you don&amp;#8217;t end up actually fighting anything.  It turns out enemy behavior takes a bit of careful design and effort, and I ended up busy enough just implementing Mel&amp;#8217;s story.  Also, dropping fighting meant I didn&amp;#8217;t have to worry about death, which meant I didn&amp;#8217;t have to worry about saving and loading map state, which was &lt;em&gt;great news&lt;/em&gt; because I still haven&amp;#8217;t done any of that&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s kind of interesting how time constraints can influence game design.  The game has little buildings you can enter, but because I didn&amp;#8217;t have saving/loading implemented, I didn&amp;#8217;t want to &lt;em&gt;actually&lt;/em&gt; switch maps.  Instead, I made the insides of buildings a separate layer in Tiled.  And since I had both layers on hand, I just drew the indoor layer right on top of the outdoor layer, which made kind of a cool&amp;nbsp;effect.&lt;/p&gt;
&lt;p&gt;A side effect of this approach was that you could see the inside of all buildings (well, within the viewport) while you were inside one, since they all exist in the same space.  We ended up adding a puzzle and a couple minor flavor things that took advantage of&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;If I &lt;em&gt;had&lt;/em&gt; had saving/loading of maps ready to go, I might have opted instead for a more traditional &lt;span class="caps"&gt;RPG&lt;/span&gt;-like approach, where the inside of each building is on its own map (or appears to be) and floats in a black&amp;nbsp;void.&lt;/p&gt;
&lt;p&gt;Another thing I really liked was the glitch effect, which I wrote on a whim early on because I&amp;#8217;ve had shaders on the brain lately.  We were both a little unsure about it, but in the end Mel wrote it into the plot and I used it more heavily throughout, including as a transition effect between&amp;nbsp;indoors/outdoors.&lt;/p&gt;
&lt;p&gt;Mel was responsible for art &lt;em&gt;and&lt;/em&gt; music &lt;em&gt;and&lt;/em&gt; story, so the plot unfortunately wasn&amp;#8217;t finalized until the last day of the jam.  It ended up being 30 pages of dialogue.  Sprinkled throughout were special effects that sound like standard things you&amp;#8217;d find in any &lt;span class="caps"&gt;RPG&lt;/span&gt; dialogue system — menus, branches, screen fades, and the like — but that I just hadn&amp;#8217;t written&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;The dialogue system was downright primitive when we started; I&amp;#8217;d only written it as a brief proof of concept for Isaac, and it had only gotten as far as showing lines of wrapped text.  It didn&amp;#8217;t even know how to deal with text that was too long for the box.  Hell, it didn&amp;#8217;t even know how to &lt;em&gt;exit&lt;/em&gt; the dialogue and return to the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;So when I got the final script, I went into a sort of mad panic, doing my best to tack on features in ways I wouldn&amp;#8217;t regret later and could maybe reuse.  I got pretty far, but when it became clear that we couldn&amp;#8217;t possibly have a finished product in time, I invoked my powers as jam coordinator and pushed the deadline back by 24 hours.  48 hours.  54⅓ hours.  Oh,&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://eevee.itch.io/neon-phase"&gt;final product&lt;/a&gt; came out pretty well, modulo a couple release bugs, ahem.  I&amp;#8217;ve been really impressed with itch.io, too — it has a &lt;em&gt;thousand&lt;/em&gt; twiddles, which makes me very happy, plus graphs of how many people have been playing our game and how they found it!  Super&amp;nbsp;cool.&lt;/p&gt;
&lt;h2 id="lessons-learned"&gt;&lt;a class="toclink" href="#lessons-learned"&gt;Lessons&amp;nbsp;learned&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ah, yes.  Here&amp;#8217;s that sweet postmortem content you computer people&amp;nbsp;crave.&lt;/p&gt;
&lt;h3 id="dont-leave-debug-code-in"&gt;&lt;a class="toclink" href="#dont-leave-debug-code-in"&gt;Don't leave debug code&amp;nbsp;in&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There&amp;#8217;s a fairly long optional quest in the game that takes a good few minutes to complete, even if you teleport everywhere instantly.  (Ahem.)  Finishing the quest kicks off a unique cutscene that involves a decent bit of crappy code I wrote at the last minute.  I needed to test it a lot.  So, naturally, I added a dummy rule to the beginning of the relevant &lt;span class="caps"&gt;NPC&lt;/span&gt;&amp;#8217;s dialogue that just skips right to the&amp;nbsp;end.&lt;/p&gt;
&lt;p&gt;I forgot to delete that rule before we&amp;nbsp;released.&lt;/p&gt;
&lt;p&gt;Whoops!&lt;/p&gt;
&lt;p&gt;The game even &lt;em&gt;has&lt;/em&gt; a debug mode, so I could&amp;#8217;ve easily made the rule only work then.  I didn&amp;#8217;t, and it possibly spoiled the whole sidequest for a couple dozen people.  My&amp;nbsp;bad.&lt;/p&gt;
&lt;h3 id="try-your-game-at-other-framerates"&gt;&lt;a class="toclink" href="#try-your-game-at-other-framerates"&gt;Try your game at other&amp;nbsp;framerates&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The other game-breaking bug we had in the beginning was that some people couldn&amp;#8217;t make jumps.  For some, it was only when indoors; for others, it was all the time.  The common thread was&amp;#8230;  low&amp;nbsp;framerates.&lt;/p&gt;
&lt;p&gt;Why does this matter?  Well!  When you jump, your upwards velocity is changed to a specific value, calculated to make your jump height slightly more than two tiles.  The problem is, gravity is applied &lt;em&gt;after&lt;/em&gt; you get jump velocity but &lt;em&gt;before&lt;/em&gt; you actually move.  It looks like&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;gravity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Reasonable, right?  Gravity is acceleration, so you multiply it by the amount of time that&amp;#8217;s passed to get the change to&amp;nbsp;velocity.&lt;/p&gt;
&lt;p&gt;Ah&amp;#8230;  but if your framerate is low, then &lt;code&gt;dt&lt;/code&gt; will be relatively large, and gravity will eat away a relatively large chunk of your upwards velocity.  On the frame you jump, this effectively reduces your initial jump speed.  If your framerate is low &lt;em&gt;enough&lt;/em&gt;, you&amp;#8217;ll never be able to jump as high as&amp;nbsp;intended.&lt;/p&gt;
&lt;p&gt;One obvious fix would be to rearrange the order things happen, so gravity doesn&amp;#8217;t come between jumping and movement.  I was wary of doing this as an emergency fix, though, because it would&amp;#8217;ve taken a bit of rearchitecturing and I wasn&amp;#8217;t sure about the side effects.  So instead, I made a fix that&amp;#8217;s worth having anyway: when the framerate is too long, I slice up &lt;code&gt;dt&lt;/code&gt; and do multiple rounds of updating.  Now even if the game &lt;em&gt;draws&lt;/em&gt; slowly, it plays at the right&amp;nbsp;speed.&lt;/p&gt;
&lt;p&gt;This was really easy to discover once I knew to look; all I had to do was add a &lt;code&gt;sleep()&lt;/code&gt; in the update or draw loops to artificially lower the framerate.  I even found a second bug, which was that you &lt;em&gt;move&lt;/em&gt; slowly at low framerates — much like with jumping, your walk speed is capped at a maximum, then friction lowers it, then you actually&amp;nbsp;move.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;also&lt;/em&gt; had problems with framerates that were too &lt;em&gt;high&lt;/em&gt;, which took me completely by surprise.  Your little companion flips out and jitters all over the place or even gets stuck, and jumping just plain doesn&amp;#8217;t work most of the time.  The problems here were much simpler.  I was needlessly rounding Chip&amp;#8217;s position to the nearest pixel, so if &lt;code&gt;dt&lt;/code&gt; was very small, Chip would only try to move a fraction of a pixel per frame and never get anywhere; I fixed that by simply not&amp;nbsp;rounding.&lt;/p&gt;
&lt;p&gt;The issue with jumping needs a little backstory.  One of the problems with sloped terrain is that when you walk up a slope and reach the &lt;em&gt;top&lt;/em&gt;, your momentum is still carrying you along the path of the slope, i.e. upwards.  I had a lot of problems with launching right off the top of even a fairly shallow hill; it looked goofy and amateurish.  My terrible solution was: if you started out on the ground, then after moving, &lt;em&gt;try&lt;/em&gt; to move a short distance straight down.  If you &lt;em&gt;can&amp;#8217;t&lt;/em&gt;, because something (presumably the ground) is in the way, then you probably just went over a short bump; move as far as you can downwards so you stick to the ground.  If you &lt;em&gt;can&lt;/em&gt; move downwards, you just went over a ledge, so &lt;em&gt;abort&lt;/em&gt; the movement and let gravity take its course next&amp;nbsp;frame.&lt;/p&gt;
&lt;p&gt;The problem was that I used a fixed (arbitrary) distance for this ground test.  For very short &lt;code&gt;dt&lt;/code&gt;, the distance you moved upwards when jumping was &lt;em&gt;less than&lt;/em&gt; the distance I then tried dragging you back down to see if you should stay on the ground.  The easy fix was to scale the test distance with &lt;code&gt;dt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, if you&amp;#8217;re jumping, obviously you don&amp;#8217;t &lt;em&gt;want&lt;/em&gt; to stay on the ground, so I shouldn&amp;#8217;t do this test at all.  But jumping is an active thing, and staying grounded is currently a passive thing (but shouldn&amp;#8217;t be, since it emulates &lt;em&gt;walking&lt;/em&gt; rather than &lt;em&gt;sliding&lt;/em&gt;), and again I didn&amp;#8217;t want to start messing with physics guts &lt;em&gt;after&lt;/em&gt; release.  I&amp;#8217;ll be cleaning a few things up for the next game, I&amp;#8217;m&amp;nbsp;sure.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;also&lt;/em&gt; turned out to be easy to see once I knew to look — I just turned off vsync, and my framerate shot up to&amp;nbsp;200+.&lt;/p&gt;
&lt;h3 id="quadratic-behavior-is-bad"&gt;&lt;a class="toclink" href="#quadratic-behavior-is-bad"&gt;Quadratic behavior is&amp;nbsp;bad&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The low framerate issue wouldn&amp;#8217;t have been &lt;em&gt;quite&lt;/em&gt; so bad, except for a teeny tiny problem with indoors.  I&amp;#8217;d accidentally left a loop in when refactoring, so instead of merely drawing every indoor actor each frame, I was drawing every indoor actor &lt;em&gt;for every indoor actor&lt;/em&gt; each frame.  I think that worked out to 7225 draws instead of 85.  (I don&amp;#8217;t skip drawing for offscreen actors yet.)  &lt;em&gt;Our&lt;/em&gt; computers are pretty beefy, so I never noticed.  Our one playtester did comment at the eleventh hour that the framerate dipped very slightly while indoors, but I assumed this was just because indoors requires more drawing than outdoors (since it&amp;#8217;s drawn right on top of outdoors) and didn&amp;#8217;t&amp;nbsp;investiage.&lt;/p&gt;
&lt;p&gt;Of course, if you play on a less powerful machine, the difference will be rather more noticeable.&amp;nbsp;Oops.&lt;/p&gt;
&lt;h3 id="just-do-it"&gt;&lt;a class="toclink" href="#just-do-it"&gt;Just Do&amp;nbsp;It&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My collision detection relies on the &lt;a href="https://en.wikipedia.org/wiki/Hyperplane_separation_theorem"&gt;separating axis theorem&lt;/a&gt;, which only works for convex polygons.  (Convex polygons are ones that have no &amp;#8220;dents&amp;#8221; in them — you could wrap a rubber band around one and it would lie snug along each face.)  The map Mel drew has rolling terrain and caverns with ceilings, which naturally lead to a lot of concave polygons.  (Concave polygons are not convex.  They have&amp;nbsp;caves!)&lt;/p&gt;
&lt;p&gt;I must&amp;#8217;ve spent a good few hours drawing collision polygons on top of the map, manually eyeballing the terrain and cutting it up into only convex&amp;nbsp;polygons.&lt;/p&gt;
&lt;p&gt;Eventually I got so tired of this that I threw up my hands and added support for concave&amp;nbsp;polygons.&lt;/p&gt;
&lt;p&gt;It took me, like, two minutes.  Not only does LÖVE have a built-in function for cutting a polygon into triangles (which are always convex), it also has a function for detecting whether a polygon is convex.  I already had support for objects consisting of multiple shapes, so all I had to do was plug these things into each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;Collision probably would&amp;#8217;ve taken much less time if I&amp;#8217;d just done that in the first&amp;nbsp;place.&lt;/p&gt;
&lt;h3 id="delete-that-old-code-or-maybe-not"&gt;&lt;a class="toclink" href="#delete-that-old-code-or-maybe-not"&gt;Delete that old code, or maybe&amp;nbsp;not&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the very first players reported that they&amp;#8217;d managed to crash the game right off the bat.  It didn&amp;#8217;t take long to realize it was because they&amp;#8217;d pressed &lt;code&gt;Q&lt;/code&gt;, which isn&amp;#8217;t actually used in &lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt;.  It &lt;em&gt;is&lt;/em&gt; used in Isaac&amp;#8217;s Descent &lt;span class="caps"&gt;HD&lt;/span&gt;, to scroll through the inventory&amp;#8230;  but &lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt; doesn&amp;#8217;t &lt;em&gt;use&lt;/em&gt; that inventory, and I&amp;#8217;d left in the code for handling the keypress, so the game simply&amp;nbsp;crashed.&lt;/p&gt;
&lt;p&gt;(This is Lua, so when I say &amp;#8220;crash&amp;#8221;, I mean &amp;#8220;showed a stack trace and refused to play any more&amp;#8221;.  Slightly better, but only so&amp;nbsp;much.)&lt;/p&gt;
&lt;p&gt;So, maybe delete that old&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Or, wait, maybe don&amp;#8217;t.  When I removed the debugging sequence break just after release, I also deleted the code for the &lt;code&gt;Q&lt;/code&gt; key&amp;#8230;  and, in a rush, &lt;em&gt;also&lt;/em&gt; deleted the code for handling the &lt;code&gt;E&lt;/code&gt; key, which &lt;em&gt;is&lt;/em&gt; used in &lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt;.  Rather heavily.  Like, for everything.&amp;nbsp;Dammit.&lt;/p&gt;
&lt;p&gt;Maybe just play the game before issuing emergency releases?&amp;nbsp;Nah.&lt;/p&gt;
&lt;h3 id="melding-styles-is-easier-than-youd-think"&gt;&lt;a class="toclink" href="#melding-styles-is-easier-than-youd-think"&gt;Melding styles is easier than you'd&amp;nbsp;think&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I look at the whole map overall, it&amp;#8217;s hilarious to me how much the part I designed sticks out.  It&amp;#8217;s built out of tiles and consists of one large puzzle, whereas the rest of the game is as untiled as you can get and mostly revolves around talking to&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;And yet I don&amp;#8217;t think anyone has noticed.  It&amp;#8217;s just one part of the game with a thing you do.  The rest of the game may not have a bunch of wiring puzzles, but enough loose wires are lying around to make them seem fitting.  The tiles Mel gave me are good and varied enough that they don&amp;#8217;t &lt;em&gt;look&lt;/em&gt; like tiles; they just look like they were deliberately made more square for aesthetic or story&amp;nbsp;reasons.&lt;/p&gt;
&lt;p&gt;I drew a few of the tiles and edited a few others.  Most of the dialogue was written by Mel, but a couple lines that people really like were my own, completely impromptu, invention.  No one seems to have noticed.  It&amp;#8217;s all one game.  We didn&amp;#8217;t sit down and have a meeting about the style or how to keep it cohesive; I just did stuff when I felt like it, and I naturally took inspiration from what was already&amp;nbsp;there.&lt;/p&gt;
&lt;h3 id="people-will-pay-for-things-if-you-ask-them-to"&gt;&lt;a class="toclink" href="#people-will-pay-for-things-if-you-ask-them-to"&gt;People will pay for things if you ask them&amp;nbsp;to&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;itch.io does something really&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;Anything you download is presented as a &lt;em&gt;purchase&lt;/em&gt;.  You are absolutely welcome to sell things for free, but rather than being an instant download, itch.io treats this as a case of &lt;em&gt;buying for zero dollars&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Why do that?  Well, because you are always free to pay &lt;em&gt;more&lt;/em&gt; for something you buy on itch, and &lt;a href="https://itch.io/docs/creators/how-buying-works#the-purchase-dialog"&gt;the purchase dialog&lt;/a&gt; has handy buttons for adding a&amp;nbsp;tip.&lt;/p&gt;
&lt;p&gt;It turns out that, when presented with a dialog that offers a way to pay money for a free thing, an awful lot of people&amp;#8230;  paid money!  Over a hundred people chipped in a few bucks for our &lt;em&gt;free game&lt;/em&gt;, just because itch offered them a button to do so.  The vast majority of them paid one of itch&amp;#8217;s preset amounts.  I&amp;#8217;m totally blown away; I knew abstractly that this was &lt;em&gt;possible&lt;/em&gt;, but I didn&amp;#8217;t really expect it to happen.  I&amp;#8217;ve never actually sold anything before, either.  This is&amp;nbsp;amazing.&lt;/p&gt;
&lt;p&gt;Now, granted, we &lt;em&gt;do&lt;/em&gt; offer bonuses (concept art and the &lt;span class="caps"&gt;OST&lt;/span&gt;) if you pay $2 or more, at Mel&amp;#8217;s request.  But consider that I also put my two &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 games on itch, and those have an interesting difference: they&amp;#8217;re played in-browser and load automatically right in the page.  Instead of a payment dialog, there&amp;#8217;s a &amp;#8220;support this game&amp;#8221; button below the game.  They&amp;#8217;re older games that most of my audience has probably played already, but they still got a few hundred views between them.  And the number of&amp;nbsp;purchases?&lt;/p&gt;
&lt;p&gt;Zero.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not trying to criticize or guilt anyone here!  I release stuff for free because I want it to be free.  I&amp;#8217;m just genuinely amazed by how effective itch&amp;#8217;s download workflow seems to be.  The buttons for chipping in are a natural part of the process of &lt;em&gt;something you&amp;#8217;re already doing&lt;/em&gt;, so &amp;#8220;I might as well&amp;#8221; kicks in.  I&amp;#8217;ve done this myself — I paid for the free &lt;a href="https://managore.itch.io/m5x7"&gt;m5x7&lt;/a&gt; font I used in &lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt;.  But something played in-browser is already there, and it takes a much stronger impulse to go out of your way to &lt;em&gt;initiate&lt;/em&gt; the process of supporting the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;Anyway, this is definitely encouraging me to make more things.  I&amp;#8217;ll probably put my book on itch when I finish it,&amp;nbsp;too.&lt;/p&gt;
&lt;h2 id="also-my-book"&gt;&lt;a class="toclink" href="#also-my-book"&gt;Also, my&amp;nbsp;book&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Speaking&amp;nbsp;of!&lt;/p&gt;
&lt;p&gt;If you remember, I&amp;#8217;ve been writing a book about game development.  Literally, a book &lt;em&gt;about&lt;/em&gt; game development — the concept was that I build some games on various free platforms, then write about what I did and how I did it.  Game development as a story, rather than a&amp;nbsp;lecture.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve hit a bit of a problem with it, and that problem is with my &amp;#8220;real&amp;#8221; games — i.e., the ones I didn&amp;#8217;t make for the sake of the book.  Writing about Isaac&amp;#8217;s Descent requires first explaining how the engine came about, which requires reconstructing how I wrote Under Construction, and now we&amp;#8217;re at two games&amp;#8217; worth of stuff even before you consider the whole &lt;em&gt;writing a collision engine&lt;/em&gt;&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;Isaac&amp;#8217;s Descent &lt;span class="caps"&gt;HD&lt;/span&gt; is posed to have exactly the same problem: it takes a detour through the development of &lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt;, so I should talk about that too in some&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;Both of these games are huge and complex tales already, far too long for a single &amp;#8220;chapter&amp;#8221;, and I&amp;#8217;d already been worrying that the book would be too&amp;nbsp;long.&lt;/p&gt;
&lt;p&gt;So!  I&amp;#8217;m adjusting the idea slightly.  Instead of writing about making a bunch of &amp;#8220;artificial&amp;#8221; games that I make solely for the sake of writing about the experience&amp;#8230;  I&amp;#8217;m cutting it down to just Isaac&amp;#8217;s Descent, &lt;span class="caps"&gt;HD&lt;/span&gt;, and the other games in their lineage.  That&amp;#8217;s already half a dozen games across two platforms, and I think they offer more than enough opportunity to say everything I&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;The overall idea of &amp;#8220;talk about making something&amp;#8221; is ultimately the same, but I like this refocusing a lot more.  It feels a little more genuine,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;Guess I&amp;#8217;ve got a bit of editing to&amp;nbsp;do!&lt;/p&gt;
&lt;h2 id="and-finally"&gt;&lt;a class="toclink" href="#and-finally"&gt;And,&amp;nbsp;finally&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You should try out &lt;a href="https://itch.io/jam/games-made-quick/entries"&gt;the other games&lt;/a&gt; people made for my jam!  I can&amp;#8217;t believe a Twitter joke somehow caused &lt;em&gt;more than forty&lt;/em&gt; games to come into existence that otherwise would not have.  I&amp;#8217;ve been busy with &lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt; followup stuff (like writing this post) and have only barely scratched the surface so far, but I do intend to play every game that was&amp;nbsp;submitted!&lt;/p&gt;</content><category term="gamedev"></category><category term="making things"></category></entry><entry><title>Eevee gained 2611 experience points</title><link href="https://eev.ee/blog/2017/01/21/eevee-gained-2611-experience-points/" rel="alternate"></link><published>2017-01-21T16:50:00-08:00</published><updated>2017-01-21T16:50:00-08:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2017-01-21:/blog/2017/01/21/eevee-gained-2611-experience-points/</id><summary type="html">&lt;p&gt;Eevee grew to level&amp;nbsp;30!&lt;/p&gt;
&lt;p&gt;Wow!  What an incredible fucking year.  I&amp;#8217;ve never done so much in my&amp;nbsp;life.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Eevee grew to level&amp;nbsp;30!&lt;/p&gt;
&lt;p&gt;Wow!  What an incredible fucking year.  I&amp;#8217;ve never done so much in my&amp;nbsp;life.&lt;/p&gt;


&lt;p&gt;I made a video game!  Twice!  &lt;em&gt;Thrice&lt;/em&gt;, even, if you count the one I just finished, which was done on the week surrounding my birthday.  Mel and I made &lt;a href="https://eevee.itch.io/under-construction"&gt;Under Construction&lt;/a&gt; on the &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 in &lt;a href="https://eev.ee/blog/2016/05/25/under-construction-our-pico-8-game/"&gt;a few weeks&lt;/a&gt;, then I used its engine to make &lt;a href="https://eevee.itch.io/isaacs-descent"&gt;Isaac&amp;#8217;s Descent&lt;/a&gt; on my own for &lt;a href="https://eev.ee/blog/2016/08/29/i-entered-ludum-dare-36/"&gt;Ludum Dare&lt;/a&gt;, and we just published the more substantial LÖVE-based &lt;a href="https://eevee.itch.io/neon-phase"&gt;&lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt;&lt;/a&gt; for my own &lt;a href="https://itch.io/jam/games-made-quick"&gt;week-long game jam&lt;/a&gt;.  I&amp;#8217;ve also got a couple other things in progress, and Mel is at this very second working on &lt;span class="caps"&gt;NEON&lt;/span&gt; &lt;span class="caps"&gt;PHASE&lt;/span&gt;&amp;nbsp;2.&lt;/p&gt;
&lt;p&gt;And we made these from &lt;em&gt;scratch&lt;/em&gt;.  I wrote a little collision engine!  It even mostly works!  That&amp;#8217;s amazing and I&amp;#8217;m so happy about it.  It&amp;#8217;s also great that Mel and I have something we can actually work on together; before, the most collaborating we really did was on web&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;My interest in Doom waxes and wanes, but I did find time to finally &lt;a href="https://eev.ee/blog/2016/03/31/i-made-a-doom-level/"&gt;make a real map&lt;/a&gt; and later make some speedmaps (which I realize I never fully published, oops!).  I even put some effort into &lt;a href="https://eev.ee/blog/2016/11/26/embedding-lua-in-zdoom/"&gt;embedding Lua in ZDoom&lt;/a&gt;, which is an interesting side project but probably not something I&amp;#8217;m going to actively&amp;nbsp;champion.&lt;/p&gt;
&lt;p&gt;I wrote a few Twitter bots!  &lt;a href="https://twitter.com/perlin_noise"&gt;@perlin_noise&lt;/a&gt; puts my &lt;a href="https://eev.ee/blog/2016/05/29/perlin-noise/"&gt;post on Perlin noise&lt;/a&gt; to use by tweeting images, GIFs, and emoji grids generated from various kinds of Perlin noise.  &lt;a href="https://twitter.com/unicodeveryword"&gt;@unicodeveryword&lt;/a&gt; tweets every word in the English language that&amp;#8217;s also in my wordlist, slightly scrambled by Unicode shenanigans.  &lt;a href="https://twitter.com/calloutbot"&gt;@calloutbot&lt;/a&gt; is mostly an&amp;nbsp;injoke.&lt;/p&gt;
&lt;p&gt;I wrote &lt;a href="/everything/archives/"&gt;45 posts&lt;/a&gt; comprising 195k words, which is about &lt;em&gt;four novels&lt;/em&gt;, and that&amp;#8217;s not counting the couple of articles I was paid to write a few months ago.  I have &lt;a href="https://www.patreon.com/eevee"&gt;Patreon&lt;/a&gt; to thank for getting me to write more often, though I recently dropped the writing obligation so I can spend more time on games and a book and other&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;Oh, yes, I actually started writing a book, in the sense that I have (quite a bit) more than a few pages written and a concept that I like and am sticking&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;I dipped a toe into music, however briefly, and managed to produce &lt;a href="https://soundcloud.com/lexyeevee/cavern-tale"&gt;a simple song&lt;/a&gt; that&amp;#8217;s not too bad.&amp;nbsp;Promising!&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;feel&lt;/em&gt; like I&amp;#8217;ve been slacking a lot on art lately, but looking back, this year saw &lt;a href="https://lexyeevee.tumblr.com/post/141598282712/happy-birthday-glitchedpuppet-almost-their"&gt;my first animation&lt;/a&gt; (and &lt;a href="https://lexyeevee.tumblr.com/tagged/animation"&gt;several more after that&lt;/a&gt;), a &lt;a href="https://lexyeevee.tumblr.com/tagged/inktober"&gt;mountain of ink-on-paper work&lt;/a&gt; for Inktober, and of course a lot of exploration of &lt;a href="https://lexyeevee.tumblr.com/post/153851151152/i-made-little-animations-to-replace-the-wall-of"&gt;pixel art&lt;/a&gt; for games.  I haven&amp;#8217;t done as much &lt;em&gt;digital illustrating&lt;/em&gt; as I&amp;#8217;d like in the last few months, perhaps, but I&amp;#8217;m definitely creating &lt;a href="https://lexyeevee.tumblr.com/post/154044052102/a-challenger-approaches"&gt;stuff&lt;/a&gt; I&amp;#8217;d never have imagined I could do two years&amp;nbsp;ago.&lt;/p&gt;
&lt;p&gt;Veekun?  Ah, hm.  I &lt;em&gt;did&lt;/em&gt; write some gen 1 dumping stuff, much of which can be reused for gen 2, so that&amp;#8217;s good.  Some of the code got modernized a bit, and I made some good progress on gen 6/7.  I also wrote that &lt;a href="http://stuff.veekun.com/veekun-model-viewer/"&gt;model viewer&lt;/a&gt;, which is pretty dang cool.  So, still making progress, just slowly.  It&amp;#8217;s obviously not something that holds my attention as strongly nowadays, but I&amp;#8217;d still like to get the site redone — hopefully that&amp;#8217;ll make it easier to understand and work on, both for me and other&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;Even after all this, I&amp;#8217;m surely forgetting a few more minor things!  I&amp;#8217;m really happy about how far I&amp;#8217;ve come in a year, and I can&amp;#8217;t wait to see what this coming year has in&amp;nbsp;store.&lt;/p&gt;
&lt;!-- stick this down here to keep it out of the preview --&gt;

&lt;p&gt;&lt;audio src="/media/2012-01/levelup.ogv" controls autoplay&gt;&lt;/p&gt;</content><category term="birthday"></category><category term="personal"></category></entry><entry><title>Let’s stop copying C</title><link href="https://eev.ee/blog/2016/12/01/lets-stop-copying-c/" rel="alternate"></link><published>2016-12-01T03:51:00-08:00</published><updated>2016-12-01T03:51:00-08:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-12-01:/blog/2016/12/01/lets-stop-copying-c/</id><summary type="html">&lt;p&gt;Ah, C.  The best &lt;em&gt;lingua franca&lt;/em&gt; we have&amp;#8230;  because we have no other lingua francas.  Linguae franca.  Surgeons&amp;nbsp;general?&lt;/p&gt;
&lt;p&gt;C is fairly old — 44 years, now! — and comes from a time when there were possibly more architectures than programming languages.  It works well for what it is, and what it is is a relatively simple layer of indirection atop&amp;nbsp;assembly.&lt;/p&gt;
&lt;p&gt;Alas, the popularity of C has led to a number of programming languages&amp;#8217; taking significant cues from its design, and parts of its design are&amp;#8230;  slightly questionable.  I&amp;#8217;ve gone through some common features that probably should&amp;#8217;ve stayed in C and my justification for saying so.  The features are listed in rough order from (I hope) least to most controversial.  The idea is that C fans will give up when I call it &amp;#8220;weakly typed&amp;#8221; and not even get to the part where I rag on braces.  Wait, crap, I gave it&amp;nbsp;away.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Ah, C.  The best &lt;em&gt;lingua franca&lt;/em&gt; we have&amp;#8230;  because we have no other lingua francas.  Linguae franca.  Surgeons&amp;nbsp;general?&lt;/p&gt;
&lt;p&gt;C is fairly old — 44 years, now! — and comes from a time when there were possibly more architectures than programming languages.  It works well for what it is, and what it is is a relatively simple layer of indirection atop&amp;nbsp;assembly.&lt;/p&gt;
&lt;p&gt;Alas, the popularity of C has led to a number of programming languages&amp;#8217; taking significant cues from its design, and parts of its design are&amp;#8230;  slightly questionable.  I&amp;#8217;ve gone through some common features that probably should&amp;#8217;ve stayed in C and my justification for saying so.  The features are listed in rough order from (I hope) least to most controversial.  The idea is that C fans will give up when I call it &amp;#8220;weakly typed&amp;#8221; and not even get to the part where I rag on braces.  Wait, crap, I gave it&amp;nbsp;away.&lt;/p&gt;


&lt;p&gt;I&amp;#8217;ve listed some languages that do or don&amp;#8217;t take the same approach as C.  Plenty of the listed languages have no relation to C, and some even predate it — this is meant as a cross-reference of the landscape (and perhaps a list of prior art), not a genealogy.  The language selections are arbitrary and based on what I could cobble together from documentation, experiments, Wikipedia, and attempts to make sense of &lt;a href="https://rosettacode.org/"&gt;Rosetta Code&lt;/a&gt;.  I don&amp;#8217;t know everything about all of them, so I might be missing some interesting quirks.  Things are especially complicated for very old languages like &lt;span class="caps"&gt;COBOL&lt;/span&gt; or Fortran, which by now have numerous different versions and variants and de facto standard&amp;nbsp;extensions.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Unix shells&amp;#8221; means some handwaved combination that probably includes bash and its descendants; for expressions, it means the &lt;code&gt;(( ... ))&lt;/code&gt; syntax.  I didn&amp;#8217;t look too closely into, say, fish.  Unqualified &amp;#8220;Python&amp;#8221; means both 2 and 3; likewise, unqualified &amp;#8220;Perl&amp;#8221; means both 5 and 6.  Also some of the puns are perhaps a little too obtuse, but the first group listed is always&amp;nbsp;C-like.&lt;/p&gt;
&lt;h2 id="textual-inclusion"&gt;&lt;a class="toclink" href="#textual-inclusion"&gt;Textual&amp;nbsp;inclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#include&lt;/code&gt; is not a great basis for a module system.  It&amp;#8217;s not even a module system.  You can&amp;#8217;t ever quite tell what symbols came from which files, or indeed whether particular files are necessary at all.  And in languages with C-like header files, most headers include other headers include more headers, so who knows how any particular declaration is actually ending up in your code?  Oh, and there&amp;#8217;s the whole include guards&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a little tricky to pick on individual languages here, because ultimately even the greatest module system in the world boils down to &amp;#8220;execute this other file, and maybe do some other stuff&amp;#8221;.  I think the true differentiating feature is whether including/importing/whatevering a file &lt;em&gt;creates a new namespace&lt;/em&gt;.  If a file gets dumped into the caller&amp;#8217;s namespace, that looks an awful lot like textual inclusion; if a file gets its own namespace, that&amp;#8217;s a good sign of something more structured happening behind the&amp;nbsp;scenes.&lt;/p&gt;
&lt;p&gt;This tends to go hand-in-hand with how much the language relies on a global namespace.  One surprising exception is Lua, which can compartmentalize &lt;code&gt;require&lt;/code&gt;d files quite well, but dumps everything into a single global namespace by&amp;nbsp;default.&lt;/p&gt;
&lt;p&gt;Quick test: if you create a new namespace and import another file within that namespace, do its contents end up in that&amp;nbsp;namespace?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Included:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, awk, &lt;span class="caps"&gt;COBOL&lt;/span&gt;, Erlang, Forth, Fortran, most older Lisps, Perl 5 (despite that required files must return true), &lt;span class="caps"&gt;PHP&lt;/span&gt;, Unix&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Excluded:&lt;/strong&gt; Ada, Clojure, D, Haskell, Julia, Lua (the file&amp;#8217;s return value is returned from &lt;code&gt;require&lt;/code&gt;), Nim, Node (similar to Lua), Perl 6, Python,&amp;nbsp;Rust.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; &lt;span class="caps"&gt;ALGOL&lt;/span&gt; appears to have been designed with the assumption that you could include other code by adding its punch cards to your stack.  C#, Java, OCaml, and Swift all have some concept of &amp;#8220;all possible code that will be in this program&amp;#8221;, sort of like C with inferred headers, so imports are largely unnecessary; Java&amp;#8217;s &lt;code&gt;import&lt;/code&gt; really just does aliasing.  Inform 7 has no namespacing, but does have a first-class concept of external libraries, but doesn&amp;#8217;t have a way to split a single project up between multiple files.  Ruby doesn&amp;#8217;t automatically give &lt;code&gt;require&lt;/code&gt;d files their own namespace, but doesn&amp;#8217;t evaluate them in the caller&amp;#8217;s namespace&amp;nbsp;either.&lt;/p&gt;
&lt;h2 id="optional-block-delimiters"&gt;&lt;a class="toclink" href="#optional-block-delimiters"&gt;Optional block&amp;nbsp;delimiters&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Old and busted and responsible for &lt;a href="https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/"&gt;gotofail&lt;/a&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;New hotness, which reduces the amount of punctuation overall and eliminates this easy kind of&amp;nbsp;error:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To be fair, and unlike most of these complaints, the original idea was a sort of clever consistency: the actual syntax was merely &lt;code&gt;if (expr) stmt&lt;/code&gt;, &lt;em&gt;and also&lt;/em&gt;, a single statement could always be replaced by a block of statements.  Unfortunately, the cuteness doesn&amp;#8217;t make up for the ease with which errors sneak in.  If you&amp;#8217;re stuck with a language like this, I advise you &lt;em&gt;always&lt;/em&gt; use braces, possibly excepting the most trivial cases like immediately returning if some argument is &lt;code&gt;NULL&lt;/code&gt;.  Definitely do not do this nonsense, which I saw in actual code not 24 hours&amp;nbsp;ago.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// more code&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
            &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The only real argument &lt;em&gt;for&lt;/em&gt; omitting the braces is that the braces take up a lot of vertical space, but that&amp;#8217;s mostly a problem if you put each &lt;code&gt;{&lt;/code&gt; on its own line, and you could just not do&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Some languages use keywords instead of braces, and in such cases it&amp;#8217;s vanishingly rare to make the keywords&amp;nbsp;optional.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blockheads:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, awk, C#, D, Erlang (kinda?), Java,&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New kids on the block:&lt;/strong&gt; Go, Perl 6, Rust,&amp;nbsp;Swift.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Had their braces removed:&lt;/strong&gt; Ada, &lt;span class="caps"&gt;ALGOL&lt;/span&gt;, &lt;span class="caps"&gt;BASIC&lt;/span&gt;, &lt;span class="caps"&gt;COBOL&lt;/span&gt;, CoffeeScript, Forth, Fortran (but still requires parens), Haskell, Lua,&amp;nbsp;Ruby.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Inform 7 has several ways to delimit blocks, none of them vulnerable to this problem.  Perl 5 requires &lt;em&gt;both&lt;/em&gt; the parentheses and the braces&amp;#8230;  but it lets you leave off the semicolon on the last statement.  Python just uses indentation to delimit blocks in the first place, so you &lt;em&gt;can&amp;#8217;t&lt;/em&gt; have a block look wrong.  Lisps exist on a higher plane of existence where the very question makes no&amp;nbsp;sense.&lt;/p&gt;
&lt;h2 id="bitwise-operator-precedence"&gt;&lt;a class="toclink" href="#bitwise-operator-precedence"&gt;Bitwise operator&amp;nbsp;precedence&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For &lt;a href="http://softwareengineering.stackexchange.com/a/194647/78705"&gt;ease of transition from B&lt;/a&gt;, in C, the bitwise operators &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; have &lt;em&gt;lower&lt;/em&gt; &lt;a href="http://en.cppreference.com/w/c/language/operator_precedence"&gt;precedence&lt;/a&gt; than the comparison operators &lt;code&gt;==&lt;/code&gt; and friends.  That means they happen &lt;em&gt;later&lt;/em&gt;.  For binary math operators, this is &lt;em&gt;nonsense&lt;/em&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;// (1 + 2) == 3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;// (1 * 2) == 3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;// 1 | (2 == 3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Many other languages have copied C&amp;#8217;s entire set of operators &lt;em&gt;and&lt;/em&gt; their precedence, including this.  Because a new language is easier to learn if its rules are familiar, you see.  Which is why we still, today, have extremely popular languages maintaining compatibility with a language from 1969 — so old that it probably couldn&amp;#8217;t get a programming&amp;nbsp;job.&lt;/p&gt;
&lt;p&gt;Honestly, if your language is any higher-level than C, I&amp;#8217;m not sure bit operators deserve to be operators at all.  Free those characters up to do something else.  Consider having a first-class bitfield type; then 99% of the use of bit operations would go&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;Quick test: &lt;code&gt;1 &amp;amp; 2 == 2&lt;/code&gt; evaluates to 1 with C precedence, false otherwise.  Or just look at a precedence table: if equality appears &lt;em&gt;between&lt;/em&gt; bitwise ops and other math ops, that&amp;#8217;s C&amp;nbsp;style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A bit wrong:&lt;/strong&gt; D, expr, JavaScript, Perl 5, &lt;span class="caps"&gt;PHP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wisened up:&lt;/strong&gt; F# (ops are &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt; &lt;code&gt;|||&lt;/code&gt; &lt;code&gt;^^^&lt;/code&gt;), Go, Julia, Lua (bitwise ops are new in 5.3), Perl 6 (ops are &lt;code&gt;+&amp;amp;&lt;/code&gt; &lt;code&gt;+|&lt;/code&gt; &lt;code&gt;+^&lt;/code&gt;), Python, Ruby, Rust, &lt;span class="caps"&gt;SQL&lt;/span&gt;, Swift, Unix&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; C# and Java have C&amp;#8217;s precedence, but forbid using bitwise operators on booleans, so the quick test is a compile-time error.  Lisp-likes have no operator&amp;nbsp;precedence.&lt;/p&gt;
&lt;h2 id="negative-modulo"&gt;&lt;a class="toclink" href="#negative-modulo"&gt;Negative&amp;nbsp;modulo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The modulo operator, &lt;code&gt;%&lt;/code&gt;, finds the remainder after division.  Thus you might think that this always&amp;nbsp;holds:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 &amp;lt;= a % b &amp;lt; abs(b)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But no — if &lt;code&gt;a&lt;/code&gt; is negative, C will produce a negative value.  (Well, since C99; before that it was unspecified, which is probably worse.)  This is so &lt;code&gt;a / b * b + a % b&lt;/code&gt; is always equal to &lt;code&gt;a&lt;/code&gt;.  Truncating integer division rounds &lt;em&gt;towards zero&lt;/em&gt;, so the sign of &lt;code&gt;a % b&lt;/code&gt; always needs to be away from&amp;nbsp;zero.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve never found this behavior (or the above equivalence) useful.  An easy example is that checking for odd numbers with &lt;code&gt;x % 2 == 1&lt;/code&gt; will fail for negative numbers, which produce -1.  But the opposite behavior can be pretty&amp;nbsp;handy.&lt;/p&gt;
&lt;p&gt;Consider the problem of having &lt;code&gt;n&lt;/code&gt; items that you want to arrange into rows with &lt;code&gt;c&lt;/code&gt; columns.  A calendar, say; you want to include enough empty cells to fill out the last row.  &lt;code&gt;n % c&lt;/code&gt; gives you the number of items on the last row, so &lt;code&gt;c - n % c&lt;/code&gt; seems like it will give you the number of empty spaces.  But if the last row is &lt;em&gt;already full&lt;/em&gt;, then &lt;code&gt;n % c&lt;/code&gt; is zero, and &lt;code&gt;c - n % c&lt;/code&gt; equals &lt;code&gt;c&lt;/code&gt;!  You&amp;#8217;ll have either a double-width row or a spare row of empty cells.  Fixing this requires treating &lt;code&gt;n % c == 0&lt;/code&gt; as a special case, which is&amp;nbsp;unsatisfying.&lt;/p&gt;
&lt;p&gt;Ah, but if we have positive &lt;code&gt;%&lt;/code&gt;, the answer is simply&amp;#8230;  &lt;code&gt;-n % c&lt;/code&gt;!  Consider this number line for &lt;code&gt;n&lt;/code&gt; = 5 and &lt;code&gt;c&lt;/code&gt; =&amp;nbsp;3:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-6      -3       0       3       6
 | - x x | x x x | x x x | x x - |
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;a % b&lt;/code&gt; tells you how far to count &lt;em&gt;down&lt;/em&gt; to find a multiple of &lt;code&gt;b&lt;/code&gt;.  For positive &lt;code&gt;a&lt;/code&gt;, that means &amp;#8220;backtracking&amp;#8221; over &lt;code&gt;a&lt;/code&gt; itself and finding a smaller number.  For &lt;em&gt;negative&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;, that means continuing further away from zero.  If you look at negative numbers as the mirror image of positive numbers, then &lt;code&gt;%&lt;/code&gt; on a positive number tells you how to much to file off to get a multiple, whereas &lt;code&gt;%&lt;/code&gt; on a negative number tells you how much further to go to get a multiple.  &lt;code&gt;5 % 3&lt;/code&gt; is 2, but &lt;code&gt;-5 % 3&lt;/code&gt; is 1.  And of course, &lt;code&gt;-6 % 3&lt;/code&gt; is still zero, so that&amp;#8217;s not a special&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;Positive &lt;code&gt;%&lt;/code&gt; effectively lets you &lt;em&gt;choose&lt;/em&gt; whether to round up or down.  It doesn&amp;#8217;t come up often, but when it&amp;#8217;s handy, it&amp;#8217;s &lt;em&gt;really&lt;/em&gt;&amp;nbsp;handy.&lt;/p&gt;
&lt;p&gt;(I have no strong opinion on what &lt;code&gt;5 % -3&lt;/code&gt; should be; I don&amp;#8217;t think I&amp;#8217;ve ever tried to use &lt;code&gt;%&lt;/code&gt; with a negative divisor.  Python makes it negative; Pascal makes it positive.  Wikipedia has a &lt;a href="https://en.wikipedia.org/wiki/Modulo_operation"&gt;whole big chart&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Quick test: &lt;code&gt;-5 % 3&lt;/code&gt; is -2 with C semantics, 1 with &amp;#8220;positive&amp;#8221;&amp;nbsp;semantics.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leftovers:&lt;/strong&gt; C#, D, expr, Go, Java, JavaScript, OCaml, PowerShell, &lt;span class="caps"&gt;PHP&lt;/span&gt;, Rust, Scala, &lt;span class="caps"&gt;SQL&lt;/span&gt;, Swift, Unix shells, VimL, Visual Basic.  Notably, some of these languages don&amp;#8217;t even &lt;em&gt;have&lt;/em&gt; integer&amp;nbsp;division.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paying dividends:&lt;/strong&gt; Dart, &lt;span class="caps"&gt;MUMPS&lt;/span&gt; (&lt;code&gt;#&lt;/code&gt;), Perl, Python, R (&lt;code&gt;%%&lt;/code&gt;), Ruby, Smalltalk (&lt;code&gt;\\\\&lt;/code&gt;), Standard &lt;span class="caps"&gt;ML&lt;/span&gt;,&amp;nbsp;Tcl.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Ada, Haskell, Julia, many Lisps, &lt;span class="caps"&gt;MATLAB&lt;/span&gt;, &lt;span class="caps"&gt;VHDL&lt;/span&gt;, and others have separate &lt;code&gt;mod&lt;/code&gt; (Python-like) and &lt;code&gt;rem&lt;/code&gt; (C-like) operators.  CoffeeScript has separate &lt;code&gt;%&lt;/code&gt; (C-like) and &lt;code&gt;%%&lt;/code&gt; (Python-like)&amp;nbsp;operators.&lt;/p&gt;
&lt;h2 id="leading-zero-for-octal"&gt;&lt;a class="toclink" href="#leading-zero-for-octal"&gt;Leading zero for&amp;nbsp;octal&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Octal notation like &lt;code&gt;0777&lt;/code&gt; has three&amp;nbsp;uses.&lt;/p&gt;
&lt;p&gt;One: to make a file mask to pass to &lt;code&gt;chmod()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Two: to confuse people when they write &lt;code&gt;013&lt;/code&gt; and it comes out as&amp;nbsp;11.&lt;/p&gt;
&lt;p&gt;Three: to confuse people when they write &lt;code&gt;018&lt;/code&gt; and get a syntax&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;If you absolutely must have octal (?!) in your language, it&amp;#8217;s fine to use &lt;code&gt;0o777&lt;/code&gt;.  Really.  No one will mind.  Or you can go the whole distance and allow literals written in &lt;em&gt;any&lt;/em&gt; base, as several languages&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gets a zero:&lt;/strong&gt; awk (gawk only), Clojure, Go, Groovy, Java, JavaScript, m4, Perl 5, &lt;span class="caps"&gt;PHP&lt;/span&gt;, Python 2, Unix&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;G0od:&lt;/strong&gt; ECMAScript 6, Eiffel (&lt;code&gt;0c&lt;/code&gt; — cute!), F#, Haskell, Julia, Nemerle, Nim, OCaml, Perl 6, Python 3, Ruby, Rust, Scheme (&lt;code&gt;#o&lt;/code&gt;), Swift,&amp;nbsp;Tcl.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Based literals:&lt;/strong&gt; Ada (&lt;code&gt;8#777#&lt;/code&gt;), Bash (&lt;code&gt;8#777&lt;/code&gt;), Erlang (&lt;code&gt;8#777&lt;/code&gt;), Icon (&lt;code&gt;8r777&lt;/code&gt;), J (&lt;code&gt;8b777&lt;/code&gt;), Perl 6 (&lt;code&gt;:8&amp;lt;777&amp;gt;&lt;/code&gt;), PostScript (&lt;code&gt;8#777&lt;/code&gt;), Smalltalk (&lt;code&gt;8r777&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; &lt;span class="caps"&gt;BASIC&lt;/span&gt; uses &lt;code&gt;&amp;amp;O&lt;/code&gt; and &lt;code&gt;&amp;amp;H&lt;/code&gt; prefixes for octal and hex.  bc and Forth allow the base used to interpret literals to be changed on the fly, via &lt;code&gt;ibase&lt;/code&gt; and &lt;code&gt;BASE&lt;/code&gt; respectively.  C#, D, expr, Lua, Scala, and Standard &lt;span class="caps"&gt;ML&lt;/span&gt; have no octal literals at all.  Some &lt;span class="caps"&gt;COBOL&lt;/span&gt; extensions use &lt;code&gt;O#&lt;/code&gt; and &lt;code&gt;H#&lt;/code&gt;/&lt;code&gt;X#&lt;/code&gt; prefixes for octal and hex.  Fortran uses the slightly odd &lt;code&gt;O'777'&lt;/code&gt; syntax.  &lt;/p&gt;
&lt;h2 id="no-power-operator"&gt;&lt;a class="toclink" href="#no-power-operator"&gt;No power&amp;nbsp;operator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perhaps this makes sense in C, since it doesn&amp;#8217;t correspond to an actual instruction on most CPUs, but in JavaScript?  If you can make &lt;code&gt;+&lt;/code&gt; work for strings, I think you can add a &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re willing to ditch the bitwise operators (or lessen their importance a bit), you can even use &lt;code&gt;^&lt;/code&gt;, as most people would write in regular &lt;span class="caps"&gt;ASCII&lt;/span&gt;&amp;nbsp;text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Powerless:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, C#, Eiffel, Erlang, expr, Forth,&amp;nbsp;Go.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Two out of two stars:&lt;/strong&gt; Ada, &lt;span class="caps"&gt;ALGOL&lt;/span&gt; (&lt;code&gt;↑&lt;/code&gt; works too), &lt;span class="caps"&gt;COBOL&lt;/span&gt;, CoffeeScript, ECMAScript 7, Fortran, F#, Groovy, OCaml, Perl, &lt;span class="caps"&gt;PHP&lt;/span&gt;, Python, Ruby, Unix&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I tip my hat:&lt;/strong&gt; awk, &lt;span class="caps"&gt;BASIC&lt;/span&gt;, bc, &lt;span class="caps"&gt;COBOL&lt;/span&gt;, fish,&amp;nbsp;Lua.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Otherwise powerful:&lt;/strong&gt; &lt;span class="caps"&gt;APL&lt;/span&gt; (&lt;code&gt;⋆&lt;/code&gt;), D (&lt;code&gt;^^&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Lisps tend to have a named function rather than a dedicated operator (e.g. &lt;code&gt;Math/pow&lt;/code&gt; in Clojure, &lt;code&gt;expt&lt;/code&gt; in Common Lisp), but since operators are regular functions, this doesn&amp;#8217;t stand out nearly so much.  Haskell uses all three of &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, and &lt;code&gt;**&lt;/code&gt; for &lt;a href="http://stackoverflow.com/q/6400568/17875"&gt;typing reasons&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="c-style-for-loops"&gt;&lt;a class="toclink" href="#c-style-for-loops"&gt;C-style for&amp;nbsp;loops&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This construct is bad.  It very rarely matches what a human actually wants to do, which 90% of the time is &amp;#8220;go through this list of stuff&amp;#8221; or &amp;#8220;count from 1 to 10&amp;#8221;.  A C-style &lt;code&gt;for&lt;/code&gt; obscures those wishes.  The syntax is downright goofy, too: nothing else in the language uses &lt;code&gt;;&lt;/code&gt; as a delimiter and repeatedly executes only &lt;em&gt;part&lt;/em&gt; of a line.  It&amp;#8217;s like a tuple of&amp;nbsp;statements.&lt;/p&gt;
&lt;p&gt;I said in my &lt;a href="https://eev.ee/blog/2016/11/18/iteration-in-one-language-then-all-the-others/"&gt;previous post about iteration&lt;/a&gt; that having an iteration protocol requires either objects or closures, but I realize that&amp;#8217;s not true.  I even disproved it in the same post.  Lua&amp;#8217;s own iteration protocol can be implemented without closures — the semantics of &lt;code&gt;for&lt;/code&gt; involve keeping a persistent state value and passing it to the iterator function every time.  It could even be implemented in C!  Awkwardly.  And with a bunch of macros.  Which aren&amp;#8217;t hygenic in C.  Hmm,&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Loopy:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, bc,&amp;nbsp;Fortran.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cool and collected:&lt;/strong&gt; C#, Clojure, D, Delphi (recent), ECMAScript 6, Eiffel (recent), Go, Groovy, Icon, Inform 7, Java, Julia, Logo, Lua, Nemerle, Nim, Objective-C, Perl, &lt;span class="caps"&gt;PHP&lt;/span&gt;, PostScript, Prolog, Python, R, Rust, Scala, Smalltalk, Swift, Tcl, Unix shells, Visual&amp;nbsp;Basic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Functional languages and Lisps are laughing at the rest of us here.  awk has &lt;code&gt;for...in&lt;/code&gt;, but it doesn&amp;#8217;t iterate arrays in order which makes it rather less useful.  JavaScript (pre &lt;span class="caps"&gt;ES6&lt;/span&gt;) has &lt;em&gt;both&lt;/em&gt; &lt;code&gt;for...in&lt;/code&gt; and &lt;code&gt;for each...in&lt;/code&gt;, but both are differently broken, so you usually end up using C-style &lt;code&gt;for&lt;/code&gt; or external iteration.  &lt;span class="caps"&gt;BASIC&lt;/span&gt; has an ergonomic numeric loop, but no iteration loop.  Ruby mostly uses external iteration, and its &lt;code&gt;for&lt;/code&gt; block is actually expressed in those&amp;nbsp;terms.&lt;/p&gt;
&lt;h2 id="switch-with-default-fallthrough"&gt;&lt;a class="toclink" href="#switch-with-default-fallthrough"&gt;Switch with default&amp;nbsp;fallthrough&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;ve &lt;a href="https://eev.ee/blog/2016/09/18/the-curious-case-of-the-switch-statement/#some-objections"&gt;been through this before&lt;/a&gt;.  Wanting completely separate code per &lt;code&gt;case&lt;/code&gt; is, by far, the most common thing to want to do.  It makes no sense to have to explicitly opt &lt;em&gt;out&lt;/em&gt; of the more obvious&amp;nbsp;behavior.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Breaks my heart:&lt;/strong&gt; Java,&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follows through:&lt;/strong&gt; Ada, &lt;span class="caps"&gt;BASIC&lt;/span&gt;, CoffeeScript, Go (has a &lt;code&gt;fallthrough&lt;/code&gt; statement), Lisps, Ruby, Swift (has a &lt;code&gt;fallthrough&lt;/code&gt; statement), Unix&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; C# and D require &lt;code&gt;break&lt;/code&gt;, but require &lt;em&gt;something&lt;/em&gt; one way or the other — implicit fallthrough is disallowed except for empty &lt;code&gt;case&lt;/code&gt;s.  Perl 5 historically had no &lt;code&gt;switch&lt;/code&gt; block built in, but it comes with a &lt;a href="http://perldoc.perl.org/5.8.8/Switch.html"&gt;Switch&lt;/a&gt; module, and the last seven releases have had an &lt;a href="http://perldoc.perl.org/perlsyn.html#Switch-Statements"&gt;experimental &lt;code&gt;given&lt;/code&gt; block&lt;/a&gt; which I stress is &lt;em&gt;still&lt;/em&gt; experimental.  Python has no &lt;code&gt;switch&lt;/code&gt; block.  Erlang, Haskell, and Rust have pattern-matching instead (which doesn&amp;#8217;t allow fallthrough at&amp;nbsp;all).&lt;/p&gt;
&lt;h2 id="type-first"&gt;&lt;a class="toclink" href="#type-first"&gt;Type&amp;nbsp;first&lt;/a&gt;&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In C, this isn&amp;#8217;t &lt;em&gt;too&lt;/em&gt; bad.  You get into problems when you remember that it&amp;#8217;s common for type names to be all&amp;nbsp;lowercase.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Is that a useless expression, or a declaration?  It depends entirely on whether &lt;code&gt;foo&lt;/code&gt; is a variable or a&amp;nbsp;type.&lt;/p&gt;
&lt;p&gt;It gets a little weirder when you consider that there are type names with spaces in them.  And storage classes.  And qualifiers.  And sometimes part of the type comes &lt;em&gt;after&lt;/em&gt; the&amp;nbsp;name.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="n"&gt;_Atomic&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That&amp;#8217;s not even getting into the syntax for types of function pointers, which might have arbitrary amounts of stuff after the variable&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;And then C++ came along with generics, which means a type name might &lt;em&gt;also&lt;/em&gt; have other type names nested &lt;em&gt;arbitrarily deep&lt;/em&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;basic_string&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;const_iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;And that&amp;#8217;s just a declaration!  Imagine if there were an assignment in there&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;The great thing about static typing is that I know the types of all the variables, but that advantage is somewhat lessened if I can&amp;#8217;t tell &lt;em&gt;what the variables are&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Between type-first, function pointer syntax, Turing-complete duck-typed templates, and C++&amp;#8217;s initialization syntax, there are several ways where &lt;a href="https://en.wikipedia.org/wiki/Most_vexing_parse"&gt;parsing C++ is ambiguous&lt;/a&gt; or even &lt;a href="http://blog.reverberate.org/2013/08/parsing-c-is-literally-undecidable.html"&gt;undecidable&lt;/a&gt;!  &amp;#8220;Undecidable&amp;#8221; here means that there exist C++ programs which cannot even be parsed into a syntax tree, because the same syntax means two different things depending on whether some expression is a &lt;em&gt;value&lt;/em&gt; or a &lt;em&gt;type&lt;/em&gt;, and that question can depend on an endlessly recursive template instantiation.  (&lt;a href="http://yosefk.com/c++fqa/web-vs-c++.html#misfeature-2"&gt;This is also a great example of ambiguity&lt;/a&gt;, where &lt;code&gt;x * y(z)&lt;/code&gt; could be either an expression or a&amp;nbsp;declaration.)&lt;/p&gt;
&lt;p&gt;Contrast with, say,&amp;nbsp;Rust:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is easy to parse, both for a human and a computer.  The thing before the colon &lt;em&gt;must&lt;/em&gt; be a variable name, and it stands out immediately; the thing after the colon &lt;em&gt;must&lt;/em&gt; be a type name.  Even better, Rust has pretty good type inference, so the type is probably unnecessary&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Of course, languages with no type declarations whatsoever are immune to this&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most vexing:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, &lt;span class="caps"&gt;ALGOL&lt;/span&gt;, C#, D (though &lt;code&gt;[]&lt;/code&gt; goes on the type), Fortran, Java, Perl&amp;nbsp;6.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Looks Lovely:&lt;/strong&gt; Ada, Boo, F#, Go, Python 3 (via annotation syntax and the &lt;code&gt;typing&lt;/code&gt; module), Rust, Swift,&amp;nbsp;TypeScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; &lt;span class="caps"&gt;BASIC&lt;/span&gt; uses trailing type sigils to indicate scalar&amp;nbsp;types.&lt;/p&gt;
&lt;h2 id="weak-typing"&gt;&lt;a class="toclink" href="#weak-typing"&gt;Weak&amp;nbsp;typing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please note: &lt;a href="https://eev.ee/blog/2016/07/26/the-hardest-problem-in-computer-science/#loose-typing"&gt;this is not the opposite of static typing&lt;/a&gt;.  Weak typing is more about the runtime behavior of &lt;em&gt;values&lt;/em&gt; — if I try to use a value of type T as though it were of type U, will it be implicitly&amp;nbsp;converted?&lt;/p&gt;
&lt;p&gt;C lets you assign pointers to &lt;code&gt;int&lt;/code&gt; variables and then take square roots of them, which seems like a bad idea to me.  C++ agreed and nixed this, but also introduced the ability to make your own custom types implicitly convertible to as many other types you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;This one is pretty clearly a spectrum, and I don&amp;#8217;t have a clear line.  For example, I don&amp;#8217;t fault Python for implicitly converting between &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt;, because &lt;code&gt;int&lt;/code&gt; is infinite-precision and &lt;code&gt;float&lt;/code&gt; is 64-bit, so it&amp;#8217;s &lt;em&gt;usually&lt;/em&gt; fine.  But I&amp;#8217;m a lot more suspicious of C, which lets you assign an &lt;code&gt;int&lt;/code&gt; to a &lt;code&gt;char&lt;/code&gt; without complaint.  (Well, okay.  Literal integers in C are &lt;code&gt;int&lt;/code&gt;s, which poses a slight&amp;nbsp;problem.)&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;do&lt;/em&gt; count a combined addition/concatenation operator that accepts different types of arguments as a form of weak&amp;nbsp;typing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Weak:&lt;/strong&gt; JavaScript (&lt;code&gt;+&lt;/code&gt;), &lt;span class="caps"&gt;PHP&lt;/span&gt;, Unix shells (almost everything&amp;#8217;s a string, but even arrays/scalars are somewhat&amp;nbsp;interchangeable).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strong:&lt;/strong&gt; F#, Go (explicit numeric casts), Haskell, Python, Rust (explicit numeric&amp;nbsp;casts).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt; only has integers; even fixed-point values are stored in integers, and the compiler has no notion of a fixed-point type, making it the weakest language imaginable.  C++ and Scala both allow defining implicit conversions, for better or worse.  Perl 5 is weak, &lt;em&gt;but&lt;/em&gt; it avoids most of the ambiguity by having entirely separate sets of operators for string vs numeric operations.  Python 2 is mostly strong, but that whole interchangeable bytes/text thing sure caused some ruckus.  Tcl only has&amp;nbsp;strings.&lt;/p&gt;
&lt;h2 id="integer-division"&gt;&lt;a class="toclink" href="#integer-division"&gt;Integer&amp;nbsp;division&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Hey, new programmers!&amp;#8221; you may find yourself saying.  &amp;#8220;Don&amp;#8217;t worry, it&amp;#8217;s just like math, see?  Here&amp;#8217;s how to use $&lt;span class="caps"&gt;LANGUAGE&lt;/span&gt; as a&amp;nbsp;calculator.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Oh boy!&amp;#8221; says your protégé.  &amp;#8220;Let&amp;#8217;s see what 7 ÷ 2 is!  Oh, it&amp;#8217;s 3.  I think the computer is&amp;nbsp;broken.&amp;#8221;&lt;/p&gt;
&lt;p&gt;They&amp;#8217;re right!  It &lt;em&gt;is&lt;/em&gt; broken.  I have genuinely seen a non-trivial number of people come into #python thinking division is &amp;#8220;broken&amp;#8221; because of&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;To be fair, C is pretty consistent about making math operations always produce a value whose type matches one of the arguments.  It&amp;#8217;s also unclear whether such division should produce a &lt;code&gt;float&lt;/code&gt; or a &lt;code&gt;double&lt;/code&gt;.  Inferring from context would make sense, but that&amp;#8217;s not something C is really big&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Quick test: &lt;code&gt;7 / 2&lt;/code&gt; is 3½, not&amp;nbsp;3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integrous:&lt;/strong&gt; bc, C#, D, expr, F#, Fortran, Go, OCaml, Python 2, Ruby, Rust (hard to avoid), Unix&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Afloat:&lt;/strong&gt; awk (no integers), Clojure (produces a rational!), Groovy, JavaScript (no integers), Lua (no integers until 5.3), Nim, Perl 5 (no integers), Perl 6, &lt;span class="caps"&gt;PHP&lt;/span&gt;, Python&amp;nbsp;3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Haskell disallows &lt;code&gt;/&lt;/code&gt; on integers.  Nim, Haskell, Perl 6, Python, and probably others have separate integral division operators: &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, and &lt;code&gt;//&lt;/code&gt;,&amp;nbsp;respectively.&lt;/p&gt;
&lt;h2 id="bytestrings"&gt;&lt;a class="toclink" href="#bytestrings"&gt;Bytestrings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Strings&amp;#8221; in C are arrays of 8-bit characters.  They aren&amp;#8217;t really strings at all, since they can&amp;#8217;t hold the vast majority of characters without some further form of encoding.  Exactly what the encoding is and how to handle it is left entirely up to the programmer.  This is a pain in the&amp;nbsp;ass.&lt;/p&gt;
&lt;p&gt;Some languages caught wind of this Unicode thing in the 90s and decided to solve this problem once and for all by making &amp;#8220;wide&amp;#8221; strings with 16-bit characters.  (Even C95 has this, in the form of &lt;code&gt;wchar_t*&lt;/code&gt; and &lt;code&gt;L"..."&lt;/code&gt; literals.)  Unicode, you see, would never have more than 65,536&amp;nbsp;characters.&lt;/p&gt;
&lt;p&gt;Whoops, so much for that.  Now we have strings encoded as &lt;span class="caps"&gt;UTF&lt;/span&gt;-16 rather than &lt;span class="caps"&gt;UTF&lt;/span&gt;-8, so we&amp;#8217;re paying extra storage cost and we &lt;em&gt;still&lt;/em&gt; need to write extra code to do basic operations right.  Or we forget, and then later we have to track down a bunch of wonky bugs because someone typed a&amp;nbsp;💩.&lt;/p&gt;
&lt;p&gt;Note that handling characters/codepoints is very different from handling &lt;em&gt;glyphs&lt;/em&gt;, i.e. the distinct shapes you see on screen.  Handling glyphs doesn&amp;#8217;t even really make sense outside the context of a font, because fonts are free to make up whatever ligatures they want.  Remember &lt;a href="https://eev.ee/blog/2016/04/12/apple-did-not-invent-emoji/#gender-diversity"&gt;&amp;#8220;diverse&amp;#8221; emoji&lt;/a&gt;?  Those are ligatures of three to seven characters, completely invented by a font vendor.  A programming language can&amp;#8217;t reliably count the display length of that, especially when new combining behaviors could be introduced at any&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Also, it doesn&amp;#8217;t matter &lt;em&gt;how&lt;/em&gt; you solve this problem, as long as it appears to be solved.  I believe Ruby uses bytestrings, for example, but they know their own encoding, so they can be correctly handled as sequences of codepoints.  Having a separate non-default type or methods does &lt;em&gt;not&lt;/em&gt; count, because everyone will still use the wrong thing first — sorry, Python&amp;nbsp;2.&lt;/p&gt;
&lt;p&gt;Quick test: what&amp;#8217;s the length of &amp;#8220;💩&amp;#8221;?  If 1, you have real unencoded strings.  If 2, you have &lt;span class="caps"&gt;UTF&lt;/span&gt;-16 strings.  If 4, you have &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 strings.  If something else, I don&amp;#8217;t know what the heck is going&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Totally bytes:&lt;/strong&gt; Go, Lua, Python 2 (separate &lt;code&gt;unicode&lt;/code&gt; type).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comes up short:&lt;/strong&gt; Java,&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One hundred emoji:&lt;/strong&gt; Python 3, Ruby, Rust, Swift (even gets combining characters&amp;nbsp;right!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Go&amp;#8217;s strings are explicitly arbitrary byte sequences, but iterating over a string with &lt;code&gt;for..range&lt;/code&gt; decodes &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 code points.  Perl 5 gets the quick test right if you put &lt;code&gt;use utf8;&lt;/code&gt; at the top of the file, but Perl 5&amp;#8217;s Unicode support is such a &lt;a href="http://perldoc.perl.org/perlunicode.html"&gt;confusing clusterfuck&lt;/a&gt; that I can&amp;#8217;t really give it a&amp;nbsp;💯.&lt;/p&gt;
&lt;p&gt;Hmm.  This one is kind of hard to track down for sure without either knowing a lot about internals or installing fifty different&amp;nbsp;interpreters/compilers.&lt;/p&gt;
&lt;h2 id="increment-and-decrement"&gt;&lt;a class="toclink" href="#increment-and-decrement"&gt;Increment and&amp;nbsp;decrement&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#8217;t think there are too many compelling reasons to have &lt;code&gt;++&lt;/code&gt;.  It means the same as &lt;code&gt;+= 1&lt;/code&gt;, which is still nice and short.  The only difference is that people can do stupid unreadable tricks with &lt;code&gt;++&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One exception: it &lt;em&gt;is&lt;/em&gt; possible to overload &lt;code&gt;++&lt;/code&gt; in ways that don&amp;#8217;t make sense as &lt;code&gt;+= 1&lt;/code&gt; — for example, C++ uses &lt;code&gt;++&lt;/code&gt; to advance iterators, which may do any arbitrary work under the&amp;nbsp;hood.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Double plus ungood:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, awk, C#, D, Go, Java, JavaScript, Perl, Unix shells,&amp;nbsp;Vala.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Double plus good:&lt;/strong&gt; Lua (which doesn&amp;#8217;t have &lt;code&gt;+=&lt;/code&gt; either), Python, Ruby, Rust, Swift (removed in&amp;nbsp;v3).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Perl 5 and &lt;span class="caps"&gt;PHP&lt;/span&gt; both allow &lt;code&gt;++&lt;/code&gt; on strings, in which case it increments letters or something, but I don&amp;#8217;t know if much real code has ever used&amp;nbsp;this.&lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;a class="toclink" href="#_1"&gt;&lt;code&gt;!&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A pet peeve.  Spot the&amp;nbsp;difference:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;looks_like_rain&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;looks_like_rain&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That single &lt;code&gt;!&lt;/code&gt; is ridiculously subtle, which seems wrong to me when it makes an expression mean its &lt;em&gt;polar opposite&lt;/em&gt;.  Surely it should stick out like a sore thumb.  The left parenthesis makes it worse, too; it blends in slightly as just&amp;nbsp;noise.&lt;/p&gt;
&lt;p&gt;It helps a bit to space after the &lt;code&gt;!&lt;/code&gt; in cases like&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;looks_like_rain&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But this seems to be curiously rare.  The easy solution is to just spell the operator &lt;code&gt;not&lt;/code&gt;.  At which point the other two might as well be &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Interestingly enough, C95 specifies &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, and &lt;a href="http://en.cppreference.com/w/c/language/operator_alternative"&gt;some others&lt;/a&gt; as standard alternative spellings, though I&amp;#8217;ve never seen them in any C code and I suspect existing projects would prefer I not use&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Not right:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, awk, C#, D, Go, Groovy, Java, JavaScript, Nemerle, &lt;span class="caps"&gt;PHP&lt;/span&gt;, R, Rust, Scala, Swift, Tcl,&amp;nbsp;Vala.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spelled out:&lt;/strong&gt; Ada, &lt;span class="caps"&gt;ALGOL&lt;/span&gt;, &lt;span class="caps"&gt;BASIC&lt;/span&gt;, &lt;span class="caps"&gt;COBOL&lt;/span&gt;, Erlang, F#, Fortran, Haskell, Inform 7, Lisps, Lua, Nim, OCaml, Pascal, PostScript, Python, Smalltalk, Standard &lt;span class="caps"&gt;ML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; &lt;span class="caps"&gt;APL&lt;/span&gt; and Julia both use &lt;code&gt;~&lt;/code&gt;, which is at least easier to pick out, which is more than I can say for most of &lt;span class="caps"&gt;APL&lt;/span&gt;.  bc and expr, which are really calculators, have no concept of Boolean operations.  Forth and Icon, which are not calculators, don&amp;#8217;t seem to either.  Inform 7 often blends the negation into the verb, e.g. &lt;code&gt;if the player does not have...&lt;/code&gt;.  Perl and Ruby have &lt;em&gt;both&lt;/em&gt; symbolic and named Boolean operators (Perl 6 has even more), with &lt;em&gt;different precedence&lt;/em&gt; (which inside &lt;code&gt;if&lt;/code&gt; won&amp;#8217;t matter); I believe Perl 5 prefers the words and Ruby prefers the symbols.  Perl and Ruby also both have a separate &lt;code&gt;unless&lt;/code&gt; block, with the opposite meaning to &lt;code&gt;if&lt;/code&gt;.  Python has &lt;code&gt;is not&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operators.&lt;/p&gt;
&lt;h2 id="single-return-and-out-parameters"&gt;&lt;a class="toclink" href="#single-return-and-out-parameters"&gt;Single return and out&amp;nbsp;parameters&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because C can only return a single value, and that value is often an indication of failure for the sake of an &lt;code&gt;if&lt;/code&gt;, &amp;#8220;out&amp;#8221; parameters are somewhat&amp;nbsp;common.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;get_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It&amp;#8217;s not immediately clear whether &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are input or output.  Sometimes they might function as both.  (And of course, in this silly example, you&amp;#8217;d be better off returning a single &lt;code&gt;point&lt;/code&gt; struct.  Or would you use a &lt;code&gt;point&lt;/code&gt; out parameter because returning structs is potentially&amp;nbsp;expensive?)&lt;/p&gt;
&lt;p&gt;Some languages have doubled down on this by adding syntax to declare &amp;#8220;out&amp;#8221; parameters, which removes the ambiguity in the function &lt;em&gt;definition&lt;/em&gt;, but makes it worse in function &lt;em&gt;calls&lt;/em&gt;.  In the above example, using &lt;code&gt;&amp;amp;&lt;/code&gt; on an argument is at least a decent hint that the function wants to write to those values.  If you have implicit out parameters or pass-by-reference or whatever, that would just be &lt;code&gt;get_point(x, y)&lt;/code&gt; and you&amp;#8217;d have no indication that those arguments are special in any&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;The vast majority of the time, this can be expressed in a more straightforward way by returning multiple&amp;nbsp;values:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_point&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That was intended as Python, but &lt;em&gt;technically&lt;/em&gt;, Python doesn&amp;#8217;t have multiple returns!  It seems to, but it&amp;#8217;s really a combination of several factors: a tuple type, the ability to make a tuple literal with just commas, and the ability to &lt;em&gt;unpack&lt;/em&gt; a tuple via multiple assignment.  In the end it works just as well.  Also this is a way better use of the comma operator than in&amp;nbsp;C.&lt;/p&gt;
&lt;p&gt;But the exact same code could appear in Lua, which has multiple return/assignment as an explicit feature&amp;#8230;  and &lt;em&gt;no&lt;/em&gt; tuples.  The difference becomes obvious if you try to assign the return value to a single variable&amp;nbsp;instead:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_point&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In Python, &lt;code&gt;point&lt;/code&gt; would be a tuple containing both return values.  In Lua, &lt;code&gt;point&lt;/code&gt; would be the &lt;code&gt;x&lt;/code&gt; value, and &lt;code&gt;y&lt;/code&gt; would be silently discarded.  I don&amp;#8217;t tend to be a fan of silently throwing data away, but I have to admit that Lua makes pretty good use of this in several places for &amp;#8220;optional&amp;#8221; return values that the caller can completely ignore if desired.  An existing function can even be extended to return more values than before — that would break callers in Python, but work just fine in&amp;nbsp;Lua.&lt;/p&gt;
&lt;p&gt;(Also, to briefly play devil&amp;#8217;s advocate: I once saw Python code that returned &lt;strong&gt;14&lt;/strong&gt; values all with very complicated values, types, and semantics.  Maybe don&amp;#8217;t do that.  I think I cleaned it up to return an object, which simplified the calling code considerably&amp;nbsp;too.)&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also possible to half-ass this.  ECMAScript&amp;nbsp;6::&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;get_point&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_point&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It &lt;em&gt;works&lt;/em&gt;, but it doesn&amp;#8217;t actually &lt;em&gt;look&lt;/em&gt; like multiple return.  The trouble is that JavaScript has C&amp;#8217;s comma operator &lt;em&gt;and&lt;/em&gt; C&amp;#8217;s variable declaration syntax, so neither of the above constructs could&amp;#8217;ve left off the brackets without significantly changing the&amp;nbsp;syntax:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;get_point&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Whoops!  This uses the comma operator, which evaluates to its last&lt;/span&gt;
    &lt;span class="c1"&gt;// operand, so it just returns 2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Whoops!  This is multiple declaration, where each variable gets its own &amp;quot;=&amp;quot;,&lt;/span&gt;
&lt;span class="c1"&gt;// so it assigns nothing to x and the return value to y&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_point&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Now x is undefined and y is 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is still better than either out parameters or returning an explicit struct that needs manual unpacking, but it&amp;#8217;s not as good as comma-delimited tuples.  Note that some languages require parentheses around tuples (and also call them tuples), and I&amp;#8217;m arbitrarily counting that as better than&amp;nbsp;bracket.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Single return:&lt;/strong&gt; Ada, &lt;span class="caps"&gt;ALGOL&lt;/span&gt;, &lt;span class="caps"&gt;BASIC&lt;/span&gt;, C#, &lt;span class="caps"&gt;COBOL&lt;/span&gt;, Fortran, Groovy, Java,&amp;nbsp;Smalltalk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Half-assed multiple return:&lt;/strong&gt; C++11, D, ECMAScript 6, Erlang, &lt;span class="caps"&gt;PHP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiple return via tuples:&lt;/strong&gt; F#, Haskell, Julia, Nemerle, Nim, OCaml, Perl (just lists really), Python, Ruby, Rust, Scala, Standard &lt;span class="caps"&gt;ML&lt;/span&gt;, Swift,&amp;nbsp;Tcl.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Native multiple return:&lt;/strong&gt; Common Lisp, Go,&amp;nbsp;Lua.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; C# has explicit syntax for &lt;code&gt;out&lt;/code&gt; parameters, but it&amp;#8217;s a compile-time error to not assign to all of them, which is slightly better than C.  Forth is stack-based, and all return values are simply placed on the stack, so multiple return isn&amp;#8217;t a special case.  Unix shell functions don&amp;#8217;t return values.  Visual Basic sets a return value by assigning to the function&amp;#8217;s name (?!), so good luck fitting multiple return in&amp;nbsp;there.&lt;/p&gt;
&lt;h2 id="silent-errors"&gt;&lt;a class="toclink" href="#silent-errors"&gt;Silent&amp;nbsp;errors&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most runtime errors in C are indicated by one of two mechanisms: returning an error code, or segfaulting.  Segfaulting is pretty noisy, so that&amp;#8217;s okay, except for the exploit potential and&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Returning an error code kinda sucks.  Those tend to be important, but nothing in the language actually reminds you to check them, and of course we silly squishy humans have the habit of assuming everything will succeed at all times.  Which is how I segfaulted &lt;code&gt;git&lt;/code&gt; two days ago: I found a spot where it didn&amp;#8217;t check for a &lt;code&gt;NULL&lt;/code&gt; returned as an&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;There are several alternatives here: exceptions, statically forcing the developer to check for an error code, or using something monad-like to statically force the developer to distinguish between an error and a valid return value.  Probably some others.  In the end I was surprised by how many languages went the exception&amp;nbsp;route.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quietly wrong:&lt;/strong&gt; Unix shells.  Wow, yeah, I&amp;#8217;m having a hard time naming anything else.  Good job, us!  And even Unix shells have &lt;code&gt;set -e&lt;/code&gt;; it&amp;#8217;s just&amp;nbsp;opt-in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exceptional:&lt;/strong&gt; Ada, C++, C#, D, Erlang, Forth, Java (exceptions are even part of function signature), JavaScript, Nemerle, Nim, Objective-C, OCaml, Perl 6, Python, Ruby, Smalltalk, Standard &lt;span class="caps"&gt;ML&lt;/span&gt;, Visual&amp;nbsp;Basic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Monadic:&lt;/strong&gt; Haskell (&lt;code&gt;Either&lt;/code&gt;), Rust (&lt;code&gt;Result&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt; doesn&amp;#8217;t really have many operations that can error, and those that do simply halt the script.  &lt;span class="caps"&gt;ALGOL&lt;/span&gt; apparently has something called &amp;#8220;mending&amp;#8221; that I don&amp;#8217;t understand.  Go tends to use &lt;em&gt;secondary&lt;/em&gt; return values, which calling code has to unpack, making them slightly harder to forget about; it also allows both the assignment and the error check together in the header of an &lt;code&gt;if&lt;/code&gt;.  Lisps have &lt;em&gt;conditions&lt;/em&gt; and &lt;code&gt;call/cc&lt;/code&gt;, which are different things entirely.  Lua and Perl 5 handle errors by taking down the whole program, but offer a construct that can catch that further up the stack, which is clumsy but enough to emulate &lt;code&gt;try..catch&lt;/code&gt;.  &lt;span class="caps"&gt;PHP&lt;/span&gt; has exceptions, &lt;em&gt;and&lt;/em&gt; errors (which are totally different), &lt;em&gt;and&lt;/em&gt; a lot of builtin functions that return error codes.  Swift has something that looks like exceptions, but it doesn&amp;#8217;t involve stack unwinding and does require some light annotation — apparently sugar for an &amp;#8220;out&amp;#8221; parameter holding an error.  Visual Basic, and I believe some other BASICs, decided C wasn&amp;#8217;t bad enough and introduced the bizarre &lt;code&gt;On Error Resume Next&lt;/code&gt; construct which does exactly what it sounds&amp;nbsp;like.&lt;/p&gt;
&lt;h2 id="nulls"&gt;&lt;a class="toclink" href="#nulls"&gt;Nulls&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions"&gt;billion dollar mistake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think it&amp;#8217;s considerably &lt;em&gt;worse&lt;/em&gt; in a statically typed language like C, because the whole point is that you can rely on the types.  But a &lt;code&gt;double*&lt;/code&gt; might be &lt;code&gt;NULL&lt;/code&gt;, which is not actually a pointer to a &lt;code&gt;double&lt;/code&gt;; it&amp;#8217;s a pointer to a segfault.  Other kinds of bad pointers are possible, of course, but those are more an issue of &lt;em&gt;memory&lt;/em&gt; safety; allowing any reference to be null violates &lt;em&gt;type&lt;/em&gt; safety.  The root of the problem is treating null as a possible &lt;em&gt;value&lt;/em&gt; of any type, when really it&amp;#8217;s its own type&amp;nbsp;entirely.&lt;/p&gt;
&lt;p&gt;The alternatives tend to be either opt-in nullability or an &amp;#8220;optional&amp;#8221; generic type (a monad!) which eliminates null as its own value entirely.  Notably, Swift does it both ways: optional types are indicated by a trailing &lt;code&gt;?&lt;/code&gt;, but that&amp;#8217;s just syntactic sugar for &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, while it&amp;#8217;s annoying to get a &lt;code&gt;None&lt;/code&gt; where I didn&amp;#8217;t expect one in Python, it&amp;#8217;s not like I&amp;#8217;m surprised.  I occasionally get a string where I expected a number, too.  The language explicitly leaves type concerns in my hands.  My real objection is to having a static type system that &lt;em&gt;lies&lt;/em&gt;.  So I&amp;#8217;m not going to list every single dynamic language here, because not only is it consistent with the rest of the type system, but they don&amp;#8217;t really have any machinery to prevent this&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nothing doing:&lt;/strong&gt; C#, D, Go, Java, Nim (non-nullable types are opt &lt;em&gt;in&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nullable types:&lt;/strong&gt; Swift (sugar for a&amp;nbsp;monad).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Monads:&lt;/strong&gt; F# (&lt;code&gt;Option&lt;/code&gt; — though technically F# also inherits &lt;code&gt;null&lt;/code&gt; from .&lt;span class="caps"&gt;NET&lt;/span&gt;), Haskell (&lt;code&gt;Maybe&lt;/code&gt;), Rust (&lt;code&gt;Option&lt;/code&gt;), Swift (&lt;code&gt;Optional&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; awk, Tcl, and Unix shells only have strings, so in a surprising twist, they have no concept of null whatsoever.  Java recently introduced an &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; type which explicitly may or may not contain a value, but since it&amp;#8217;s still a non-primitive, it could &lt;em&gt;also&lt;/em&gt; be &lt;code&gt;null&lt;/code&gt;.  C++17 doesn&amp;#8217;t quite have the same problem with &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;/code&gt;, since non-reference values can&amp;#8217;t be null.  Inform 7&amp;#8217;s &lt;code&gt;nothing&lt;/code&gt; value is an &lt;code&gt;object&lt;/code&gt; (the root of half of its type system), which means any &lt;code&gt;object&lt;/code&gt; variable might be &lt;code&gt;nothing&lt;/code&gt;, but any value of a more specific type cannot be &lt;code&gt;nothing&lt;/code&gt;.  JavaScript has &lt;em&gt;two&lt;/em&gt; null values, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.  Perl 6 is really big on static types, but claims its &lt;code&gt;Nil&lt;/code&gt; object doesn&amp;#8217;t exist, and I don&amp;#8217;t know how to even begin to unpack that.  R and &lt;span class="caps"&gt;SQL&lt;/span&gt; have a more mathematical kind of &lt;code&gt;NULL&lt;/code&gt;, which tends to e.g. vanish from&amp;nbsp;lists.&lt;/p&gt;
&lt;h2 id="assignment-as-expression"&gt;&lt;a class="toclink" href="#assignment-as-expression"&gt;Assignment as&amp;nbsp;expression&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How common a mistake is&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Well, I don&amp;#8217;t know, actually.  Maybe not &lt;em&gt;that&lt;/em&gt; common, save for among beginners.  But I sort of wonder whether allowing this buys us anything.  I can only think of two cases where it does.  One is with something like&amp;nbsp;iteration:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Typical linked list&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But this is only necessary in C in the first place because it has no first-class notion of iteration.  The other is shorthand for checking that a function returned a useful&amp;nbsp;value:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_pointer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But if a function returns &lt;code&gt;NULL&lt;/code&gt;, that&amp;#8217;s really an error condition, and presumably you have some other way to handle that&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;What does that leave?  The only time I remotely miss this in Python (where it&amp;#8217;s illegal) is when testing a regex.  You tend to see this a lot&amp;nbsp;instead.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x+y+z+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;re&lt;/code&gt; treats failure as an acceptable possibility and returns &lt;code&gt;None&lt;/code&gt;, rather than raising an exception.  I&amp;#8217;m not sure whether this was the right thing to do or not, but off the top of my head I can&amp;#8217;t think of too many other Python interfaces that &lt;em&gt;sometimes&lt;/em&gt; return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Freedom of expression:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, C#, Java, JavaScript, Perl, &lt;span class="caps"&gt;PHP&lt;/span&gt;,&amp;nbsp;Swift.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Makes a statement:&lt;/strong&gt; Inform 7, Lua, Python, Unix&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; &lt;span class="caps"&gt;BASIC&lt;/span&gt; uses &lt;code&gt;=&lt;/code&gt; for both assignment &lt;em&gt;and&lt;/em&gt; equality testing — the meaning is determined from context.  D allows variable &lt;em&gt;declaration&lt;/em&gt; as an expression, so &lt;code&gt;if (int x = 3)&lt;/code&gt; is allowed, but regular assignment is not.  Functional languages generally don&amp;#8217;t have an assignment operator.  Go disallows assignment as an expression, but assignment &lt;em&gt;and&lt;/em&gt; a test can appear together in an &lt;code&gt;if&lt;/code&gt; condition, and this is an idiomatic way to check success.  Ruby makes everything an expression, so assignment might as well be too.  Rust makes everything an expression, but assignment evaluates to the useless &lt;code&gt;()&lt;/code&gt; value (due to ownership rules), so it&amp;#8217;s not actually useful.  Rust and Swift both have a special &lt;code&gt;if let&lt;/code&gt; block that explicitly combines assignment with pattern matching, which is way nicer than the C&amp;nbsp;approach.&lt;/p&gt;
&lt;h2 id="no-hyphens-in-identifiers"&gt;&lt;a class="toclink" href="#no-hyphens-in-identifiers"&gt;No hyphens in&amp;nbsp;identifiers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;snake_case requires dancing on the shift key (unless you rearrange your keyboard, which is perfectly reasonable).  It slows you down slightly and leads to occasional mistakes like &lt;code&gt;snake-Case&lt;/code&gt;.  The alternative is dromedaryCase, which is objectively wrong and doesn&amp;#8217;t actually solve this problem&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Why not just allow hyphens in identifiers, so we can avoid this argument and use &lt;code&gt;kebab-case&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Ah, but then it&amp;#8217;s ambiguous whether you mean an identifier or the subtraction operator.  No problem: require spaces for subtraction.  I don&amp;#8217;t think a tiny way you&amp;#8217;re allowed to make your code harder to read is really worth this clear&amp;nbsp;advantage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Low scoring:&lt;/strong&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt;, C#, D, Java, JavaScript, OCaml, Pascal, Perl 5, &lt;span class="caps"&gt;PHP&lt;/span&gt;, Python, Ruby, Rust, Swift, Unix&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nicely-designed:&lt;/strong&gt; &lt;span class="caps"&gt;COBOL&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt; (and thus Sass), Forth, Inform 7, Lisps, Perl 6, &lt;span class="caps"&gt;XML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Perl has a built-in variable called &lt;code&gt;$-&lt;/code&gt;, and Ruby has a few called &lt;code&gt;$-n&lt;/code&gt; for various values of &amp;#8220;n&amp;#8221;, but these are very special&amp;nbsp;cases.&lt;/p&gt;
&lt;h2 id="braces-and-semicolons"&gt;&lt;a class="toclink" href="#braces-and-semicolons"&gt;Braces and&amp;nbsp;semicolons&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay.  Hang on.  Bear with&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;C code looks like&amp;nbsp;this.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The block is indicated &lt;em&gt;two different ways&lt;/em&gt; here.  The braces are for the &lt;em&gt;compiler&lt;/em&gt;; the indentation is for &lt;em&gt;humans&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Having two different ways to say the same thing means they can get out of sync.  They can &lt;em&gt;disagree&lt;/em&gt;.  And that can be, as previously mentioned, &lt;em&gt;really bad&lt;/em&gt;.  This is really just a more general form of the problem of optional block&amp;nbsp;delimiters.&lt;/p&gt;
&lt;p&gt;The only solution is to eliminate one of the two.  Programming languages exist for the benefit of humans, so we obviously can&amp;#8217;t get rid of the indentation.  Thus, we should get rid of the braces.  &lt;span class="caps"&gt;QED&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;As an added advantage, we reclaim all the vertical space wasted on lines containing only a &lt;code&gt;}&lt;/code&gt;, and we can stop squabbling about where to put the &lt;code&gt;{&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you accept this, you might start to notice that there are &lt;em&gt;also&lt;/em&gt; two different ways of indicating where a line ends: with semicolons for the compiler, and with &lt;em&gt;vertical&lt;/em&gt; whitespace for humans.  So, by the same reasoning, we should lose the&amp;nbsp;semicolons.&lt;/p&gt;
&lt;p&gt;Right?  Awesome.  Glad we&amp;#8217;re all on the same&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;Some languages use keywords instead of braces, but the effect is the same.  I&amp;#8217;m not aware of any languages that use keywords instead of&amp;nbsp;semicolons.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bracing myself:&lt;/strong&gt; C#, D, Erlang, Java, Perl,&amp;nbsp;Rust.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Braces, but no semicolons:&lt;/strong&gt; Go (&lt;span class="caps"&gt;ASI&lt;/span&gt;), JavaScript (&lt;span class="caps"&gt;ASI&lt;/span&gt; — see below), Lua, Ruby,&amp;nbsp;Swift.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Free and clear:&lt;/strong&gt; CoffeeScript, Haskell,&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special mention:&lt;/strong&gt; Lisp, just, in general.  Inform 7 has an indented style, but it still requires semicolons.  &lt;span class="caps"&gt;MUMPS&lt;/span&gt; doesn&amp;#8217;t support nesting at all, but I believe there are extensions that use dots to indicate&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s some interesting trivia.  JavaScript, Lua, and Python all optionally allow semicolons at the end of a statement, but the way each language determines line continuation is very&amp;nbsp;different.&lt;/p&gt;
&lt;p&gt;JavaScript takes an &amp;#8220;opt-out&amp;#8221; approach: it continues reading lines until it hits a semicolon, &lt;em&gt;or&lt;/em&gt; until reading the next line would cause a syntax error.  (This approach is called &lt;em&gt;automatic semicolon insertion&lt;/em&gt;.)  That leaves a few corner cases like starting a new line with a &lt;code&gt;(&lt;/code&gt;, which could look like the last thing on the previous line is a function you&amp;#8217;re trying to call.  Or you could have &lt;code&gt;-foo&lt;/code&gt; on its own line, and it would parse as subtraction rather than unary negation.  You might wonder why anyone would do that, but using unary &lt;code&gt;+&lt;/code&gt; is one way to make &lt;code&gt;function&lt;/code&gt; parse as an expression rather than a statement!  I&amp;#8217;m not so opposed to semicolons that I want to be debugging where the language &lt;em&gt;thinks&lt;/em&gt; my lines end, so I just always use semicolons in&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;Python takes an &amp;#8220;opt-in&amp;#8221; approach: it assumes, by default, that a statement ends at the end of a line.  However, newlines inside parentheses or brackets are ignored, which takes care of 99% of cases — long lines are most frequently caused by function calls (which have parentheses!) with a lot of arguments.  If you &lt;em&gt;really&lt;/em&gt; need it, you can explicitly escape a newline with &lt;code&gt;\\&lt;/code&gt;, but this is widely regarded as incredibly&amp;nbsp;ugly.&lt;/p&gt;
&lt;p&gt;Lua avoids the problem almost entirely.  I believe Lua&amp;#8217;s grammar is designed such that it&amp;#8217;s &lt;em&gt;almost&lt;/em&gt; always unambiguous where a statement ends, even if you have no newlines at all.  This has a few weird side effects: void expressions are syntactically forbidden in Lua, for example, so you just &lt;em&gt;can&amp;#8217;t&lt;/em&gt; have &lt;code&gt;-foo&lt;/code&gt; as its own statement.  Also, you can&amp;#8217;t have code immediately following a &lt;code&gt;return&lt;/code&gt;, because it&amp;#8217;ll be interpreted as a return value.  The upside is that Lua can treat newlines just like any other whitespace, but still not need semicolons.  In fact, semicolons aren&amp;#8217;t statement terminators in Lua at all — they&amp;#8217;re &lt;em&gt;their own statement&lt;/em&gt;, which does nothing.  Alas, not for lack of trying, Lua does have the same &lt;code&gt;(&lt;/code&gt; ambiguity as JavaScript (and parses it the same way), but I don&amp;#8217;t think any of the others&amp;nbsp;exist.&lt;/p&gt;
&lt;p&gt;Oh, and the colons that Python has at the end of its block headers, like &lt;code&gt;if foo:&lt;/code&gt;?  As far as I can tell, they serve no syntactic purpose whatsoever.  Purely&amp;nbsp;aesthetic.&lt;/p&gt;
&lt;h2 id="blaming-the-programmer"&gt;&lt;a class="toclink" href="#blaming-the-programmer"&gt;Blaming the&amp;nbsp;programmer&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perhaps one of the worst misfeatures of C is the ease with which responsibility for problems can be shifted to the person who wrote the code.  &amp;#8220;Oh, you segfaulted?  I guess you forgot to check for &lt;code&gt;NULL&lt;/code&gt;.&amp;#8221;  If only I had a computer to take care of such tedium for&amp;nbsp;me!&lt;/p&gt;
&lt;p&gt;Clearly, computers can&amp;#8217;t be expected to do everything for us.  But they can be expected to do quite a bit.  Programming languages are built &lt;em&gt;for humans&lt;/em&gt;, and they ought to eliminate the sorts of rote work humans are bad at whenever possible.  A programmer is already busy thinking about the actual problem they want to solve; it&amp;#8217;s no surprise that they&amp;#8217;ll sometimes forget some tedious detail the language forces them to worry&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;So if you&amp;#8217;re designing a language, don&amp;#8217;t just copy C.  Don&amp;#8217;t just copy C++ or Java.  Hell, don&amp;#8217;t even just copy Python or Ruby.  Consider your target audience, consider the problems they&amp;#8217;re trying to solve, and try to get as much else out of the way as possible.  If the same &amp;#8220;mistake&amp;#8221; tends to crop up over and over, look for a way to modify the language to reduce or eliminate it.  And be sure to look at a lot of languages for inspiration — even ones you hate, even weird ones no one uses!  A lot of clever people have had a lot of other ideas in the last 44&amp;nbsp;years.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I hope you enjoyed this accidental cross-reference of several dozen languages!  I enjoyed looking through them all, though it was &lt;em&gt;incredibly&lt;/em&gt; time-consuming.  Some of them look pretty interesting; maybe give them a&amp;nbsp;whirl.&lt;/p&gt;
&lt;p&gt;Also, dammit, now I&amp;#8217;m &lt;a href="https://eev.ee/blog/2015/02/28/sylph-the-programming-language-i-want/"&gt;thinking about language design&lt;/a&gt;&amp;nbsp;again.&lt;/p&gt;</content><category term="tech"></category><category term="plt"></category></entry><entry><title>Embedding Lua in ZDoom</title><link href="https://eev.ee/blog/2016/11/26/embedding-lua-in-zdoom/" rel="alternate"></link><published>2016-11-26T17:16:00-08:00</published><updated>2016-11-26T17:16:00-08:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-11-26:/blog/2016/11/26/embedding-lua-in-zdoom/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve spent a little time trying to embed a Lua interpreter in ZDoom.  I didn&amp;#8217;t get too far yet; it&amp;#8217;s just an experimental thing I poke at every once and a while.  The existing pile of constraints makes it an interesting problem,&amp;nbsp;though.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve spent a little time trying to embed a Lua interpreter in ZDoom.  I didn&amp;#8217;t get too far yet; it&amp;#8217;s just an experimental thing I poke at every once and a while.  The existing pile of constraints makes it an interesting problem,&amp;nbsp;though.&lt;/p&gt;


&lt;h2 id="background"&gt;&lt;a class="toclink" href="#background"&gt;Background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ZDoom is a &amp;#8220;source port&amp;#8221; (read: fork) of the Doom engine, with all the changes from the commercial forks merged in (mostly Heretic, Hexen, Strife), and a lot of internal twiddles exposed.  It has a variety of mechanisms for customizing game behavior; two are major&amp;nbsp;standouts.&lt;/p&gt;
&lt;p&gt;One is &lt;span class="caps"&gt;ACS&lt;/span&gt;, a vaguely C-ish language inherited from Hexen.  It&amp;#8217;s mostly used to automate level behavior — at the simplest, by having a single switch perform multiple actions.  It supports the usual loops and conditionals, it can store data persistently, and ZDoom exposes a number of functions to it for inspecting and altering the state of the world, so it can do some neat tricks.  Here&amp;#8217;s an arbitrary script from &lt;a href="https://eev.ee/blog/2016/03/31/i-made-a-doom-level/"&gt;my &lt;span class="caps"&gt;DUMP2&lt;/span&gt; map&lt;/a&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;open_church_door&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Open the door more quickly on easier skill levels, so running from the&lt;/span&gt;
    &lt;span class="c1"&gt;// arch-vile is a more viable option&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;skill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GameSkill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skill&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SKILL_NORMAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// blazing door speed&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skill&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SKILL_NORMAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// normal door speed&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// very dramatic door speed&lt;/span&gt;

    &lt;span class="n"&gt;Door_Raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// double usual delay&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;However, ZDoom doesn&amp;#8217;t actually understand the language itself; &lt;span class="caps"&gt;ACS&lt;/span&gt; is compiled to bytecode.  There&amp;#8217;s even at least one &lt;a href="https://forum.zdoom.org/viewtopic.php?f=19&amp;amp;t=32078"&gt;alternative language&lt;/a&gt; that compiles to the same bytecode, which is&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;The other big feature is &lt;code&gt;DECORATE&lt;/code&gt;, a mostly-declarative mostly-interpreted language for defining new kinds of objects.  It&amp;#8217;s a fairly direct reflection of how Doom actors are implemented, which is in terms of states.  In Doom and the other commercial games, actor behavior was built into the engine, but this language has allowed almost all actors to be extracted as text files instead.  For example, &lt;a href="http://zdoom.org/wiki/Classes:DoomImp"&gt;the imp is implemented&lt;/a&gt; partly as&amp;nbsp;follows:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  States
  {
  Spawn:
    TROO AB 10 A_Look
    Loop
  See:
    TROO AABBCCDD 3 A_Chase
    Loop
  Melee:
  Missile:
    TROO EF 8 A_FaceTarget
    TROO G 6 A_TroopAttack
    Goto See
  ...
  }
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;TROO&lt;/code&gt; is the name of the imp&amp;#8217;s sprite &amp;#8220;family&amp;#8221;.  &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and so on are individual frames.  The numbers are durations in tics (35 per second).  All of the &lt;code&gt;A_*&lt;/code&gt; things (which are optional) are &lt;em&gt;action functions&lt;/em&gt;, behavioral functions (built into the engine) that run when the actor switches to that frame.  An actor starts out at its &lt;code&gt;Spawn&lt;/code&gt; state, so an imp behaves as&amp;nbsp;follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spawn.  Render as &lt;code&gt;TROO&lt;/code&gt; frame &lt;code&gt;A&lt;/code&gt;.  (By default, action functions don&amp;#8217;t run on the very first frame they&amp;#8217;re&amp;nbsp;spawned.)&lt;/li&gt;
&lt;li&gt;Wait 10&amp;nbsp;tics.&lt;/li&gt;
&lt;li&gt;Change to &lt;code&gt;TROO&lt;/code&gt; frame &lt;code&gt;B&lt;/code&gt;.  Run &lt;code&gt;A_Look&lt;/code&gt;, which checks to see if a player is within line of sight, and if so jumps to the &lt;code&gt;See&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;Wait 10&amp;nbsp;tics.&lt;/li&gt;
&lt;li&gt;Repeat.  (This time, frame &lt;code&gt;A&lt;/code&gt; will also run &lt;code&gt;A_Look&lt;/code&gt;, since the imp was no longer just&amp;nbsp;spawned.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All monster and item behavior is one big state table.  Even the player&amp;#8217;s own weapons work this way, which becomes very confusing — at some points a weapon can be running two states &lt;em&gt;simultaneously&lt;/em&gt;.  Oh, and there&amp;#8217;s &lt;code&gt;A_CustomMissile&lt;/code&gt; for monster attacks but &lt;code&gt;A_FireCustomMissile&lt;/code&gt; for weapon attacks, and the arguments are different, and if you mix them up you&amp;#8217;ll get extremely confusing &lt;em&gt;parse&lt;/em&gt;&amp;nbsp;errors.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a little bit of a mess.  It&amp;#8217;s fairly flexible for what it is, and has come a long way — for example, even original Doom couldn&amp;#8217;t pass arguments to action functions (since they were just function pointers), so it had separate functions like &lt;code&gt;A_TroopAttack&lt;/code&gt; for every monster; now that same function can be &lt;a href="http://zdoom.org/wiki/A_TroopAttack"&gt;written generically&lt;/a&gt;.  People have done some very clever things with zero-delay frames (to run multiple action functions in a row) and storing state with dummy inventory items, too.  Still, it&amp;#8217;s not quite a programming language, and it&amp;#8217;s easy to run into walls and bizarre&amp;nbsp;quirks.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;DECORATE&lt;/code&gt; lets you down, you have one interesting recourse: to call an &lt;span class="caps"&gt;ACS&lt;/span&gt;&amp;nbsp;script!&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;span class="caps"&gt;ACS&lt;/span&gt; also has some old limitations.  The only type it truly understands is &lt;code&gt;int&lt;/code&gt;, so you can&amp;#8217;t manipulate an actor directly or even store one in a variable.  Instead, you have to work with TIDs (&amp;#8220;thing IDs&amp;#8221;).  Every actor has a &lt;span class="caps"&gt;TID&lt;/span&gt; (zero is special-cased to mean &amp;#8220;no &lt;span class="caps"&gt;TID&lt;/span&gt;&amp;#8221;), and most &lt;span class="caps"&gt;ACS&lt;/span&gt; actor-related functions are expressed in terms of TIDs.  For &lt;em&gt;level automation&lt;/em&gt;, this is fine, and probably even what you want — you can dump a group of monsters in a map, give them all a &lt;span class="caps"&gt;TID&lt;/span&gt;, and then control them as a group fairly&amp;nbsp;easily.&lt;/p&gt;
&lt;p&gt;But if you want to use &lt;span class="caps"&gt;ACS&lt;/span&gt; to enhance &lt;code&gt;DECORATE&lt;/code&gt;, you have a bit of a problem.  &lt;code&gt;DECORATE&lt;/code&gt; defines &lt;em&gt;individual&lt;/em&gt; actor behavior.  Also, many &lt;code&gt;DECORATE&lt;/code&gt; actors are designed independently of a map and intended to be reusable anywhere.  &lt;code&gt;DECORATE&lt;/code&gt; should thus not touch TIDs at all, because they&amp;#8217;re really the &lt;em&gt;map&lt;/em&gt;&amp;#8216;s concern, and mucking with TIDs might break map behavior&amp;#8230;  but &lt;span class="caps"&gt;ACS&lt;/span&gt; can&amp;#8217;t refer to actors any other way.  A number of action functions can, but you can&amp;#8217;t call action functions from &lt;span class="caps"&gt;ACS&lt;/span&gt;, only &lt;code&gt;DECORATE&lt;/code&gt;.  The workarounds for this are not pretty, especially for beginners, and they&amp;#8217;re very easy to silently get&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;Also, ultimately, some parts of the engine are just not accessible to &lt;em&gt;either&lt;/em&gt; &lt;span class="caps"&gt;ACS&lt;/span&gt; or &lt;code&gt;DECORATE&lt;/code&gt;, and neither language is particularly amenable to having them exposed.  Adding more native types to &lt;span class="caps"&gt;ACS&lt;/span&gt; is rather difficult without making significant changes to both the language and bytecode, and &lt;code&gt;DECORATE&lt;/code&gt; is barely a language at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Some long-awaited work is finally being done on a &amp;#8220;ZScript&amp;#8221;, which purports to solve all of these problems by expanding &lt;code&gt;DECORATE&lt;/code&gt; into an entire interpreted-C++-ish scripting language with access to tons of internals.  I don&amp;#8217;t know what I think of it, and it only seems to half-solve the problem, since it doesn&amp;#8217;t replace &lt;span class="caps"&gt;ACS&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="trying-out-lua"&gt;&lt;a class="toclink" href="#trying-out-lua"&gt;Trying out&amp;nbsp;Lua&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lua is supposed to be easy to embed, right?  That&amp;#8217;s the one thing it&amp;#8217;s famous for.  Before ZScript actually started to materialize, I thought I&amp;#8217;d take a little crack at embedding a Lua interpreter and exposing some &lt;span class="caps"&gt;API&lt;/span&gt; stuff to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not very far along yet, but it can do one thing that&amp;#8217;s always been completely impossible in both &lt;span class="caps"&gt;ACS&lt;/span&gt; and &lt;code&gt;DECORATE&lt;/code&gt;: print out the player&amp;#8217;s entire inventory.  You can check how many of a &lt;em&gt;given&lt;/em&gt; item the player has in either language, but neither has a way to iterate over a collection.  In Lua, it&amp;#8217;s pretty&amp;nbsp;easy.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;lua_test_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;-- This is Lua&amp;#39;s builtin print(), so it goes to stdout&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I made a tiny test map with a switch that tries to run the &lt;span class="caps"&gt;ACS&lt;/span&gt; script named &lt;code&gt;lua_test_script&lt;/code&gt;.  I hacked the name lookup to first look for the name in Lua&amp;#8217;s global scope; if the function exists, it&amp;#8217;s called immediately, and &lt;span class="caps"&gt;ACS&lt;/span&gt; isn&amp;#8217;t consulted at all.  The code above is just a regular (global) function in a regular Lua file, embedded as a lump in the map.  So that was a good start, and was pretty neat to see&amp;nbsp;work.&lt;/p&gt;
&lt;h2 id="writing-the-bindings"&gt;&lt;a class="toclink" href="#writing-the-bindings"&gt;Writing the&amp;nbsp;bindings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used the bare Lua &lt;span class="caps"&gt;API&lt;/span&gt; at first.  While its &lt;span class="caps"&gt;API&lt;/span&gt; is definitely very simple, actually using it to define and expose a large &lt;span class="caps"&gt;API&lt;/span&gt; in practice is kind of repetitive and error-prone, and I was never confident I was doing it quite right.  It&amp;#8217;s plain C &lt;em&gt;and&lt;/em&gt; it works entirely through stack manipulation &lt;em&gt;and&lt;/em&gt; it relies on a lot of casting to/from &lt;code&gt;void*&lt;/code&gt;, so virtually anything might go wrong at any&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I was on the cusp of writing a bunch of gross macros to automate the boring parts, and then I found &lt;a href="https://github.com/ThePhD/sol2"&gt;sol2&lt;/a&gt;, which is &lt;em&gt;pretty great&lt;/em&gt;.  It makes heavy use of basically every single C++11 feature, so it&amp;#8217;s a nightmare when it breaks (and I&amp;#8217;ve had to track down a few bugs), but it&amp;#8217;s expressive as hell when it&amp;nbsp;works:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_usertype&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AActor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zdoom.AActor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;__tostring&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;AActor&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;actor&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// Pointer to an unbound method.  Sol automatically makes this an attribute&lt;/span&gt;
    &lt;span class="c1"&gt;// rather than a method because it takes no arguments, then wraps its&lt;/span&gt;
    &lt;span class="c1"&gt;// return value to pass it back to Lua, no manual wrapper code required.&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;AActor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;inventory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;([](&lt;/span&gt;&lt;span class="n"&gt;AActor&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZLuaInventory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ZLuaInventory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="c1"&gt;// Pointers to unbound attributes.  Sol turns these into writable&lt;/span&gt;
    &lt;span class="c1"&gt;// attributes on the Lua side.&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;health&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;AActor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;health&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;floorclip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;AActor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Floorclip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;weave_index_xy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;AActor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WeaveIndexXY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;weave_index_z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;AActor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WeaveIndexZ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is the type of the &lt;code&gt;activator&lt;/code&gt; argument from the script above.  It works via template shenanigans, so most of the work is done at compile time.  &lt;code&gt;AActor&lt;/code&gt; has a &lt;em&gt;lot&lt;/em&gt; of properties of various types; wrapping them with the bare Lua &lt;span class="caps"&gt;API&lt;/span&gt; would&amp;#8217;ve been awful, but wrapping them with Sol is fairly&amp;nbsp;straightforward.&lt;/p&gt;
&lt;h2 id="lifetime"&gt;&lt;a class="toclink" href="#lifetime"&gt;Lifetime&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;activator.inventory&lt;/code&gt; is a wrapper around a &lt;code&gt;ZLuaInventory&lt;/code&gt; object, which I made up.  It&amp;#8217;s just a tiny proxy struct that tries to represent the inventory of a particular actor, because the engine itself doesn&amp;#8217;t quite have such a concept — an actor&amp;#8217;s &amp;#8220;inventory&amp;#8221; is a single item (itself an actor), and each item has a pointer to the next item in the inventory.  Creating an intermediate type lets me hide that detail from Lua and pretend the inventory is a real&amp;nbsp;container.&lt;/p&gt;
&lt;p&gt;The inventory is thus not a real table; &lt;code&gt;pairs()&lt;/code&gt; works on it because it provides the &lt;code&gt;__pairs&lt;/code&gt; metamethod.  It calls an &lt;code&gt;iter&lt;/code&gt; method returning a closure, per Lua&amp;#8217;s &lt;a href="https://eev.ee/blog/2016/11/18/iteration-in-one-language-then-all-the-others/"&gt;iteration&lt;/a&gt; &lt;span class="caps"&gt;API&lt;/span&gt;, which Sol makes &lt;em&gt;just work&lt;/em&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;ZLuaInventory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AInventory&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TObjPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AInventory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Inventory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;AInventory&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;NextInv&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;C++&amp;#8217;s closures are slightly goofy and it took me a few tries to land on this, but it&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;Well, sort&amp;nbsp;of.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know how I got this idea in my head, but I was pretty sure that ZDoom&amp;#8217;s &lt;code&gt;TObjPtr&lt;/code&gt; did reference counting and would automatically handle the lifetime problems in the above code.  Eventually Lua reaps the closure, then C++ reaps the closure, then the wrapped &lt;code&gt;AInventory&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s refcount drops, and all is&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Turns out &lt;code&gt;TObjPtr&lt;/code&gt; &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt; do reference counting.  Rather, all the game objects participate in tracing garbage collection.  The basic idea is to start from some root object and recursively traverse all the objects reachable from that root; whatever isn&amp;#8217;t reached is garbage and can be&amp;nbsp;deleted.&lt;/p&gt;
&lt;p&gt;Unfortunately, the Lua interpreter is not reachable from ZDoom&amp;#8217;s own object tree.  If an object ends up only being held by Lua, ZDoom will think it&amp;#8217;s garbage and delete it prematurely, leaving a dangling reference.  Those are&amp;nbsp;bad.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; I can fix without too much trouble.  Sol allows customizing how it injects particular types, so I can use that for the type tree that participates in this &lt;span class="caps"&gt;GC&lt;/span&gt; scheme and keep an &lt;code&gt;unordered_set&lt;/code&gt; of all objects that are alive in Lua.  The Lua interpreter itself is already wrapped in an object that participates in the &lt;span class="caps"&gt;GC&lt;/span&gt;, so when the &lt;span class="caps"&gt;GC&lt;/span&gt; descends to the wrapper, it&amp;#8217;s easy to tell it that that set of objects is alive.  I&amp;#8217;ll probably need to figure out read/write barriers, too, but I haven&amp;#8217;t looked too closely at how ZDoom uses those yet.  I don&amp;#8217;t know whether it&amp;#8217;s possible for an object to be &amp;#8220;dead&amp;#8221; (as in no longer usable, not just 0 health) before being reaped, but if so, I&amp;#8217;ll need to figure out something there&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a little ironic that I have to do this weird workaround when ZDoom&amp;#8217;s tracing garbage collector is based on&amp;#8230;&amp;nbsp;Lua&amp;#8217;s.&lt;/p&gt;
&lt;p&gt;ZDoom does have types I want to expose that &lt;em&gt;aren&amp;#8217;t&lt;/em&gt; garbage collected, but those are all map structures like sectors, which are never created or destroyed at runtime.  I &lt;em&gt;will&lt;/em&gt; have to be careful with the Lua interpreter itself to make sure those can&amp;#8217;t live beyond the current map, but I haven&amp;#8217;t really dealt with map changes at all yet.  The &lt;span class="caps"&gt;ACS&lt;/span&gt; approach is that everything is map-local, and there&amp;#8217;s some limited storage for preserving values across maps; I could do something similar, perhaps only allowing primitive&amp;nbsp;scalars.&lt;/p&gt;
&lt;h2 id="asynchronicity"&gt;&lt;a class="toclink" href="#asynchronicity"&gt;Asynchronicity&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another &lt;em&gt;critical&lt;/em&gt; property of &lt;span class="caps"&gt;ACS&lt;/span&gt; scripts is that they can pause themselves.  They can either wait for a set number of tics with &lt;code&gt;delay()&lt;/code&gt;, or wait for map geometry to stop being busy with something like &lt;code&gt;tagwait()&lt;/code&gt;.  So you can raise up some stairs, wait for the stairs to finish appearing, and then open the door they lead to.  Or you can simulate game rules by running a script in an infinite loop that waits for a few tics between iterations.  It&amp;#8217;s pretty handy.  It&amp;#8217;s incredibly handy.  It&amp;#8217;s&amp;nbsp;non-negotiable.&lt;/p&gt;
&lt;p&gt;Luckily, Lua can emulate this using coroutines.  I implemented the &lt;code&gt;delay&lt;/code&gt; case&amp;nbsp;yesterday:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;lua_test_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
    &lt;span class="n"&gt;zprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey it&amp;#39;s me what&amp;#39;s up&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
    &lt;span class="nb"&gt;coroutine.yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;delay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;zprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;i&amp;#39;m back again&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I press the switch, I see the first message, then there&amp;#8217;s a two-second pause (Doom is 35fps), then I see the second&amp;nbsp;message.&lt;/p&gt;
&lt;p&gt;A lot more details need to be hammered out before this is really equivalent to what &lt;span class="caps"&gt;ACS&lt;/span&gt; can do, but the basic functionality is there.  And since these are full-stack coroutines, I can trivially wrap that yield gunk in a &lt;code&gt;delay(70)&lt;/code&gt; function, so you never have to know the&amp;nbsp;difference.&lt;/p&gt;
&lt;h2 id="determinism"&gt;&lt;a class="toclink" href="#determinism"&gt;Determinism&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ZDoom has demos and peer-to-peer multiplayer.  Both features rely critically on the game state&amp;#8217;s unfolding exactly the same way, given the same seed and sequence of&amp;nbsp;inputs.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;ACS&lt;/span&gt; goes to great lengths to preserve this.  It executes deterministically.  It has very, &lt;em&gt;very&lt;/em&gt; few ways to make decisions based on anything but the current state of the game.  Netplay and demos &lt;em&gt;just work&lt;/em&gt;; modders and map authors never have to think about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know if I can guarantee the same about Lua.  I&amp;#8217;d &lt;em&gt;think&lt;/em&gt; so, but I don&amp;#8217;t &lt;em&gt;know&lt;/em&gt; so.  Will the order of keys in a table be exactly the same on every system, for example?  That&amp;#8217;s important!  Even the &lt;span class="caps"&gt;ACS&lt;/span&gt; random-number generator is&amp;nbsp;deterministic.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hope&lt;/em&gt; this is the case.  I know some games, like Starbound, implicitly assume for multiplayer purposes that scripts will execute the same way on every system.  So it&amp;#8217;s probably fine.  I do wish Lua made some sort of guarantee here, though, especially since it&amp;#8217;s such an obvious and popular candidate for game&amp;nbsp;scripting.&lt;/p&gt;
&lt;h2 id="savegames"&gt;&lt;a class="toclink" href="#savegames"&gt;Savegames&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ZDoom allows you to quicksave at any&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Any&lt;/em&gt;&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Not while a script is running, mind you.  Script execution blocks the gameplay thread, so only one thing can actually be happening at a time.  But what happens if you save while a script is in the middle of a &lt;code&gt;tagwait&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The coroutine needs to be persisted, somehow.  More importantly, when the game is &lt;em&gt;loaded&lt;/em&gt;, the coroutine needs to be restored to the same state: paused in the same place, with locals set to the same values.  Even if those locals were wrapped pointers to C++ objects, which now have different&amp;nbsp;addresses.&lt;/p&gt;
&lt;p&gt;Vanilla Lua has no way to do this.  Vanilla Lua has a pretty poor serialization story overall — &lt;em&gt;nothing&lt;/em&gt; is built in — which is honestly kind of shocking.  People use Lua for games, right?  Like, a lot?  How is this not an extremely common&amp;nbsp;problem?&lt;/p&gt;
&lt;p&gt;A potential solution exists in the form of &lt;a href="https://github.com/fnuecke/eris"&gt;Eris&lt;/a&gt;, a &lt;em&gt;modified&lt;/em&gt; Lua that does all kinds of invasive things to allow absolutely anything to be serialized.  Including&amp;nbsp;coroutines!&lt;/p&gt;
&lt;p&gt;So Eris makes this at least possible.  I haven&amp;#8217;t made even the slightest attempt at using it yet, but a few gotchas already stand out to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;For one, Eris serializes &lt;em&gt;everything&lt;/em&gt;.  Even regular ol&amp;#8217; functions are serialized as Lua bytecode.  A naïve approach would thus end up storing a copy of the &lt;em&gt;entire&lt;/em&gt; game script in the save&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Eris has a thing called the &amp;#8220;permanent object table&amp;#8221;, which allows giving names to specific Lua values.  Those values are then serialized by name instead, and the names are looked up in the same table to deserialize.  So I could walk the Lua namespace &lt;em&gt;myself&lt;/em&gt; after the initial script load and stick all reachable functions in this table to avoid having them persisted.  (That won&amp;#8217;t catch if someone loads new code during play, but that sounds like a really bad idea anyway, and I&amp;#8217;d like to prevent it if possible.)  I have to do this to some extent anyway, since Eris can&amp;#8217;t persist the wrapped C++ functions I&amp;#8217;m exposing to Lua.  Even if a script does some incredibly fancy dynamic stuff to replace global functions with closures at runtime, that&amp;#8217;s okay; they&amp;#8217;ll be different functions, so Eris will fall back to serializing&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Then when the save is reloaded, Eris will replace any captured references to a global function with the copy that already exists in the map script.  ZDoom doesn&amp;#8217;t let you load saves across different mods, so the functions should be the same.  I think.  Hmm, maybe I should check on exactly what the load rules are.  If you &lt;em&gt;can&lt;/em&gt; load a save against a more recent copy of a map, you&amp;#8217;ll want to get its updated scripts, but stored closures and coroutines might be old versions, and that is probably bad.  I don&amp;#8217;t know if there&amp;#8217;s much I can do about that, though, unless Eris can somehow save the underlying code from closures/coros as named references&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;Eris also has a mechanism for storing wrapped native objects, so all I have to worry about is translating pointers, and that&amp;#8217;s a problem Doom has already solved (somehow).  Alas, that mechanism is also accessible to pure Lua code, and the docs warn that it&amp;#8217;s possible to get into an infinite loop when loading.  I&amp;#8217;d rather not give modders the power to fuck up a save file, so I&amp;#8217;ll have to disable that&amp;nbsp;somehow.&lt;/p&gt;
&lt;p&gt;Finally, since Eris loads bytecode, it&amp;#8217;s possible to do nefarious things with a specially-crafted save file.  But since the save file is full of a web of pointers anyway, I suspect it&amp;#8217;s not too hard to segfault the game with a specially-crafted save file anyway.  I&amp;#8217;ll need to look into this.  Or maybe I won&amp;#8217;t, since I don&amp;#8217;t seriously expect this to be merged&amp;nbsp;in.&lt;/p&gt;
&lt;h2 id="runaway-scripts"&gt;&lt;a class="toclink" href="#runaway-scripts"&gt;Runaway&amp;nbsp;scripts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Speaking of which, &lt;span class="caps"&gt;ACS&lt;/span&gt; currently has detection for &amp;#8220;runaway scripts&amp;#8221;, i.e. those that look like they &lt;em&gt;might&lt;/em&gt; be stuck in an infinite loop (or are just doing a ludicrous amount of work).  Since scripts are blocking, the game does not actually progress while a script is running, and a very long script would appear to freeze the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;I think &lt;span class="caps"&gt;ACS&lt;/span&gt; does this by counting instructions.  I see Lua has its own &lt;a href="http://stackoverflow.com/a/3400896/17875"&gt;mechanism&lt;/a&gt; for doing that, so limiting script execution &amp;#8220;time&amp;#8221; shouldn&amp;#8217;t be too&amp;nbsp;hard.&lt;/p&gt;
&lt;h2 id="defining-new-actors"&gt;&lt;a class="toclink" href="#defining-new-actors"&gt;Defining new&amp;nbsp;actors&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I want to be able to use Lua with (or instead of) &lt;code&gt;DECORATE&lt;/code&gt;, too, but I&amp;#8217;m a little hung up on&amp;nbsp;syntax.&lt;/p&gt;
&lt;p&gt;I do have something &lt;em&gt;slightly&lt;/em&gt; working — I was able to create a variant imp class with a bunch more health from Lua, then spawn it and fight it.  Also, I did it at runtime, which is probably bad — I don&amp;#8217;t know that there&amp;#8217;s any way to &lt;em&gt;destroy&lt;/em&gt; an actor class, so having them be map-scoped makes no&amp;nbsp;sense.&lt;/p&gt;
&lt;p&gt;That could actually pose a bit of a problem.  The Lua interpreter &lt;em&gt;should&lt;/em&gt; be scoped to a single map, but actor classes are game-global.  Do they live in separate interpreters?  That seems inconvenient.  I could load the game-global stuff, take an internal-only snapshot of the interpreter with Lua (bytecode and all), and then restore it at the beginning of each level?  Hm, then what happens if you capture a reference to an actor method in a save file&amp;#8230;?&amp;nbsp;Christ.&lt;/p&gt;
&lt;p&gt;I could consider making the interpreter global and doing black magic to replace all map objects with &lt;code&gt;nil&lt;/code&gt; when changing maps, but I don&amp;#8217;t think that can possibly work either.  ZDoom has &lt;em&gt;hubs&lt;/em&gt; — levels that can be left and later revisited, preserving their state just like with a save — and that seems at odds with having a single global interpreter whose state persists throughout the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;Er, anyway.  So, the problem with &lt;em&gt;syntax&lt;/em&gt; is that &lt;code&gt;DECORATE&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s own syntax is extremely compact and designed for its very specific goal of state tables.  Even ZScript appears to preserve the state table syntax, though it lets you write your own action functions or just provide a block of arbitrary code.  Here&amp;#8217;s a short chunk of the imp implementation again, for&amp;nbsp;reference.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  States
  {
  Spawn:
    TROO AB 10 A_Look
    Loop
  See:
    TROO AABBCCDD 3 A_Chase
    Loop
  ...
  }
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some tricky parts that stand out to&amp;nbsp;me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Labels are important, since these are state tables, and jumping to a particular state is very common.  It&amp;#8217;s tempting to use Lua coroutines here somehow, but short of using a lot of &lt;code&gt;goto&lt;/code&gt; in Lua code (yikes!), jumping around arbitrarily doesn&amp;#8217;t work.  Also, it needs to be possible to tell an actor to jump to a particular state from &lt;em&gt;outside&lt;/em&gt; — that&amp;#8217;s how &lt;code&gt;A_Look&lt;/code&gt; works, and there&amp;#8217;s even an &lt;span class="caps"&gt;ACS&lt;/span&gt; function to do it&amp;nbsp;manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aside from being shorthand, frames are fine.  Though I do note that hacks like &lt;code&gt;AABBCCDD 3&lt;/code&gt; are relatively common.  The actual animation that&amp;#8217;s wanted here is &lt;code&gt;ABCD 6&lt;/code&gt;, but because animation and behavior are intertwined, the labels need to be repeated to run the action function more often.  I wonder if it&amp;#8217;s desirable to be able to separate display and&amp;nbsp;behavior?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The durations seem straightforward, but they can actually be a restricted kind of expression as well.  So just defining them as data in a table doesn&amp;#8217;t quite&amp;nbsp;work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This example doesn&amp;#8217;t have any, but states can also have a number of flags, indicated by keywords after the duration.  (Slightly ambiguous, since there&amp;#8217;s nothing strictly distinguishing them from action functions.)  &lt;code&gt;Bright&lt;/code&gt;, for example, is a common flag on projectiles, weapons, and important pickups; it causes the sprite to be drawn fullbright during that&amp;nbsp;frame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obviously, actor behavior is a big part of the game sim, so ideally it should require dipping into Lua-land &lt;em&gt;as little as possible&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ideas I&amp;#8217;ve had include the&amp;nbsp;following.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Emulate state tables with arguments?&lt;/strong&gt;  A very straightforward way to do the above would be to just, well, cram it into one big&amp;nbsp;table.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;define_actor&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;states&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Spawn:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;TROO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;AB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A_Look&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;loop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;See:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;TROO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;AABBCCDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A_Chase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;loop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It would work, technically, I guess, except for non-literal durations, but I&amp;#8217;d basically just be exposing the &lt;code&gt;DECORATE&lt;/code&gt; parser from Lua and it would be pretty&amp;nbsp;ridiculous.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keep the syntax, but allow calling Lua from it?&lt;/strong&gt;  &lt;code&gt;DECORATE&lt;/code&gt; is &lt;em&gt;okay&lt;/em&gt;, for the most part.  For simple cases, it&amp;#8217;s great, even.  Would it be good enough to be able to write new action functions in Lua?  Maybe.  Your behavior would be awkwardly split between Lua and &lt;code&gt;DECORATE&lt;/code&gt;, though, which doesn&amp;#8217;t seem ideal.  But it would be the most straightforward approach, and it would completely avoid questions of how to emulate labels and state&amp;nbsp;counts.&lt;/p&gt;
&lt;p&gt;As an added benefit, this would keep &lt;code&gt;DECORATE&lt;/code&gt; almost-purely declarative — which means editor tools could still reliably parse it and show you previews of custom&amp;nbsp;objects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Split animation from behavior?&lt;/strong&gt;  This could go several ways, but the most obvious to me is something&amp;nbsp;like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;define_actor&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;states&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set_animation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;A_Look&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;end&lt;/span&gt;
        &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set_animation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;A_Chase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;end&lt;/span&gt;
        &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This raises plenty of other &lt;span class="caps"&gt;API&lt;/span&gt; questions, like how to wait until an animation has finished or how to still do work on a specific frame, but I think those are fairly solvable.  The big problems are that it&amp;#8217;s very much &lt;em&gt;not&lt;/em&gt; declarative, and it ends up being rather wordier.  It&amp;#8217;s not all boilerplate, though; it&amp;#8217;s fairly straightforward.  I see some value in having state delays and level script delays work the same way, too.  And in some cases, you have only an animation with no code at all, so the heavier use of Lua should balance out.  I don&amp;#8217;t&amp;nbsp;know.&lt;/p&gt;
&lt;p&gt;A more practical problem is that, currently, it&amp;#8217;s possible to jump to an arbitrary number of states &lt;em&gt;past&lt;/em&gt; a given label, and that would obviously make no sense with this approach.  It&amp;#8217;s pretty rare and pretty unreadable, so maybe that&amp;#8217;s okay.  Also, labels aren&amp;#8217;t &lt;em&gt;blocks&lt;/em&gt;, so it&amp;#8217;s entirely possible to have labels that don&amp;#8217;t end with a keyword like &lt;code&gt;loop&lt;/code&gt; and instead carry straight on into the next label — but those are usually used for logic more naturally expressed as &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;, so again, maybe losing that ability is&amp;nbsp;okay.&lt;/p&gt;
&lt;p&gt;Or&amp;#8230;  perhaps it makes sense to do both of these last two approaches?  Built-in classes should stay as &lt;code&gt;DECORATE&lt;/code&gt; anyway, so that existing code can still inherit from them and perform jumps with offsets, but new code could go entirely Lua for very complex&amp;nbsp;actors.&lt;/p&gt;
&lt;p&gt;Alas, this is probably one of those questions that won&amp;#8217;t have an obvious answer unless I just build several approaches and port some non-trivial stuff to them to see how they&amp;nbsp;feel.&lt;/p&gt;
&lt;h2 id="and-further"&gt;&lt;a class="toclink" href="#and-further"&gt;And&amp;nbsp;further&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An enduring desire among ZDoom nerds has been the ability to write custom &amp;#8220;thinkers&amp;#8221;.  Thinkers are really anything that gets to act each tic, but the word also specifically refers to the logic responsible for moving floors, opening doors, changing light levels, and so on.  Exposing those more directly to Lua, and letting you write your own, would be pretty&amp;nbsp;interesting.&lt;/p&gt;
&lt;h2 id="anyway"&gt;&lt;a class="toclink" href="#anyway"&gt;Anyway&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#8217;t know if I&amp;#8217;ll do all of this.  I somewhat doubt it, in fact.  I pick it up for half a day every few weeks to see what more I can make it do, just because it&amp;#8217;s interesting.  It has virtually no chance of being upstreamed anyway (the only active maintainer hates Lua, and thinks poorly of dynamic languages in general; plus, it&amp;#8217;s redundant with ZScript) and I don&amp;#8217;t really want to maintain my own yet another Doom fork, so I don&amp;#8217;t expect it to ever be a serious&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;The source code for what I&amp;#8217;ve done so far is available, but it&amp;#8217;s brittle and undocumented, so I&amp;#8217;m not going to tell you where to find it.  If it gets far enough along to be useful as more than a toy, I&amp;#8217;ll make a slightly bigger deal about&amp;nbsp;it.&lt;/p&gt;</content><category term="tech"></category><category term="doom"></category><category term="gamedev"></category><category term="lua"></category></entry><entry><title>A Rebuttal For Python 3</title><link href="https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/" rel="alternate"></link><published>2016-11-23T17:41:00-08:00</published><updated>2016-11-23T17:41:00-08:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-11-23:/blog/2016/11/23/a-rebuttal-for-python-3/</id><summary type="html">&lt;p&gt;Zed Shaw, of Learn Python the Hard Way fame, has now written &lt;a href="https://learnpythonthehardway.org/book/nopython3.html"&gt;The Case Against Python 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not involved with core Python development.  The only skin I have in this game is that &lt;a href="https://eev.ee/blog/2016/07/31/python-faq-why-should-i-use-python-3/"&gt;I &lt;em&gt;like&lt;/em&gt; Python 3&lt;/a&gt;.  It&amp;#8217;s a good language.  And one of the big factors &lt;em&gt;I&amp;#8217;ve&lt;/em&gt; seen slowing its adoption is that respected people in the Python community keep grouching about it.  I&amp;#8217;ve had multiple newcomers tell me they have the impression that Python 3 is some kind of unusable disaster, though they don&amp;#8217;t know exactly why; it&amp;#8217;s just something they hear from people who sound like they know what they&amp;#8217;re talking about.  Then they actually use the language, and it&amp;#8217;s&amp;nbsp;fine.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sad to see the Python community needlessly sabotage itself, but Zed&amp;#8217;s contribution is beyond the pale.  It&amp;#8217;s not just making a big deal about changed details that won&amp;#8217;t affect most beginners; it&amp;#8217;s complete and utter nonsense, on a platform aimed at people who can&amp;#8217;t yet recognize it as nonsense.  I am so&amp;nbsp;mad.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Zed Shaw, of Learn Python the Hard Way fame, has now written &lt;a href="https://learnpythonthehardway.org/book/nopython3.html"&gt;The Case Against Python 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not involved with core Python development.  The only skin I have in this game is that &lt;a href="https://eev.ee/blog/2016/07/31/python-faq-why-should-i-use-python-3/"&gt;I &lt;em&gt;like&lt;/em&gt; Python 3&lt;/a&gt;.  It&amp;#8217;s a good language.  And one of the big factors &lt;em&gt;I&amp;#8217;ve&lt;/em&gt; seen slowing its adoption is that respected people in the Python community keep grouching about it.  I&amp;#8217;ve had multiple newcomers tell me they have the impression that Python 3 is some kind of unusable disaster, though they don&amp;#8217;t know exactly why; it&amp;#8217;s just something they hear from people who sound like they know what they&amp;#8217;re talking about.  Then they actually use the language, and it&amp;#8217;s&amp;nbsp;fine.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sad to see the Python community needlessly sabotage itself, but Zed&amp;#8217;s contribution is beyond the pale.  It&amp;#8217;s not just making a big deal about changed details that won&amp;#8217;t affect most beginners; it&amp;#8217;s complete and utter nonsense, on a platform aimed at people who can&amp;#8217;t yet recognize it as nonsense.  I am so&amp;nbsp;mad.&lt;/p&gt;


&lt;h2 id="the-case-against-python-3"&gt;&lt;a class="toclink" href="#the-case-against-python-3"&gt;The Case Against Python&amp;nbsp;3&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I give two sets of reasons as I see them now. One for total beginners, and another for people who are more knowledgeable about&amp;nbsp;programming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just to note: the two sets of reasons are largely the same ideas presented differently, so I&amp;#8217;ll just weave them together&amp;nbsp;below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first section attempts to explain the case against starting with Python 3 in non-technical terms so a beginner can make up their own mind without being influenced by propaganda or social&amp;nbsp;pressure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having already read through this once, this sentence really stands out to me.  The author of a book many beginners read to learn Python in the first place is providing a number of reasons (some outright fabricated) not to use Python 3, often in terms beginners are ill-equipped to evaluate, but believes this is a defense &lt;em&gt;against&lt;/em&gt; propaganda or social&amp;nbsp;pressure.&lt;/p&gt;
&lt;h2 id="the-most-important-reason"&gt;&lt;a class="toclink" href="#the-most-important-reason"&gt;The Most Important&amp;nbsp;Reason&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Before getting into the main technical reasons I would like to discuss the one most important social reason for why you should not use Python 3 as a&amp;nbsp;beginner:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="caps"&gt;THERE&lt;/span&gt; &lt;span class="caps"&gt;IS&lt;/span&gt; A &lt;span class="caps"&gt;HIGH&lt;/span&gt; &lt;span class="caps"&gt;PROBABILITY&lt;/span&gt; &lt;span class="caps"&gt;THAT&lt;/span&gt; &lt;span class="caps"&gt;PYTHON&lt;/span&gt; 3 &lt;span class="caps"&gt;IS&lt;/span&gt; &lt;span class="caps"&gt;SUCH&lt;/span&gt; A &lt;span class="caps"&gt;FAILURE&lt;/span&gt; &lt;span class="caps"&gt;IT&lt;/span&gt; &lt;span class="caps"&gt;WILL&lt;/span&gt; &lt;span class="caps"&gt;KILL&lt;/span&gt; &lt;span class="caps"&gt;PYTHON&lt;/span&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Python 3&amp;#8217;s adoption is really only at about 30% whenever there is an attempt to measure&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wait, really?  Wow, that&amp;#8217;s&amp;nbsp;fantastic.&lt;/p&gt;
&lt;p&gt;I mean, it would probably be higher if the most popular beginner resources were actually teaching Python 3, but you&amp;nbsp;know.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nobody is all that interested in finding out what the real complete adoption is, despite there being fairly simple ways to gather metrics on the&amp;nbsp;adoption.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This accusatory sentence conspicuously neglects to mention what these fairly simple ways &lt;em&gt;are&lt;/em&gt;, a pattern that repeats throughout.  The trouble is that it&amp;#8217;s hard to even define what &amp;#8220;adoption&amp;#8221; means — I write all my code in Python 3 now, but veekun is still Python 2 because it&amp;#8217;s in maintenance mode, so what does that say about adoption?  You could look at PyPI download stats, but those are thrown way off by caches and system package managers.  You could look at downloads from the Python website, but a great deal of Python is written and used on Unix-likes, where Python itself is either bundled or installed from the package&amp;nbsp;manager.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;#8217;s as simple as that. If you learn Python 2, then you can still work with all the legacy Python 2 code in existence until Python dies or you (hopefully) move on. But if you learn Python 3 then your future is very uncertain. You could really be learning a dead language and end up having to learn Python 2&amp;nbsp;anyway.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You could use Python 2, until it dies&amp;#8230;  or you could use Python 3, which might die.  What a&amp;nbsp;choice.&lt;/p&gt;
&lt;p&gt;By some definitions, Python 2 is &lt;em&gt;already dead&lt;/em&gt; — it will not see another major release, only security fixes.  Python 3 is still actively developed, and its seventh major release is next month.  It even contains a new feature that Zed later mentions he prefers to Python 2&amp;#8217;s&amp;nbsp;offerings.&lt;/p&gt;
&lt;p&gt;It may shock you to learn that I know &lt;em&gt;both&lt;/em&gt; Python 2 &lt;em&gt;and&lt;/em&gt; Python 3.  Amazingly, two versions of the same language are much more similar than they are different.  If you learned Python 3 and then a wizard cast a spell that made it vanish from the face of the earth, you&amp;#8217;d just have to spend half an hour reading up on what had changed from Python&amp;nbsp;2.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Also, it&amp;#8217;s been over a decade, maybe even multiple decades, and Python 3 still isn&amp;#8217;t above about 30% in adoption. Even among the sciences where Python 3 is touted as a &amp;#8220;success&amp;#8221; it&amp;#8217;s still only around 25-30% adoption. After that long it&amp;#8217;s time to admit defeat and come up with a new&amp;nbsp;plan.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3.0 came out in 2008.  The first couple releases ironed out some compatibility and &lt;span class="caps"&gt;API&lt;/span&gt; problems, so it didn&amp;#8217;t start to gain much traction until Python 3.2 came out in 2011.  Hell, Python &lt;em&gt;2.0&lt;/em&gt; came out in 2000, so even Python 2 isn&amp;#8217;t multiple decades old.  It would be great if this trusted beginner reference could take two seconds to check details like this before using them to&amp;nbsp;scaremonger.&lt;/p&gt;
&lt;p&gt;The big early problem was library compatibility: it&amp;#8217;s hard to justify switching to a new version of the language if none of the libraries work.  Libraries could only port once their own dependencies had ported, of course, and it took a couple years to figure out the best way to maintain compatibility with both Python 2 and Python 3.  I&amp;#8217;d say we only really hit critical mass a few years ago — for instance, Django didn&amp;#8217;t support Python 3 until 2013 — in which case that 30% is nothing to sneeze&amp;nbsp;at.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are more reasons beyond just the uncertain future of Python 3 even decades&amp;nbsp;later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In one paragraph, we&amp;#8217;ve gone from &amp;#8220;maybe even multiple decades&amp;#8221; to just &amp;#8220;decades&amp;#8221;, which is a funny way to spell &amp;#8220;eight&amp;nbsp;years&amp;#8221;.&lt;/p&gt;
&lt;h2 id="not-in-your-best-interests"&gt;&lt;a class="toclink" href="#not-in-your-best-interests"&gt;Not In Your Best&amp;nbsp;Interests&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The Python project&amp;#8217;s efforts to convince you to start with Python 3 are &lt;em&gt;not&lt;/em&gt; in your best interest, but, rather, are only in the best interests of the Python&amp;nbsp;project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s bad, you see, for the Python project to want people to use the work it&amp;nbsp;produced.&lt;/p&gt;
&lt;p&gt;Anyway, please buy Zed Shaw&amp;#8217;s&amp;nbsp;book.&lt;/p&gt;
&lt;p&gt;Anyway, please pledge to &lt;a href="https://patreon.com/eevee"&gt;my Patreon&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ultimately though, if Python 3 were good they wouldn&amp;#8217;t need to do any convincing to get you to use it. It would just naturally work for you and you wouldn&amp;#8217;t have any problems. Instead, there are serious issues with Python 3 for beginners, and rather than fix those issues the Python project uses propaganda, social pressure, and marketing to convince you to use it. In the world of technology using marketing and propaganda is immediately a sign that the technology is defective in some obvious&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;This use of social pressure and propaganda to convince you to use Python 3 despite its problems, in an attempt to benefit the Python project, is morally unconscionable to&amp;nbsp;me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ten paragraphs in, Zed is telling me that I should be suspicious of anything that relies on marketing and propaganda.  Meanwhile, there has yet to be a single concrete reason why Python 3 is bad for beginners — just several flat-out incorrect assertions and a lot of handwaving about how inexplicably nefarious the Python core developers are.  You know, the same people who made Python 2.  But they weren&amp;#8217;t evil &lt;em&gt;then&lt;/em&gt;, I&amp;nbsp;guess.&lt;/p&gt;
&lt;h2 id="you-should-be-able-to-run-2-and-3"&gt;&lt;a class="toclink" href="#you-should-be-able-to-run-2-and-3"&gt;You Should Be Able to Run 2 and&amp;nbsp;3&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In the programming language theory there is this basic requirement that, given a &amp;#8220;complete&amp;#8221; programming language, I can run any other programming language. In the world of Java I&amp;#8217;m able to run Ruby, Java, C++, C, and Lua all at the same time. In the world of Microsoft I can run F#, C#, C++, and Python all at the same time. This isn&amp;#8217;t just a theoretical thing. There is solid math behind it. Math that is truly the foundation of computer&amp;nbsp;science.&lt;/p&gt;
&lt;p&gt;The fact that you can&amp;#8217;t run Python 2 and Python 3 at the same time is purely a social and technical decision that the Python project made with no basis in mathematical reality. This means you are working with a purposefully broken platform when you use Python 3, and I personally can&amp;#8217;t condone teaching people to use something that is fundamentally&amp;nbsp;broken.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The programmer-oriented section makes clear that the solid math being referred to is Turing-completeness — the section is even titled &amp;#8220;Python 3 Is Not Turing&amp;nbsp;Complete&amp;#8221;.&lt;/p&gt;
&lt;p&gt;First, notice a rhetorical trick here.  You can run Ruby, Java, C++, etc. at the same time, so why not Python 2 and Python&amp;nbsp;3?&lt;/p&gt;
&lt;p&gt;But can you run Java and C# at the same time?  (I&amp;#8217;m sure someone has &lt;em&gt;done&lt;/em&gt; this, but it&amp;#8217;s certainly much less popular than something like Jython or&amp;nbsp;IronPython.)&lt;/p&gt;
&lt;p&gt;Can you run Ruby 1.8 and Ruby 2.3 at the same time?  Ah, no, so I guess Ruby 2.3 is fundamentally and purposefully&amp;nbsp;broken.&lt;/p&gt;
&lt;p&gt;Can you run Lua 5.1 and 5.3 at the same time?  Lua is a &lt;em&gt;spectacular&lt;/em&gt; example, because Lua 5.2 made a breaking change to how the details of scope work, and it&amp;#8217;s led to a situation where a lot of programs that embed Lua haven&amp;#8217;t bothered upgrading from Lua 5.1.  Was Lua 5.2 some kind of &lt;em&gt;dark plot&lt;/em&gt; to deliberately break the language?  No, it&amp;#8217;s just slightly more inconvenient than expected for people to&amp;nbsp;upgrade.&lt;/p&gt;
&lt;p&gt;Anyway, as for Turing&amp;nbsp;machines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science a fundamental law is that if I have one Turing Machine I can build any other Turing Machine. If I have &lt;span class="caps"&gt;COBOL&lt;/span&gt; then I can bootstrap a compiler for &lt;span class="caps"&gt;FORTRAN&lt;/span&gt; (as disgusting as that might be). If I have &lt;span class="caps"&gt;FORTH&lt;/span&gt;, then I can build an interpreter for Ruby. This also applies to bytecodes for CPUs. If I have a Turing Complete bytecode then I can create a compiler for any language. The rule then can be extended even further to say that if I cannot create another Turing Machine in your language, then your language cannot be Turing Complete. If I can&amp;#8217;t use your language to write a compiler or interpreter for any other language then your language is not Turing&amp;nbsp;Complete.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, this is&amp;nbsp;true.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently you cannot run Python 2 inside the Python 3 virtual machine. Since I cannot, that means Python 3 is not Turing Complete and should not be used by&amp;nbsp;anyone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this is completely asinine.  Worse, it&amp;#8217;s flat-out dishonest, and relies on &lt;em&gt;another&lt;/em&gt; rhetorical trick.  You only &amp;#8220;cannot&amp;#8221; run Python 2 inside the Python 3 &lt;span class="caps"&gt;VM&lt;/span&gt; because &lt;em&gt;no one has written a Python 2 interpreter in Python 3&lt;/em&gt;.  The &amp;#8220;cannot&amp;#8221; is not a mathematical impossibility; it&amp;#8217;s a simple matter of the code not having been written.  Or perhaps it has, but no one cares anyway, because it would be comically and unusably&amp;nbsp;slow.&lt;/p&gt;
&lt;p&gt;I assume this was meant to be sarcastic on some level, since it&amp;#8217;s followed by a big blue box that seems unsure about whether to double down or reverse course.  But I can&amp;#8217;t tell why it was even brought up, because it has &lt;em&gt;absolutely nothing&lt;/em&gt; to do with Zed&amp;#8217;s true complaint, which is that Python 2 and Python 3 do not &lt;em&gt;coexist&lt;/em&gt; within a single environment.  Implementing language X using language Y does not mean that X and Y can now be used together&amp;nbsp;seamlessly.&lt;/p&gt;
&lt;p&gt;The canonical Python release is written in C (just like with Ruby or Lua), but you can&amp;#8217;t just dump a bunch of C code into a Python (or Ruby or Lua) file and expect it to work.  You &lt;em&gt;can&lt;/em&gt; talk to C from Python and vice versa, but defining how they communicate is a bit of a pain in the ass and requires some level of&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll get into this some more&amp;nbsp;shortly.&lt;/p&gt;
&lt;h2 id="no-working-translator"&gt;&lt;a class="toclink" href="#no-working-translator"&gt;No Working&amp;nbsp;Translator&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 3 comes with a tool called &lt;code&gt;2to3&lt;/code&gt; which is supposed to take Python 2 code and translate it to Python 3&amp;nbsp;code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I should point out right off the bat that this is not actually what you want to use most of the time, because you probably want to translate your Python 2 code to Python &lt;em&gt;2/3&lt;/em&gt; code.  &lt;code&gt;2to3&lt;/code&gt; produces code that most likely will not work on Python 2.  &lt;a href="https://eev.ee/blog/2016/07/31/python-faq-how-do-i-port-to-python-3/"&gt;Other tools exist&lt;/a&gt; to help you port more&amp;nbsp;conservatively.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Translating one programming language into another is a solidly researched topic with solid math behind it. There are translators that convert any number of languages into JavaScript, C, C++, Java, and many times you have no idea the translation is being done. In addition to this, one of the first steps when implementing a new language is to convert the new language into an existing language (like C) so you don&amp;#8217;t have to write a full compiler. Translation is a fully solved&amp;nbsp;problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is completely fucking ludicrous.  Translating one programming language to another &lt;em&gt;is&lt;/em&gt; a common task, though &amp;#8220;fully solved&amp;#8221; sounds mighty questionable.  But do you know what the results look&amp;nbsp;like?&lt;/p&gt;
&lt;p&gt;I found a project called &amp;#8220;Transcrypt&amp;#8221;, which puts Python in the browser by &amp;#8220;translating&amp;#8221; it to JavaScript.  I&amp;#8217;ve never used or heard of this before; I just googled for something to convert Python to JavaScript.  Here&amp;#8217;s their first sample, a &lt;a href="http://transcrypt.org/examples#jquery_demo"&gt;demo using jQuery&lt;/a&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;changeColors&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;S__divs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rgb({},{},{})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;S__divs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;changeColors&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setInterval&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changeColors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;And here&amp;#8217;s the JavaScript code it compiles&amp;nbsp;to:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;changeColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;__iterable0__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$divs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;__index0__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;__index0__&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;__iterable0__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;__index0__&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;__iterable0__&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;__index0__&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dict&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rgb({},{},{})&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;__accu0__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;__accu0__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="p"&gt;()));&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;__accu0__&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;())}));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$divs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;changeColors&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changeColors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;__pragma__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;all&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;__all__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;__pragma__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;/all&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Well, not quite.  That&amp;#8217;s actually just a small piece at the end of &lt;a href="http://transcrypt.org/live/transcrypt/demos/jquery_demo/__javascript__/jquery_demo.js"&gt;the full 1861-line file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You may notice that the emitted JavaScript effectively has to &lt;em&gt;emulate&lt;/em&gt; the Python &lt;code&gt;for&lt;/code&gt; loop, because JavaScript doesn&amp;#8217;t have anything that works exactly the same way.  And this is a basic, common language feature translated between two languages in the same general family!  Imagine how your code would look if you relied on gritty details of how classes are&amp;nbsp;implemented.&lt;/p&gt;
&lt;p&gt;Is this what you want &lt;code&gt;2to3&lt;/code&gt; to do to your&amp;nbsp;code?&lt;/p&gt;
&lt;p&gt;Even if something has been proven to be mathematically possible, that doesn&amp;#8217;t mean it&amp;#8217;s &lt;em&gt;easy&lt;/em&gt;, and it doesn&amp;#8217;t mean the results will be &lt;em&gt;pretty&lt;/em&gt; (or&amp;nbsp;fast).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;2to3&lt;/code&gt; translator fails on about 15% of the code it attempts, and does a poor job of translating the code it can handle. The motivations for this are unclear, but keep in mind that a group of people who claim to be programming language experts can&amp;#8217;t write a reliable translator from one version of their own language to another. This is also a cause of their porting problems, which adds up to more evidence Python 3&amp;#8217;s future is&amp;nbsp;uncertain.&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;Writing a translator from one language to another is a fully proven and fundamental piece of computer science. Yet, the 2to3 translator cannot translate code 100%. In my own tests it is only about 85% effective, leaving a large amount of code to translate manually. Given that translation is a solved problem this seems to be a decision bordering on malice rather than incredible&amp;nbsp;incompetence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The programmer-oriented section doubles down on this idea with a title of &amp;#8220;Purposefully Crippled 2to3 Translator&amp;#8221; — again, accusing the Python project of sabotaging everyone.  That doesn&amp;#8217;t even make &lt;em&gt;sense&lt;/em&gt;; if their goal is to make everyone use Python 3 at any cost, why would they deliberately break their tool that reduces the amount of Python 2 code and increases the amount of Python 3&amp;nbsp;code?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2to3&lt;/code&gt; sucks because its job is hard.  Python is dynamically typed.  If it sees &lt;code&gt;d.iteritems()&lt;/code&gt;, it might want to change that to &lt;code&gt;d.items()&lt;/code&gt;, as it&amp;#8217;s called in Python 3 — but it can&amp;#8217;t always be sure that &lt;code&gt;d&lt;/code&gt; is actually a &lt;code&gt;dict&lt;/code&gt;.  If &lt;code&gt;d&lt;/code&gt; is some user-defined type, renaming the method is&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;But hey, Turing-completeness, right?  It &lt;em&gt;must&lt;/em&gt; be &lt;em&gt;mathematically possible&lt;/em&gt;.  And it is!  As long as you&amp;#8217;re willing to see&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Get translated to&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;__d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Would Zed be happier with that, I&amp;nbsp;wonder?&lt;/p&gt;
&lt;h2 id="the-jvm-and-clr-prove-its-pointless"&gt;&lt;a class="toclink" href="#the-jvm-and-clr-prove-its-pointless"&gt;The JVM and CLR Prove It's&amp;nbsp;Pointless&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Yet, for some reason, the Python 3 virtual machine can&amp;#8217;t run Python 2? Despite the solidly established mathematics disproving this, the countless examples of running one crazy language inside a Russian doll cascade of other crazy languages, and huge number of languages that can coexist in nearly every other virtual machine? That makes no&amp;nbsp;sense.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This, finally, is the real complaint.  It&amp;#8217;s not a bad one, and it comes up sometimes, but&amp;#8230;  it&amp;#8217;s not this&amp;nbsp;easy.&lt;/p&gt;
&lt;p&gt;The Python 3 &lt;span class="caps"&gt;VM&lt;/span&gt; is fairly similar to the Python 2 &lt;span class="caps"&gt;VM&lt;/span&gt;.  The problem isn&amp;#8217;t the &lt;span class="caps"&gt;VM&lt;/span&gt;, but the core language constructs and standard&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;Consider: what happens when a Python 2 old-style class instance gets passed into Python 3, which has no such concept?  It seems like a value would &lt;em&gt;have&lt;/em&gt; to always have the semantics of the language version it came from — that&amp;#8217;s how languages usually coexist on the same &lt;span class="caps"&gt;VM&lt;/span&gt;,&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Now, I&amp;#8217;m using Python 3, and I load some library written for Python 2.  I call a Python 2 function that deals with bytestrings, and I pass it a Python 3 bytestring.  Oh no!  It breaks because Python 3 bytestrings iterate as integers, whereas the Python 2 library expects them to iterate as&amp;nbsp;characters.&lt;/p&gt;
&lt;p&gt;Okay, well, no big deal, you say.  Maybe Python 2 libraries just need to be updated to work either way, before they can be used with Python&amp;nbsp;3.&lt;/p&gt;
&lt;p&gt;But that&amp;#8217;s &lt;strong&gt;exactly the situation we&amp;#8217;re in right now&lt;/strong&gt;.  Syntax changes are trivially fixed by &lt;code&gt;2to3&lt;/code&gt; and similar tools.  It&amp;#8217;s libraries that cause the subtler&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;The same applies the other way, too.  I write Python 3 code, and it gets an &lt;code&gt;int&lt;/code&gt; from some Python 2 library.  I try to use the &lt;code&gt;.to_bytes&lt;/code&gt; method on it, but that doesn&amp;#8217;t exist on Python 2 integers.  So my Python 3 code, written and intended purely for Python 3, now has to deal with Python 2 integers as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Perhaps &amp;#8220;primitive&amp;#8221; types should convert automatically, on the boundary?  Okay, sure.  What about the Python 2 &lt;code&gt;buffer&lt;/code&gt; type, which is C-backed and replaced by &lt;code&gt;memoryview&lt;/code&gt; in Python&amp;nbsp;3?&lt;/p&gt;
&lt;p&gt;Or how about this very fundamental problem: names of methods and other attributes are &lt;code&gt;str&lt;/code&gt; in both versions, but that means they&amp;#8217;re bytestrings in Python 2 and text in Python 3.  If you&amp;#8217;re in Python 3 land, and you call &lt;code&gt;obj.foo()&lt;/code&gt; on a Python 2 object, what happens?  Python 3 wants a method with the &lt;em&gt;text&lt;/em&gt; name &lt;code&gt;foo&lt;/code&gt;, but Python 2 wants a method with the &lt;em&gt;bytes&lt;/em&gt; name &lt;code&gt;foo&lt;/code&gt;.  Text and bytes are not implicitly convertible in Python 3.  So does it error?  Somehow work anyway?  What about the other way&amp;nbsp;around?&lt;/p&gt;
&lt;p&gt;What about the standard library, which has had a number of improvements in Python 3 that don&amp;#8217;t or can&amp;#8217;t exist in Python 2?  Should Python ship two entire separate copies of its standard library?  What about modules like &lt;code&gt;logging&lt;/code&gt;, which rely on global state?  Does Python 2 and Python 3 code need to set up logging separately within the same&amp;nbsp;process?&lt;/p&gt;
&lt;p&gt;There are no good solutions here.  The language would double in size and complexity, and you&amp;#8217;d &lt;em&gt;still&lt;/em&gt; end up with a mess at least as bad as the one we have now when values leak from one version into the&amp;nbsp;other.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We either have two situations&amp;nbsp;here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 3 has been purposefully crippled to prevent Python 2&amp;#8217;s execution alongside Python 3 for someone&amp;#8217;s professional or ideological&amp;nbsp;gain.&lt;/li&gt;
&lt;li&gt;Python 3 cannot run Python 2 due to simple incompetence on the part of the Python&amp;nbsp;project.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can think of a&amp;nbsp;third.&lt;/p&gt;
&lt;h2 id="difficult-to-use-strings"&gt;&lt;a class="toclink" href="#difficult-to-use-strings"&gt;Difficult To Use&amp;nbsp;Strings&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The strings in Python 3 are very difficult to use for beginners. In an attempt to make their strings more &amp;#8220;international&amp;#8221; they turned them into difficult to use types with poor error&amp;nbsp;messages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why is &amp;#8220;international&amp;#8221; in scare&amp;nbsp;quotes?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every time you attempt to deal with characters in your programs you&amp;#8217;ll have to understand the difference between byte sequences and Unicode&amp;nbsp;strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given that I&amp;#8217;m reading part of a book teaching Python, this would be a perfect opportunity to drive this point home by saying &amp;#8220;Look!  Running exercise N in Python 3 doesn&amp;#8217;t work.&amp;#8221;  &lt;a href="https://learnpythonthehardway.org/book/ex1.html"&gt;Exercise 1&lt;/a&gt;, at least, works fine for me with a little extra sprinkle of&amp;nbsp;parentheses:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello Again&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I like typing this.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This is fun.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Yay! Printing.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I&amp;#39;d much rather you &amp;#39;not&amp;#39;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I &amp;quot;said&amp;quot; do not touch this.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Contrast with the &lt;em&gt;actual content&lt;/em&gt; of that exercise — at the bottom is a big red warning box telling people from &amp;#8220;another country&amp;#8221; (relative to where?) that if they get errors about &lt;span class="caps"&gt;ASCII&lt;/span&gt; encodings, they should put an unexplained magical incantation at the top of their scripts to fix &amp;#8220;Unicode &lt;span class="caps"&gt;UTF&lt;/span&gt;-8&amp;#8221;, whatever that is.  I wonder if Zed has read his own&amp;nbsp;book.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;#8217;t know what that is?&amp;nbsp;Exactly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If only there were a book that could explain it to beginners in more depth than &amp;#8220;you have to fix this if you&amp;#8217;re&amp;nbsp;foreign&amp;#8221;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Python project took a language that is very forgiving to beginners and mostly &amp;#8220;just works&amp;#8221; and implemented strings that require &lt;em&gt;you&lt;/em&gt; to constantly know what type of string they are. Worst of all, when you get an error with strings (which is very often) you get an error message that doesn&amp;#8217;t tell you &lt;em&gt;what variable names you need to fix&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The complaint is that this happens in Python 3, whereas it&amp;#8217;s accepted in Python&amp;nbsp;2:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; b&amp;quot;hello&amp;quot; + &amp;quot;hello&amp;quot;
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: can&amp;#39;t concat bytes to str
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The programmer section is called &amp;#8220;Statically Typed Strings&amp;#8221;.  But this is not static typing.  That&amp;#8217;s &lt;a href="https://eev.ee/blog/2016/07/26/the-hardest-problem-in-computer-science/#loose-typing"&gt;strong typing&lt;/a&gt;, a property that sets Python&amp;#8217;s type system apart from languages like JavaScript.  It&amp;#8217;s usually considered a &lt;em&gt;good&lt;/em&gt; thing, because the alternative is to silently produce nonsense in some cases, and then that nonsense propagates through your program and is hard to track down when it finally causes&amp;nbsp;problems.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If they&amp;#8217;re going to require beginners to struggle with the difference between bytes and Unicode the &lt;em&gt;least&lt;/em&gt; they could do is tell people what variables are bytes and what variables are&amp;nbsp;strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That would be nice, but it&amp;#8217;s not like this is a new problem.  Try this in Python&amp;nbsp;2.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 3 + &amp;quot;hello&amp;quot;
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: unsupported operand type(s) for +: &amp;#39;int&amp;#39; and &amp;#39;str&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;How would Python even report this error when I used literals instead of variables?  How could custom types hook into such a thing?  Error messages are&amp;nbsp;hard.&lt;/p&gt;
&lt;p&gt;By the way, did you know that several &lt;a href="https://eev.ee/blog/2016/07/31/python-faq-why-should-i-use-python-3/#enhanced-exceptions"&gt;error messages are much improved&lt;/a&gt; in Python 3?  Python 2 is somewhat notorious for the confusing errors it produces when an argument is missing from a method call, but Python 3 is specific about the problem, which is much friendlier to&amp;nbsp;beginners.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, when you point out that this is hard to use they try to claim it&amp;#8217;s good for you. It is not. It&amp;#8217;s simple blustering covering for a poor&amp;nbsp;implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&amp;#8217;t know what about this is hard.  Why do you have a text string and a bytestring in the first place?  Why is it okay to refuse adding a number to a string, but not to refuse adding bytes to a&amp;nbsp;string?&lt;/p&gt;
&lt;p&gt;Imagine if one of the Python core developers were just getting into Python 2 and messing&amp;nbsp;around.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf8 -*-&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hi, my name is Łukasz Langa.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hi, my name is Łukasz Langa.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hi, my name is Łukasz Langa.
.agnaL zsaku�� si eman ym ,iH
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Good luck figuring out how to fix&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t blustering.  Bytes &lt;em&gt;are not text&lt;/em&gt;; they are binary data that could encode &lt;em&gt;anything&lt;/em&gt;.  They happen to look like text sometimes, and you can get away with thinking they&amp;#8217;re text if you&amp;#8217;re not from &amp;#8220;another country&amp;#8221;, but that mindset will lead you to write code that is &lt;em&gt;wrong&lt;/em&gt;.  The resulting bugs will be insidious and confusing, and you&amp;#8217;ll have a hard time even reasoning about them because it&amp;#8217;ll seem like &amp;#8220;Unicode text&amp;#8221; is somehow a different beast altogether from &amp;#8220;&lt;span class="caps"&gt;ASCII&lt;/span&gt;&amp;nbsp;text&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learnpythonthehardway.org/book/ex11.html"&gt;Exercise 11&lt;/a&gt; mentions at the end that you can use &lt;code&gt;int()&lt;/code&gt; to convert a number to an integer.  It&amp;#8217;s no more complicated to say that you convert bytes to a string using &lt;code&gt;.decode()&lt;/code&gt;.  It shouldn&amp;#8217;t even come up unless you&amp;#8217;re explicitly working with binary data, and I don&amp;#8217;t see any reading from sockets in &lt;span class="caps"&gt;LPTHW&lt;/span&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;#8217;s also not statically compiled as strongly as it could be, so you can&amp;#8217;t find these kinds of type errors until you run the&amp;nbsp;code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This comes a scant few paragraphs after &amp;#8220;Dynamic typing is what makes Python easy to use and one of the reasons I advocate it for&amp;nbsp;beginners.&amp;#8221;&lt;/p&gt;
&lt;p&gt;You can&amp;#8217;t find &lt;em&gt;any&lt;/em&gt; kinds of type errors until you run the code.  Welcome to dynamic&amp;nbsp;typing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Strings are also most frequently received from an external source, such as a network socket, file, or similar input. This means that Python 3&amp;#8217;s statically typed strings and lack of static type safety will cause Python 3 applications to crash more often and have more security problems when compared with Python&amp;nbsp;2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the contrary — Python 3 applications should crash &lt;em&gt;less&lt;/em&gt; often.  The problem with silently converting between bytestrings and text in Python 2 is that it &lt;em&gt;might&lt;/em&gt; fail, &lt;em&gt;depending on the contents&lt;/em&gt;.  &lt;code&gt;"cafe" + u"hello"&lt;/code&gt; works fine, but &lt;code&gt;"café" + u"hello"&lt;/code&gt; raises a &lt;code&gt;UnicodeDecodeError&lt;/code&gt;.  Python 2 makes it very easy to write code that appears to work when tested with &lt;span class="caps"&gt;ASCII&lt;/span&gt; data, but later breaks with anything else, even though the values are still the same types.  In Python 3, you get an error the first time you try to run such code, regardless of what&amp;#8217;s in the actual values.  That&amp;#8217;s the biggest reason for the change: it improves things from being intermittent &lt;em&gt;value&lt;/em&gt; errors to consistent &lt;em&gt;type&lt;/em&gt;&amp;nbsp;errors.&lt;/p&gt;
&lt;p&gt;More &lt;em&gt;security problems&lt;/em&gt;?  This is never substantiated, and seems to have been entirely&amp;nbsp;fabricated.&lt;/p&gt;
&lt;h2 id="too-many-formatting-options"&gt;&lt;a class="toclink" href="#too-many-formatting-options"&gt;Too Many Formatting&amp;nbsp;Options&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In addition to that you will have 3 different formatting options in Python 3.6. That means you&amp;#8217;ll have to learn to read and use multiple ways to format strings that are all very different. Not even I, an experienced professional programmer, can easily figure out these new formatting systems or keep up with their changing&amp;nbsp;features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&amp;#8217;t know what on earth &amp;#8220;keep up with their changing features&amp;#8221; is supposed to mean, and Zed doesn&amp;#8217;t bother to go into&amp;nbsp;details.  &lt;/p&gt;
&lt;p&gt;Python 3 has three ways to format strings: &lt;code&gt;%&lt;/code&gt; interpolation, &lt;code&gt;str.format()&lt;/code&gt;, and the new &lt;code&gt;f""&lt;/code&gt; strings in Python 3.6.  The &lt;code&gt;f""&lt;/code&gt; strings use &lt;em&gt;the same syntax&lt;/em&gt; as &lt;code&gt;str.format()&lt;/code&gt;; the difference is that where &lt;code&gt;str.format()&lt;/code&gt; uses numbers or names of keyword arguments, &lt;code&gt;f""&lt;/code&gt; strings just use expressions.&amp;nbsp;Compare:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;133&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{n:02x}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{number:02x}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This isn&amp;#8217;t &amp;#8220;very different&amp;#8221;.  A frequently-used method is being promoted to&amp;nbsp;syntax.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; like this new style, and I have no idea why this wasn&amp;#8217;t the formatting for Python 3 instead of that stupid &lt;code&gt;.format&lt;/code&gt; function. String interpolation is natural for most people and easy to&amp;nbsp;explain.&lt;/p&gt;
&lt;p&gt;The problem is that beginner will now how to know all three of these formatting styles, and that&amp;#8217;s too&amp;nbsp;many.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I could swear Zed, an experienced professional programmer, just said he couldn&amp;#8217;t easily figure out these new formatting systems.  Note also that &lt;code&gt;str.format()&lt;/code&gt; has existed in Python 2 since Python 2.6 was released in 2008, so I don&amp;#8217;t know why Zed said &amp;#8220;new formatting &lt;em&gt;systems&lt;/em&gt;&amp;#8220;,&amp;nbsp;plural.&lt;/p&gt;
&lt;p&gt;This is a truly bizarre complaint overall, because the mechanism Zed likes best is the &lt;em&gt;newest&lt;/em&gt; one.  If Python core had agreed that three mechanisms was too many, we wouldn&amp;#8217;t be getting &lt;code&gt;f""&lt;/code&gt; at&amp;nbsp;all.  &lt;/p&gt;
&lt;h2 id="even-more-versions-of-strings"&gt;&lt;a class="toclink" href="#even-more-versions-of-strings"&gt;Even More Versions of&amp;nbsp;Strings&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Finally, I&amp;#8217;m told there is a new proposal for a string type that is both bytes and Unicode at the same time? That&amp;#8217;d be fantastic if this new type brings back the dynamic typing that makes Python easy, but I&amp;#8217;m betting it will end up being &lt;em&gt;yet another static type to learn&lt;/em&gt;. For that reason I also think beginners should avoid Python 3 until this new &amp;#8220;chimera string&amp;#8221; is implemented and works reliably in a dynamic way. Until then, you will just be dealing with difficult strings that are statically typed in a dynamically typed&amp;nbsp;language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have absolutely no idea what this is referring to, and I can&amp;#8217;t find anyone who does.  I don&amp;#8217;t see any recent &lt;a href="https://www.python.org/dev/peps/"&gt;PEPs&lt;/a&gt; mentioning such a thing, nor anything in the last several months on &lt;a href="https://mail.python.org/mailman/listinfo/python-dev"&gt;the python-dev mailing list&lt;/a&gt;.  I don&amp;#8217;t see it in the &lt;a href="https://docs.python.org/3.6/whatsnew/3.6.html"&gt;Python 3.6 release notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The closest thing I can think of is the backwards-compatibility shenanigans for &lt;a href="https://www.python.org/dev/peps/pep-0528/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 528&lt;/a&gt; and &lt;a href="https://www.python.org/dev/peps/pep-0529/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 529&lt;/a&gt; — they switch to the Windows wide-string APIs for console and filesystem encoding, but pretend under the hood that the APIs take &lt;span class="caps"&gt;UTF&lt;/span&gt;-8-encoded bytes to avoid breaking libraries like Twisted.  That&amp;#8217;s a microscopic detail that should never matter to anyone &lt;em&gt;but&lt;/em&gt; authors of Twisted, and is nothing like a new hybrid string type, but otherwise I&amp;#8217;m at a&amp;nbsp;loss.&lt;/p&gt;
&lt;p&gt;This paragraph really is a perfect summary of the whole article.  It speaks vaguely yet authoritatively about something that doesn&amp;#8217;t seem to exist, it doesn&amp;#8217;t bother actually investigating the thing the entire section talks about, it conjectures that this mysterious feature will be hard just because it&amp;#8217;s in Python 3, and it misuses terminology to complain about a fundamental property of Python that&amp;#8217;s always&amp;nbsp;existed.&lt;/p&gt;
&lt;h2 id="core-libraries-not-updated"&gt;&lt;a class="toclink" href="#core-libraries-not-updated"&gt;Core Libraries Not&amp;nbsp;Updated&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Many of the core libraries included with Python 3 have been rewritten to use Python 3, but have not been updated to use its features. How could they given Python 3&amp;#8217;s constant changing status and new&amp;nbsp;features?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;What&lt;/em&gt; &amp;#8220;constant changing status&amp;#8221;?  The language makes new releases; is that bad?  The only mention of &amp;#8220;changing&amp;#8221; so far was with string formatting, which makes no sense to me, because the only major change has been the addition of syntax that Zed &lt;em&gt;prefers&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are several libraries that, despite knowing the encoding of data, fail to return proper strings. The worst offender seems to be any libraries dealing with the &lt;span class="caps"&gt;HTTP&lt;/span&gt; protocol, which &lt;em&gt;does&lt;/em&gt; indicate the encoding of the underlying byte stream in many&amp;nbsp;cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;In many cases&lt;/em&gt;, yes.  Not in all.  Some web servers don&amp;#8217;t send back an encoding.  Some files don&amp;#8217;t &lt;em&gt;have&lt;/em&gt; an encoding, because they&amp;#8217;re images or other binary data.  &lt;span class="caps"&gt;HTML&lt;/span&gt; allows the encoding to be given inside the document, instead.  &lt;code&gt;urllib&lt;/code&gt; has always returned bytes, so it&amp;#8217;s not all that unreasonable to keep doing that, rather than&amp;#8230;  well, I&amp;#8217;m not quite sure what this is proposing.  Return strings &lt;em&gt;sometimes&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/urllib.request.html"&gt;documentation for &lt;code&gt;urllib.request&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.python.org/3/library/http.client.html"&gt;&lt;code&gt;http.client&lt;/code&gt;&lt;/a&gt; both advise using the higher-level &lt;a href="http://docs.python-requests.org/"&gt;Requests&lt;/a&gt; library instead, in a prominent yellow box right at the top.  Requests has distinct mechanisms for retrieving bytes versus text and is vastly easier to use overall, though I don&amp;#8217;t think even it understands reading encodings from &lt;span class="caps"&gt;HTML&lt;/span&gt;.  Alas,&amp;nbsp;computers.&lt;/p&gt;
&lt;p&gt;Good luck to any beginner figuring out how to install Requests on Python 2 — but thankfully, Python 3 now comes bundled with pip, which makes installing libraries much easier.  Contrast with the beginning of &lt;a href="https://learnpythonthehardway.org/book/ex46.html"&gt;exercise 46&lt;/a&gt;, which apologizes for how difficult this is to explain, lists &lt;em&gt;four&lt;/em&gt; things to install, warns that it will be frustrating, and advises watching a &lt;em&gt;video&lt;/em&gt; to help figure it&amp;nbsp;out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What&amp;#8217;s even more idiotic about this is Python has a really good &lt;a href="https://pypi.python.org/pypi/chardet"&gt;Chardet&lt;/a&gt; library for detecting the encoding of byte streams. If Python 3 is supposed to be &amp;#8220;batteries included&amp;#8221; then fast Chardet should be baked into the core of Python 3&amp;#8217;s strings making it cake to translate strings to bytes even if you don&amp;#8217;t know the underlying encoding. &amp;#8230; Call the function whatever you want, but it&amp;#8217;s not magic to guess at the encoding of a byte stream, it&amp;#8217;s science. The only reason this isn&amp;#8217;t done for you is that the Python project decided that &lt;em&gt;you&lt;/em&gt; should be punished for not knowing about bytes vs. Unicode, and their arrogance means you have difficult to use&amp;nbsp;strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Guessing at the encoding of a byte stream isn&amp;#8217;t so much science as, well, guessing.  Guessing means that &lt;a href="https://en.wikipedia.org/wiki/Bush_hid_the_facts"&gt;sometimes you&amp;#8217;re wrong&lt;/a&gt;.  Sometimes that&amp;#8217;s what you want, and I&amp;#8217;m honestly ambivalent about having chardet in the standard library, but it&amp;#8217;s hardly &lt;em&gt;arrogant&lt;/em&gt; to not want to include a highly-fallible heuristic in your programming&amp;nbsp;language.&lt;/p&gt;
&lt;h2 id="conclusions-and-warnings"&gt;&lt;a class="toclink" href="#conclusions-and-warnings"&gt;Conclusions and&amp;nbsp;Warnings&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I have resisted writing about these problems with Python 3 for 5 versions because I hoped it would become usable for beginners. Each year I would attempt to convert some of my code and write a couple small tests with Python 3 and simply fail. If I couldn&amp;#8217;t use Python 3 reliably then there&amp;#8217;s no way a total beginner could manage it. So each year I&amp;#8217;d attempt it, and fail, and wait until they fix it. I really liked Python and hoped the Python project would drop their stupid stances on&amp;nbsp;usability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us recap the usability problems seen&amp;nbsp;thusfar.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can&amp;#8217;t add &lt;code&gt;b"hello"&lt;/code&gt; to &lt;code&gt;"hello"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TypeError&lt;/code&gt;s are phrased exactly the same as they were in Python&amp;nbsp;2.&lt;/li&gt;
&lt;li&gt;The type system is exactly as dynamic as it was in Python&amp;nbsp;2.&lt;/li&gt;
&lt;li&gt;There is a new formatting mechanism, using the same syntax as one in Python 2, that Zed prefers over the ones in Python&amp;nbsp;2.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urllib.request&lt;/code&gt; doesn&amp;#8217;t decode for you, just like in Python&amp;nbsp;2.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;档牡敤㽴&lt;/code&gt; isn&amp;#8217;t built in.  Oh, sorry, I meant &lt;code&gt;chardet&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently, the state of strings is viewed as a Good Thing in the Python community. The fact that you can&amp;#8217;t run Python 2 inside Python 3 is seen as a weird kind of tough love. The brainwashing goes so far as to outright deny the mathematics behind language translation and compilation in an attempt to motivate the Python community to brute force convert all Python 2&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Which is probably why the Python project focuses on convincing unsuspecting beginners to use Python 3. They don&amp;#8217;t have a switching cost, so if you get them to fumble their way through the Python 3 usability problems then you have new converts who don&amp;#8217;t know any better. To me this is morally wrong and is simply preying on people to prop up a project that needs a full reset to survive. It means beginners will fail at learning to code not because of their own abilities, but because of Python 3&amp;#8217;s&amp;nbsp;difficulty.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now that we&amp;#8217;re towards the end, it&amp;#8217;s a good time to say this: &lt;strong&gt;Zed Shaw, your behavior here is fucking&amp;nbsp;reprehensible.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Half of what&amp;#8217;s written here is irrelevant nonsense backed by a vague appeal to &amp;#8220;mathematics&amp;#8221;.  Instead of having even the shred of humility required to step back and wonder if there are complicating factors beyond whether something is theoretically &lt;em&gt;possible&lt;/em&gt;, you have invented a variety of conflicting and malicious motivations to ascribe to the Python&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s fine to criticize Python 3.  The string changes force you to think about what you&amp;#8217;re doing a little more in some cases, and occasionally that&amp;#8217;s a pain in the ass.  I absolutely get&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;But you&amp;#8217;ve gone out of your way to invent a &lt;em&gt;conspiracy&lt;/em&gt; out of whole cloth and promote it on your popular platform &lt;em&gt;aimed at beginners&lt;/em&gt;, who won&amp;#8217;t know how obviously full of it you are.  And why?  Because you can&amp;#8217;t add &lt;code&gt;b"hello"&lt;/code&gt; to &lt;code&gt;"hello"&lt;/code&gt;?  Are you kidding me?  No one can even offer to &lt;em&gt;help&lt;/em&gt; you, because instead of examples of real problems you&amp;#8217;ve had, you gave two trivial toys and then yelled a lot about how the whole Python project is releasing mind-altering chemicals into the&amp;nbsp;air.&lt;/p&gt;
&lt;p&gt;The Python 3 migration has been hard enough.  It&amp;#8217;s taken a lot of work from a lot of people who&amp;#8217;ve given enough of a crap to help Python evolve — to make it &lt;em&gt;better&lt;/em&gt; to the best of their judgment and abilities.  Now we&amp;#8217;re finally, &lt;em&gt;finally&lt;/em&gt; at the point where virtually all libraries support Python 3, a few new ones &lt;em&gt;only&lt;/em&gt; support Python 3, and Python 3 adoption is starting to take hold among application&amp;nbsp;developers.&lt;/p&gt;
&lt;p&gt;And you show up to piss all over it, to propagate this myth that Python 3 is hamstrung to the point of unusability, because if the Great And Wise Zed Shaw can&amp;#8217;t figure it out in ten seconds then it must just be&amp;nbsp;impossible.&lt;/p&gt;
&lt;p&gt;Fuck&amp;nbsp;you.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sadly, I doubt this will happen, and instead they&amp;#8217;ll just rant about how I don&amp;#8217;t know what I&amp;#8217;m talking about and I should shut&amp;nbsp;up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is because you don&amp;#8217;t know what you&amp;#8217;re talking about, and you should shut&amp;nbsp;up.&lt;/p&gt;</content><category term="tech"></category><category term="yelling"></category><category term="python"></category></entry><entry><title>Iteration in one language, then all the others</title><link href="https://eev.ee/blog/2016/11/18/iteration-in-one-language-then-all-the-others/" rel="alternate"></link><published>2016-11-18T19:48:00-08:00</published><updated>2016-11-18T19:48:00-08:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-11-18:/blog/2016/11/18/iteration-in-one-language-then-all-the-others/</id><summary type="html">&lt;p&gt;You &lt;a href="https://eev.ee/blog/2016/09/18/the-curious-case-of-the-switch-statement/"&gt;may have noticed&lt;/a&gt; that I like comparing features across different languages.  I hope you like it too, because I&amp;#8217;m doing it&amp;nbsp;again.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;You &lt;a href="https://eev.ee/blog/2016/09/18/the-curious-case-of-the-switch-statement/"&gt;may have noticed&lt;/a&gt; that I like comparing features across different languages.  I hope you like it too, because I&amp;#8217;m doing it&amp;nbsp;again.&lt;/p&gt;


&lt;h2 id="python"&gt;&lt;a class="toclink" href="#python"&gt;Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m most familiar with Python, and iteration is one of its major concepts, so it&amp;#8217;s a good place to start and a good overview of iteration.  I&amp;#8217;ll dive into Python a little more deeply, then draw parallels to other&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;Python only has one form of iteration loop, &lt;code&gt;for&lt;/code&gt;.  (Note that all of these examples are written for Python 3; in Python 2, some of the names are slightly different, and fewer things are&amp;nbsp;lazy.)&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;in&lt;/code&gt; is also an operator, so &lt;code&gt;value in sequence&lt;/code&gt; is also the way you test for containment.  This is either very confusing or very&amp;nbsp;satisfying.&lt;/p&gt;
&lt;p&gt;When you need indices, or specifically a range of numbers, you can use the built-in &lt;a href="https://docs.python.org/3/library/functions.html#enumerate"&gt;&lt;code&gt;enumerate&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://docs.python.org/3/library/functions.html#range"&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; functions.  &lt;code&gt;enumerate&lt;/code&gt; works with lazy iterables as&amp;nbsp;well.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This makes use of tuple unpacking to effectively return two values at a time&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Note that the endpoint is exclusive, and the default start point is 0.  This&lt;/span&gt;
&lt;span class="c1"&gt;# matches how list indexing works and fits the C style of numbering.&lt;/span&gt;
&lt;span class="c1"&gt;# 0 1 2 3 4&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Start somewhere other than zero, and the endpoint is still exclusive.&lt;/span&gt;
&lt;span class="c1"&gt;# 1 2 3 4&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Count by 2 instead.  Can also use a negative step to count backwards.&lt;/span&gt;
&lt;span class="c1"&gt;# 1 3 5 7 9&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;dict&lt;/code&gt;s (mapping types) have several methods for different kinds of iteration.  Additionally, iterating over a &lt;code&gt;dict&lt;/code&gt; directly produces its&amp;nbsp;keys.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Python distinguishes between an &lt;strong&gt;iterable&lt;/strong&gt;, any value that can be iterated over, and an &lt;strong&gt;iterator&lt;/strong&gt;, a value that performs the actual work of iteration.  Common iterable types include &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, and &lt;code&gt;set&lt;/code&gt;.  &lt;code&gt;enumerate&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt; are also&amp;nbsp;iterable.&lt;/p&gt;
&lt;p&gt;Since Python code rarely works with iterators directly, and many iterable types also function as their own iterators, it&amp;#8217;s common to hear &amp;#8220;iterator&amp;#8221; used to mean an iterable.  To avoid this ambiguity, and because the words are fairly similar already, I&amp;#8217;ll refer to iterables as &lt;strong&gt;containers&lt;/strong&gt; like the Python documentation sometimes does.  Don&amp;#8217;t be fooled — an object doesn&amp;#8217;t actually need to contain anything to be iterable.  Python&amp;#8217;s &lt;code&gt;range&lt;/code&gt; type is iterable, but it doesn&amp;#8217;t physically contain all the numbers in the range; it generates them on the fly as&amp;nbsp;needed.&lt;/p&gt;
&lt;p&gt;The fundamental basics of iteration are built on these two ideas.  Given a container, ask for an iterator; then repeatedly advance the iterator to get new values.  When the iterator runs out of values, it raises &lt;code&gt;StopIteration&lt;/code&gt;.  That&amp;#8217;s it.  In Python, those two steps can be performed manually with the &lt;a href="https://docs.python.org/3/library/functions.html#iter"&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.python.org/3/library/functions.html#next"&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; functions.  A &lt;code&gt;for&lt;/code&gt; loop is roughly equivalent&amp;nbsp;to:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;_done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_iterator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;An iterator can only move forwards.  Once a value has been produced, it&amp;#8217;s lost, at least as far as the iterator is concerned.  These restrictions are occasionally limiting, but they allow iteration to be used for some unexpected tasks.  For example, iterating over an open file produces its lines — even if the &amp;#8220;file&amp;#8221; is actually a terminal or pipe, where data only arrives once and isn&amp;#8217;t persistently stored&amp;nbsp;anywhere.&lt;/p&gt;
&lt;h3 id="generators"&gt;&lt;a class="toclink" href="#generators"&gt;Generators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A more common form of &amp;#8220;only forwards, only once&amp;#8221; in Python is the &lt;strong&gt;generator&lt;/strong&gt;, a function containing a &lt;code&gt;yield&lt;/code&gt; statement.  For&amp;nbsp;example:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# 6 7 8 9&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Calling a generator function doesn&amp;#8217;t execute its code, but immediately creates a &lt;em&gt;generator iterator&lt;/em&gt;.  Every time the iterator is advanced, the function executes until the next &lt;code&gt;yield&lt;/code&gt;, at which point the yielded value is returned as the next value and the function &lt;em&gt;pauses&lt;/em&gt;.  The next iteration will then resume the function.  When the function returns (or falls off the end), the iterator&amp;nbsp;stops.&lt;/p&gt;
&lt;p&gt;Since the values here are produced by running code on the fly, it&amp;#8217;s of course impossible to rewind a&amp;nbsp;generator.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/stdtypes.html#typeiter"&gt;The underlying protocol&lt;/a&gt; is straightforward.  A container must have an &lt;code&gt;__iter__&lt;/code&gt; method that returns an iterator, corresponding to the &lt;code&gt;iter&lt;/code&gt; function.  An iterator must have a &lt;code&gt;__next__&lt;/code&gt; method that returns the next item, corresponding to the &lt;code&gt;next&lt;/code&gt; function.  If the iterator is exhausted, &lt;code&gt;__next__&lt;/code&gt; must raise &lt;a href="https://docs.python.org/3/library/exceptions.html#StopIteration"&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt;.  An iterator must also have an &lt;code&gt;__iter__&lt;/code&gt; that returns &lt;em&gt;itself&lt;/em&gt; — this is so an iterator can be used directly in a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;The above inclusive range generator might be written out explicitly like&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InclusiveRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;InclusiveRangeIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InclusiveRangeIterator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;incrange&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;incrange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;incrange&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;incrange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextval&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;incrange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;

        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextval&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextval&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This might seem like a lot of boilerplate, but note that the iterator state (here, &lt;code&gt;nextval&lt;/code&gt;) can&amp;#8217;t go on &lt;code&gt;InclusiveRange&lt;/code&gt; directly, because then it&amp;#8217;d be impossible to iterate over the same object twice at the same time.  (Some types, like files, do act as their own iterators because they can&amp;#8217;t meaningfully be iterated in&amp;nbsp;parallel.)&lt;/p&gt;
&lt;p&gt;Even Python&amp;#8217;s internals work this way.  Try &lt;code&gt;iter([])&lt;/code&gt; in a Python &lt;span class="caps"&gt;REPL&lt;/span&gt;; you&amp;#8217;ll get a &lt;code&gt;list_iterator&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;In truth, it &lt;em&gt;is&lt;/em&gt; a lot of boilerplate.  User code usually uses this&amp;nbsp;trick:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InclusiveRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Nothing about this is special-cased in any way.  Now &lt;code&gt;__iter__&lt;/code&gt; is a generator, and calling a generator function returns an iterator, so all the constraints are met.  It&amp;#8217;s a really easy way to convert a generator function into a type.  If this class were named &lt;code&gt;inclusive_range&lt;/code&gt; instead, it would even be backwards-compatible; consuming code wouldn&amp;#8217;t even have to know it&amp;#8217;s a&amp;nbsp;class.&lt;/p&gt;
&lt;h3 id="reversal"&gt;&lt;a class="toclink" href="#reversal"&gt;Reversal&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But why would you do this?  One excellent reason is to add support for other sequence-like operations, like reverse iteration support.  An iterator can&amp;#8217;t be reversed, but a &lt;em&gt;container&lt;/em&gt; might support being iterated in&amp;nbsp;reverse:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# pear, orange, apple&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Iterating a lazy container doesn&amp;#8217;t always make sense, but when it does, it&amp;#8217;s easy to implement by returning an iterator from &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__reversed__"&gt;&lt;code&gt;__reversed__&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InclusiveRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__reversed__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Note that Python does &lt;em&gt;not&lt;/em&gt; have &amp;#8220;bi-directional&amp;#8221; iterators, which can freely switch between forwards and reverse iteration on the fly.  A bidirectional iterator is useful for cases like doubly-linked lists, where it&amp;#8217;s easy to get from one value to the next &lt;em&gt;or previous&lt;/em&gt; value, but not as easy to start from the beginning and get the tenth&amp;nbsp;item.&lt;/p&gt;
&lt;p&gt;Iteration is often associated with &lt;strong&gt;sequences&lt;/strong&gt;, though they&amp;#8217;re not quite the same.  In Python, a sequence is a value that can be indexed in order as &lt;code&gt;container[0]&lt;/code&gt;, &lt;code&gt;container[1]&lt;/code&gt;, etc.  (Indexing is implemented with &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__"&gt;&lt;code&gt;__getitem__&lt;/code&gt;&lt;/a&gt;.)  All sequences are iterable; in fact, if a type implements indexing but not &lt;code&gt;__iter__&lt;/code&gt;, the &lt;code&gt;iter&lt;/code&gt; function will automatically try indexing it from zero instead.  &lt;code&gt;reversed&lt;/code&gt; does the same, though it requires that the type implement &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__len__"&gt;&lt;code&gt;__len__&lt;/code&gt;&lt;/a&gt; as well so it knows what the last item&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Much of this is codified more explicitly in the abstract base classes in &lt;a href="https://docs.python.org/3/library/collections.abc.html"&gt;&lt;code&gt;collections.abc&lt;/code&gt;&lt;/a&gt;, which also provide default implementations of common&amp;nbsp;methods.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Not&lt;/em&gt; all iterables are sequences, and not every value that can be indexed is a sequence!  Python&amp;#8217;s mapping type, &lt;code&gt;dict&lt;/code&gt;, uses indexing to fetch the value for a key; but a &lt;code&gt;dict&lt;/code&gt; has no defined order and is not a sequence.  However, a &lt;code&gt;dict&lt;/code&gt; can still be iterated over, producing its keys (in arbitrary order).  A &lt;code&gt;set&lt;/code&gt; can be iterated over, producing its values in arbitrary order, but it cannot be indexed at all.  A type could conceivably use indexing for something more unusual and not be iterable at&amp;nbsp;all.&lt;/p&gt;
&lt;h3 id="a-common-question"&gt;&lt;a class="toclink" href="#a-common-question"&gt;A common&amp;nbsp;question&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s not really related to iteration, but people coming to Python from Ruby often ask why &lt;code&gt;len()&lt;/code&gt; is a built-in function, rather than a method.  The same question could be asked about &lt;code&gt;iter()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; (and other Python builtins), which more or less delegate directly to a &amp;#8220;reserved&amp;#8221; &lt;code&gt;__dunder__&lt;/code&gt; method&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;I believe the &lt;em&gt;technical&lt;/em&gt; reason is simply the order that features were added to the language in very early days, which is not very&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;philosophical&lt;/em&gt; reason, imo, is that Python does not reserve method names for fundamental operations.  All &lt;code&gt;__dunder__&lt;/code&gt; names are reserved, of course, but everything else is fair game.  This makes it obvious when a method is intended to add support for some language-ish-level operation, even if you don&amp;#8217;t know what all the method names are.  Occasionally a third-party library invents its own &lt;code&gt;__dunder__&lt;/code&gt; name, which is a little naughty, but the same reasoning applies: &amp;#8220;this is a completely generic interface that some external mechanism is expected to&amp;nbsp;use&amp;#8221;.&lt;/p&gt;
&lt;p&gt;This approach also avoids a namespacing problem.  In Ruby, a &lt;code&gt;Rectangle&lt;/code&gt; class might want to have &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; attributes&amp;#8230;  but the presence of &lt;code&gt;length&lt;/code&gt; means a &lt;code&gt;Rectangle&lt;/code&gt; looks like it functions as a sequence!  Since &amp;#8220;interface&amp;#8221; method names aren&amp;#8217;t namespaced in any way, there is &lt;em&gt;no way&lt;/em&gt; to say that you don&amp;#8217;t mean the same thing as &lt;code&gt;Array.length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a minor quibble, since everything&amp;#8217;s dynamically typed anyway, so the real solution is &amp;#8220;well don&amp;#8217;t try to iterate a rectangle then&amp;#8221;.  And Python does use &lt;code&gt;keys&lt;/code&gt; as a method name in some obscure cases.  Oh,&amp;nbsp;well.&lt;/p&gt;
&lt;h3 id="some-cute-tricks"&gt;&lt;a class="toclink" href="#some-cute-tricks"&gt;Some cute&amp;nbsp;tricks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The distinction between sequences and iterables can cause some subtle problems.  A lot of code that only needs to loop over items can be passed, e.g., a generator.  But this can take some conscious care.&amp;nbsp;Compare:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This will NOT work with generators, which don&amp;#39;t support len() or indexing&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# But this will&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;enumerate&lt;/code&gt; also has a subtle, unfortunate problem: it cannot be combined with &lt;code&gt;reversed&lt;/code&gt;.  This has bit me more than once,&amp;nbsp;surprisingly.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This produces a TypeError from reversed()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# This almost works, but the index goes forwards while the values go backwards&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The problem is that &lt;code&gt;enumerate&lt;/code&gt; can&amp;#8217;t, in general, reverse itself.  It counts up from zero as it iterates over its argument; reversing it means &lt;em&gt;starting&lt;/em&gt; from one less than the number of items, but it doesn&amp;#8217;t yet know how many items there are.  But if you just want to run over a list or other sequence backwards, this feels very silly.  A trivial helper can make it&amp;nbsp;work:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;revenum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I&amp;#8217;ve run into other odd cases where it&amp;#8217;s frustrating that a generator doesn&amp;#8217;t have a length or indexing.  This especially comes up if you make heavy use of &lt;em&gt;generator expressions&lt;/em&gt;, which are a very compact way to write a one-off generator.  (Python also has list, set, and dict &amp;#8220;comprehensions&amp;#8221;, which have the same syntax but use brackets or braces instead of parentheses, and are evaluated immediately instead of&amp;nbsp;lazily.)&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_big_fruits&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Roughly equivalent to:&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_big_fruits&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;genexp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;genexp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you had &lt;em&gt;thousands&lt;/em&gt; of fruits, doing this could save a little memory.  The caller is &lt;em&gt;probably&lt;/em&gt; just going to loop over them to print them out (or whatever), so using a generator expression means that each uppercase name only exists for a short time; returning a list would mean creating a lot of values all at&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;Ah, but now the caller wants to know how &lt;em&gt;many&lt;/em&gt; fruits there are, with minimal fuss.  Generators have no length, so that won&amp;#8217;t work.  Turning this generator expression into a class that also has a &lt;code&gt;__len__&lt;/code&gt; would be fairly ridiculous.  So you resort to some slightly ugly&amp;nbsp;trickery.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Ugh.  Obvious, but feels really silly.&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# Better, but weird if you haven&amp;#39;t seen it before.  Creates another generator&lt;/span&gt;
&lt;span class="c1"&gt;# expression that just yields 1 for every item, then sums them up.&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Or perhaps you want the first big fruit?  Well, &lt;code&gt;[0]&lt;/code&gt; isn&amp;#8217;t going to help.  This is one of the few cases where using &lt;code&gt;iter&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; directly can be&amp;nbsp;handy.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Oops!  If the container is empty, this raises StopIteration, which you&lt;/span&gt;
&lt;span class="c1"&gt;# probably don&amp;#39;t want.&lt;/span&gt;
&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Catch the StopIteration explicitly.&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# This code runs if there are zero items&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Regular loop that terminates immediately.&lt;/span&gt;
&lt;span class="c1"&gt;# The &amp;quot;else&amp;quot; clause only runs when the container ends naturally (i.e. NOT if&lt;/span&gt;
&lt;span class="c1"&gt;# the loop breaks), which can only happen here if there are zero items.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# next() -- but not __next__()! -- takes a second argument indicating a&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;default&amp;quot; value to return when the iterator is exhausted.  This only makes&lt;/span&gt;
&lt;span class="c1"&gt;# sense if you were going to substitute a default value anyway; doing this and&lt;/span&gt;
&lt;span class="c1"&gt;# then checking for None will do the wrong thing if the container actually&lt;/span&gt;
&lt;span class="c1"&gt;# contained a None.&lt;/span&gt;
&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Other tricks with &lt;code&gt;iter&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; include skipping the first item (or any number of initial items, though consider &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.islice"&gt;&lt;code&gt;itertools.islice&lt;/code&gt;&lt;/a&gt; for more complex&amp;nbsp;cases):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Use second arg to ignore StopIteration&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Since the first item in the iterator has already been consumed, this loop&lt;/span&gt;
    &lt;span class="c1"&gt;# will start with the second item.  If the container had only one or zero&lt;/span&gt;
    &lt;span class="c1"&gt;# items, the loop will get StopIteration and end immediately.&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Iterating two (or more) items at a&amp;nbsp;time:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Obvious way: call next() inside the loop.&lt;/span&gt;
&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# With an odd number of items, this will raise an uncaught StopIteration!&lt;/span&gt;
    &lt;span class="c1"&gt;# Catch it or provide a default value.&lt;/span&gt;
    &lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Moderately clever way: abuse zip().&lt;/span&gt;
&lt;span class="c1"&gt;# zip() takes some number of containers and iterates over them pairwise.  It&lt;/span&gt;
&lt;span class="c1"&gt;# stores an iterator for each container.  When it&amp;#39;s asked for its next item, it&lt;/span&gt;
&lt;span class="c1"&gt;# in turn asks all of its iterators for their next items, and returns them as a&lt;/span&gt;
&lt;span class="c1"&gt;# set.  But by giving it the same exact iterator twice, it&amp;#39;ll end up advancing&lt;/span&gt;
&lt;span class="c1"&gt;# that iterator twice and returning two consecutive items.&lt;/span&gt;
&lt;span class="c1"&gt;# Note that zip() stops early as soon as an iterator runs dry, so if the&lt;/span&gt;
&lt;span class="c1"&gt;# container has an odd number of items, this will silently skip the last one.&lt;/span&gt;
&lt;span class="c1"&gt;# If you don&amp;#39;t want that, use itertools.zip_longest instead.&lt;/span&gt;
&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Far too clever way: exactly the same as above, but written as a one-liner.&lt;/span&gt;
&lt;span class="c1"&gt;# zip(iter(), iter()) would create two separate iterators and break the trick.&lt;/span&gt;
&lt;span class="c1"&gt;# List multiplication produces a list containing the same iterator twice.&lt;/span&gt;
&lt;span class="c1"&gt;# One advantage of this is that the 2 can be a variable.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Wow, that got pretty weird towards the end.  Somehow this turned into Stupid Python Iterator Tricks.  Don&amp;#8217;t worry; I know far less about these other&amp;nbsp;languages.&lt;/p&gt;
&lt;h2 id="c"&gt;&lt;a class="toclink" href="#c"&gt;C&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C is an extreme example with no iterator protocol whatsoever.  It barely even supports sequences; arrays are just pointer math.  All it has is the humble C-style &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;container_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unfortunately, it&amp;#8217;s really the best C can do.  C arrays don&amp;#8217;t know their own length, so no matter what, the developer has to provide it some other way.  Even without that, a built-in iterator protocol is impossible — iterators require persistent state (the current position) to be bundled alongside code (how to get to the next position).  That pretty much means one of two things: closures or objects.  C has&amp;nbsp;neither.&lt;/p&gt;
&lt;h2 id="lua"&gt;&lt;a class="toclink" href="#lua"&gt;Lua&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lua has two forms of &lt;code&gt;for&lt;/code&gt; loop.  The first is a simple numeric&amp;nbsp;loop.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 1 3 5 7 9 11&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The three values after the &lt;code&gt;=&lt;/code&gt; are the start, end, and step.  They work similarly to Python&amp;#8217;s &lt;code&gt;range()&lt;/code&gt;, except that everything in Lua is always &lt;em&gt;inclusive&lt;/em&gt;, so &lt;code&gt;for i = 1, 5&lt;/code&gt; will count from 1 to&amp;nbsp;5.&lt;/p&gt;
&lt;p&gt;The generic form uses &lt;code&gt;in&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;iterate&lt;/code&gt; isn&amp;#8217;t a special name here, but most of the time a generic &lt;code&gt;for&lt;/code&gt; will look like&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;See, Lua doesn&amp;#8217;t have objects.  It has enough tools that you can build objects fairly easily, but the core language has no explicit concept of objects or method calls.  An iterator protocol needs to bundle state and behavior somehow, so Lua uses closures for that.  But you still need a way to get that closure, and that means calling a function, and a plain value can&amp;#8217;t have functions attached to it.  So iterating over a table (Lua&amp;#8217;s single data structure) looks like&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;pairs&lt;/code&gt; is a built-in function.  Lua also has an &lt;code&gt;ipairs&lt;/code&gt;, which iterates over consecutive keys and values starting from key 1.  (Lua starts at 1, not 0.  Lua also represents sequences as tables with numeric&amp;nbsp;keys.)&lt;/p&gt;
&lt;p&gt;Lua does have a way to &lt;em&gt;associate&lt;/em&gt; &amp;#8220;methods&amp;#8221; with values, which is how objects are made, but &lt;code&gt;for&lt;/code&gt; loops almost certainly came first.  So iteration is almost always over a function call, not a bare&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;Also, because objects are built out of tables, having a default iteration behavior for all tables would mean having the same default for all objects.  Nothing&amp;#8217;s stopping you from using &lt;code&gt;pairs&lt;/code&gt; on an object now, but at least that looks deliberate.  It&amp;#8217;s easy enough to give objects iteration methods and iterate over &lt;code&gt;obj:iter()&lt;/code&gt;, though it&amp;#8217;s slightly unfortunate that every type might look slightly different.  Unfortunately, Lua has no truly generic interface for &amp;#8220;this can produce a sequence of&amp;nbsp;values&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The iteration protocol is really just calling a function repeatedly to get new values.  When the function returns &lt;code&gt;nil&lt;/code&gt;, the iteration ends.  (That means &lt;code&gt;nil&lt;/code&gt; can never be part of an iteration!  You can work around this by returning &lt;em&gt;two&lt;/em&gt; values and making sure the first one is something else that&amp;#8217;s never &lt;code&gt;nil&lt;/code&gt;, like an index.)  The manual explains the &lt;a href="http://www.lua.org/manual/5.2/manual.html#3.3.5"&gt;exact semantics of the generic &lt;code&gt;for&lt;/code&gt;&lt;/a&gt; with Lua code, a move I wish every language would&amp;nbsp;make.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- This:&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;var_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;···&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var_n&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;explist&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;-- Is equivalent to this:&lt;/span&gt;
&lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_lastval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;explist&lt;/span&gt;
    &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;var_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;···&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var_n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_lastval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;var_1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kr"&gt;break&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt;
        &lt;span class="n"&gt;_lastval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;var_1&lt;/span&gt;
        &lt;span class="n"&gt;block&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Important to note here is the way multiple-return works in Lua.  Lua doesn&amp;#8217;t have tuples; multiple assignment is a distinct feature of the language, and multiple return works exactly the same way as multiple assignment.  If there are too few values, the extra variables become &lt;code&gt;nil&lt;/code&gt;; if there are too many values, the extras are silently&amp;nbsp;discarded.&lt;/p&gt;
&lt;p&gt;So in the line &lt;code&gt;local _func, _state, _lastval = explist&lt;/code&gt;, the &amp;#8220;state&amp;#8221; value &lt;code&gt;_state&lt;/code&gt; and the &amp;#8220;last loop value&amp;#8221; &lt;code&gt;_lastval&lt;/code&gt; are both &lt;em&gt;optional&lt;/em&gt;.  Lua doesn&amp;#8217;t use them, except to pass them back to the iterator function &lt;code&gt;_func&lt;/code&gt;, and they aren&amp;#8217;t visible to the &lt;code&gt;for&lt;/code&gt; loop body.  An iterator can thus be &lt;em&gt;only&lt;/em&gt; a function and nothing else, letting &lt;code&gt;_state&lt;/code&gt; and &lt;code&gt;_lastval&lt;/code&gt; be &lt;code&gt;nil&lt;/code&gt; — but they can be a little more convenient at times.&amp;nbsp;Compare:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Usual approach: return only a closure, completely ignoring state and lastval&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
            &lt;span class="kr"&gt;return&lt;/span&gt;
        &lt;span class="kr"&gt;end&lt;/span&gt;
        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;
        &lt;span class="n"&gt;nextval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;-- Alternative approach, not using closures at all.  This is the function we&lt;/span&gt;
&lt;span class="c1"&gt;-- return; each time it&amp;#39;s called with the same &amp;quot;state&amp;quot; value and whatever it&lt;/span&gt;
&lt;span class="c1"&gt;-- returned last time it was called.&lt;/span&gt;
&lt;span class="c1"&gt;-- This function could even be written exactly a method (a la Python&amp;#39;s&lt;/span&gt;
&lt;span class="c1"&gt;-- __next__), where the state value is the object itself.&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;inclusive_range_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;-- &amp;quot;stop&amp;quot; is the state value; &amp;quot;prev&amp;quot; is the last value we returned&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;-- Return the iterator function, and pass it the stop value as its state.&lt;/span&gt;
    &lt;span class="c1"&gt;-- The &amp;quot;last value&amp;quot; is a little weird here; on the first iteration, there&lt;/span&gt;
    &lt;span class="c1"&gt;-- is no last value.  Here we can fake it by subtracting 1 from the&lt;/span&gt;
    &lt;span class="c1"&gt;-- starting number, but in other cases, it might make more sense if the&lt;/span&gt;
    &lt;span class="c1"&gt;-- &amp;quot;state&amp;quot; were a table containing both the start and stop values.&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inclusive_range_iter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;-- 6 7 8 9 with both implementations&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Lua doesn&amp;#8217;t have generators.  Surprisingly, it has fully-fledged &lt;em&gt;coroutines&lt;/em&gt; — call stacks that can be paused at any time.  Lua sometimes refers to them as &amp;#8220;threads&amp;#8221;, but only one can be running at a time.  Effectively they&amp;#8217;re like Python generators, except you can call a function which calls a function which calls a function which eventually &lt;code&gt;yield&lt;/code&gt;s, and the &lt;em&gt;entire&lt;/em&gt; call stack from that point up to the top of the coroutine is paused and&amp;nbsp;preserved.&lt;/p&gt;
&lt;p&gt;In Python, the mere presence of &lt;code&gt;yield&lt;/code&gt; causes a function to become a generator.  In Lua, since any function might try to yield the coroutine it&amp;#8217;s currently in, a function has to be explicitly called as a coroutine using functions in the &lt;code&gt;coroutine&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;But this post is about iterators, not coroutines.  Coroutines don&amp;#8217;t function as iterators, but Lua provides a &lt;code&gt;coroutine.wrap()&lt;/code&gt; that takes a function, turns it into a coroutine, and returns a function that resumes the coroutine.  That&amp;#8217;s enough to allow a coroutine to be turned into an iterator.  The Lua book even has &lt;a href="https://www.lua.org/pil/9.3.html"&gt;a section about this&lt;/a&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;coroutine.yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;-- Unfortunately, coroutine.wrap() doesn&amp;#39;t have any way to pass initial&lt;/span&gt;
&lt;span class="c1"&gt;-- arguments to the function it wraps, so we need this dinky wrapper.&lt;/span&gt;
&lt;span class="c1"&gt;-- I should clarify that the ... here is literal syntax for once.&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;iter_coro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry_point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;coroutine.wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter_coro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, that&amp;#8217;s cool.  Lua doesn&amp;#8217;t do a lot for you — unfortunately, list processing tricks can be significantly more painful in Lua — but it has some pretty interesting primitives that compose with each other remarkably&amp;nbsp;well.&lt;/p&gt;
&lt;h2 id="perl-5"&gt;&lt;a class="toclink" href="#perl-5"&gt;Perl&amp;nbsp;5&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perl has a very straightforward C-style &lt;code&gt;for&lt;/code&gt; loop, which looks and works exactly as you might expect.  &lt;code&gt;my&lt;/code&gt;, which appears frequently in these examples, is just local variable&amp;nbsp;declaration.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Nobody uses it.  Everyone uses the iteration-style &lt;code&gt;for&lt;/code&gt; loop.  (It&amp;#8217;s occasionally called &lt;code&gt;foreach&lt;/code&gt;, which is extra confusing because both &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; can be used for both kinds of loop.  Nobody actually uses the &lt;code&gt;foreach&lt;/code&gt; keyword.)&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The iteration loop can be used for numbers, as well, since Perl has a &lt;code&gt;..&lt;/code&gt; inclusive range operator.  For iterating over an array with indexes, Perl has the slightly odd &lt;code&gt;$#array&lt;/code&gt; syntax, which is the index of the last item in &lt;code&gt;@array&lt;/code&gt;.  Creating something like Python&amp;#8217;s &lt;code&gt;enumerate&lt;/code&gt; is a little tricky in Perl, because you can&amp;#8217;t directly return a list of lists, and the workaround doesn&amp;#8217;t support unpacking.  It&amp;#8217;s&amp;nbsp;complicated.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;$#array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A hash (Perl&amp;#8217;s mapping &amp;#8220;shape&amp;#8221;) can&amp;#8217;t be iterated directly.  Or, well, it can, but the loop will alternate between keys and values because Perl is weird.  Instead you need the &lt;a href="http://perldoc.perl.org/functions/keys.html"&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; or &lt;a href="http://perldoc.perl.org/functions/values.html"&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; built-in functions to get the keys or values as regular lists.  (These functions also work on arrays as of Perl&amp;nbsp;5.12.)&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For iterating over both keys and values at the same time, Perl has an &lt;a href="http://perldoc.perl.org/functions/each.html"&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt; function.  The behavior is a little weird, since every call to the function advances an internal iterator inside the hash and returns a new pair.  If a loop using &lt;code&gt;each&lt;/code&gt; terminates early, the next use of &lt;code&gt;each&lt;/code&gt; may silently start somewhere in the middle of the hash, skipping a bunch of its keys.  This is probably why I&amp;#8217;ve never seen &lt;code&gt;each&lt;/code&gt; actually&amp;nbsp;used.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;%container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Despite being very heavily built on the concept of lists, Perl doesn&amp;#8217;t have an explicit iterator protocol, and its support for lazy iteration in general is not great.  When they&amp;#8217;re used at all, lazy iterators tend to be implemented as ad-hoc closures or callable objects, which require a &lt;code&gt;while&lt;/code&gt; loop:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;custom_iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$collection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$iter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="here-be-dragons"&gt;&lt;a class="toclink" href="#here-be-dragons"&gt;Here be&amp;nbsp;dragons&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It &lt;em&gt;is&lt;/em&gt; possible to sorta-kinda fake an iterator protocol.  If you&amp;#8217;re not familiar, Perl&amp;#8217;s variables come in several different &amp;#8220;shapes&amp;#8221; — hash, array, scalar — and it&amp;#8217;s possible to &amp;#8220;tie&amp;#8221; a variable to a backing object which defines the operations for a particular shape.  It&amp;#8217;s a little like operator overloading, except that Perl also has operator overloading and it&amp;#8217;s a completely unrelated mechanism.  In fact, you could use operator overloading to make your object return a tied array when dereferenced as an array.  I am talking gibberish&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Anyway, the trick is to tie an array and return a new value for each consecutive fetch of an index.  Like&amp;nbsp;so:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;ClosureIterator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# This is the tie &amp;quot;constructor&amp;quot; and just creates a regular object to store&lt;/span&gt;
&lt;span class="c1"&gt;# our state&lt;/span&gt;
&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;TIEARRAY&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$closure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;closure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$closure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nextindex&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bless&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# This is called to fetch the item at a particular index; for an iterator,&lt;/span&gt;
&lt;span class="c1"&gt;# only the next item is valid&lt;/span&gt;
&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;FETCH&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# Always allow reading index 0, both to mean a general &amp;quot;get next&lt;/span&gt;
        &lt;span class="c1"&gt;# item&amp;quot; and so that looping over the same array twice will work as&lt;/span&gt;
        &lt;span class="c1"&gt;# expected&lt;/span&gt;
        &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nextindex&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nextindex&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ClosureIterator does not support random access&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nextindex&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# The built-in shift() function means &amp;quot;remove and return the first item&amp;quot;, so&lt;/span&gt;
&lt;span class="c1"&gt;# it&amp;#39;s a good fit for a general &amp;quot;advance iterator&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;SHIFT&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nextindex&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Yes, an array has to be able to report its own size...  but luckily, a for&lt;/span&gt;
&lt;span class="c1"&gt;# loop fetches the size on every iteration!  As long as this returns&lt;/span&gt;
&lt;span class="c1"&gt;# increasingly large values, such a loop will continue indefinitely&lt;/span&gt;
&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;FETCHSIZE&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nextindex&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Most other tied array operations are for modifying the array, which makes no&lt;/span&gt;
&lt;span class="c1"&gt;# sense here.  They&amp;#39;re deliberately omitted, so trying to use them will cause a&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;can&amp;#39;t locate object method&amp;quot; error.&lt;/span&gt;


&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Create an iterator that yields successive powers of 2&lt;/span&gt;
&lt;span class="nb"&gt;tie&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ClosureIterator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# State variables are persistent, like C statics&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;# This will print out 1, 2, 4, 8, ... 1024, at which point the loop breaks&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;last&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This transparently works like any other array&amp;#8230;  sort of.  You can loop over it (forever!); you can use &lt;code&gt;shift&lt;/code&gt; to pop off the next value; you can stop a loop and then continue reading from it&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;Unfortunately, this is just plain weird, even for Perl, and I very rarely see it used.  Ultimately, Perl&amp;#8217;s array operations come in a set, and this is an array that pretends not to be able to do half of them.  Even Perl developers are likely to be surprised by an array, a fundamental &amp;#8220;shape&amp;#8221; of the language, with quirky&amp;nbsp;behavior.&lt;/p&gt;
&lt;p&gt;The biggest problem is that, as I said, Perl is heavily built on lists.  Part of that design is that &lt;code&gt;@array&lt;/code&gt;s are very eager to spill their contents into a surrounding context.  Naïvely passing an array to a function, for example, will expand its elements into separate arguments, losing the identity of the array itself (and losing any tied-ness).  Interpolating an array into a string automatically space-separates its&amp;nbsp;elements.&lt;/p&gt;
&lt;p&gt;Unlike a &lt;code&gt;for&lt;/code&gt; loop, these operations only ask the array for its size &lt;em&gt;once&lt;/em&gt; — so rather than printing an infinite sequence, they&amp;#8217;ll print a completely arbitrary prefix of it.  In the case above, spilling a fresh array will read one item; spilling the array after the example loop will read eleven items.  So while a tied array works nicely with a &lt;code&gt;for&lt;/code&gt; loop, it&amp;#8217;s at odds with the most basic rules of Perl&amp;nbsp;syntax.&lt;/p&gt;
&lt;p&gt;Also, Perl&amp;#8217;s list-based nature means it&amp;#8217;s attracted a lot of &lt;a href="http://search.cpan.org/~pevans/Scalar-List-Utils-1.46/lib/List/Util.pm"&gt;list-processing utilities&lt;/a&gt; — but these naturally expect to receive a spilled list of arguments and cannot work with a lazy&amp;nbsp;iterator.&lt;/p&gt;
&lt;p&gt;I found multiple mentions of the &lt;a href="http://search.cpan.org/~asg/List-Gen-0.974/lib/List/Gen.pm"&gt;&lt;code&gt;List::Gen&lt;/code&gt;&lt;/a&gt; module while looking into this.  I&amp;#8217;d never heard of it before and I&amp;#8217;ve never seen it used, but it &lt;em&gt;tries&lt;/em&gt; to fill this gap (and makes use of array tying, among other things).  It&amp;#8217;s a bit weird, and its source code is extremely weird, and it took me twenty minutes to figure out how it was using &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; as a quoting&amp;nbsp;construct.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; in Perl does filename globbing, so it&amp;#8217;s usually seen as &lt;code&gt;&amp;lt;*.txt&amp;gt;&lt;/code&gt;.  The same syntax is used for reading from a filehandle, which makes this confusing and ambiguous, so it&amp;#8217;s generally discouraged in favor of the built-in &lt;code&gt;glob&lt;/code&gt; function which does the same thing.  Well, it turns out that &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; must just &lt;em&gt;call&lt;/em&gt; &lt;code&gt;glob()&lt;/code&gt; at Perl-level, because &lt;code&gt;List::Gen&lt;/code&gt; manages to co-opt this syntax simply by exporting its own &lt;code&gt;glob&lt;/code&gt; function.  Perl is&amp;nbsp;magical.)&lt;/p&gt;
&lt;h2 id="perl-6"&gt;&lt;a class="toclink" href="#perl-6"&gt;Perl&amp;nbsp;6&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perl 6, a mad experiment to put literally every conceivable feature into one programming language, naturally has a more robust concept of&amp;nbsp;iteration.&lt;/p&gt;
&lt;p&gt;At first glance, many of the constructs are similar to those of Perl 5.  The C-style &lt;code&gt;for&lt;/code&gt; loop still exists for some reason, but has been disambiguated under the &lt;code&gt;loop&lt;/code&gt; keyword.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;loop&lt;/span&gt; (&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; = &lt;span class="mi"&gt;1&lt;/span&gt;; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;lt;= &lt;span class="mi"&gt;10&lt;/span&gt;; &lt;span class="nv"&gt;$i&lt;/span&gt;++) {
    ...
}

&lt;span class="c c-Singleline"&gt;# More interestingly, loop can be used completely bare for an infinite loop&lt;/span&gt;
&lt;span class="k"&gt;loop&lt;/span&gt; {
    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; block has slightly different syntax and a couple new&amp;nbsp;tricks.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c c-Singleline"&gt;# Unlike in Perl 5, $value is automatically declared and scoped to the block,&lt;/span&gt;
&lt;span class="c c-Singleline"&gt;# without needing an explicit &amp;#39;my&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@container&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$value&lt;/span&gt; {
    ...
}

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$i&lt;/span&gt; {
    ...
}

&lt;span class="c c-Singleline"&gt;# This doesn&amp;#39;t iterate in pairs; it reads two items at a time from a flat list!&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$a&lt;/span&gt;, &lt;span class="nv"&gt;$b&lt;/span&gt; {
    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Not apparent in the above code is that ranges are lazy in Perl 6, as in Python; the elements are computed on demand.  In fact, Perl 6 supports a range like &lt;code&gt;1..Inf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Loop variables are also &lt;em&gt;aliases&lt;/em&gt;.  By default they&amp;#8217;re read-only, so this appears to work like Python&amp;#8230;  but Perl has always had a C-like language-level notion of &amp;#8220;slots&amp;#8221; that Python does not, and it becomes apparent if the loop variable is made&amp;nbsp;read-write:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@fruits&lt;/span&gt; = «&lt;span class="n"&gt;apple&lt;/span&gt; &lt;span class="n"&gt;orange&lt;/span&gt; &lt;span class="n"&gt;pear&lt;/span&gt;»;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@fruits&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$fruit&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;rw&lt;/span&gt; {
    &lt;span class="c c-Singleline"&gt;# This is &amp;quot;apply method inplace&amp;quot;, i.e. shorthand for:&lt;/span&gt;
    &lt;span class="c c-Singleline"&gt;# $fruit = $fruit.uc;&lt;/span&gt;
    &lt;span class="c c-Singleline"&gt;# Yes, you can do that.&lt;/span&gt;
    &lt;span class="nv"&gt;$fruit&lt;/span&gt; .= &lt;span class="nb"&gt;uc&lt;/span&gt;;
}
&lt;span class="nb"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;@fruits&lt;/span&gt;;  &lt;span class="c c-Singleline"&gt;# APPLE ORANGE PEAR&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For iterating with indexes, there&amp;#8217;s a curious&amp;nbsp;idiom:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c c-Singleline"&gt;# ^Inf is shorthand for 0..Inf, read as &amp;quot;up to Inf&amp;quot;.&lt;/span&gt;
&lt;span class="c c-Singleline"&gt;# Z is the zip operator, which interleaves its arguments&amp;#39; elements into a&lt;/span&gt;
&lt;span class="c c-Singleline"&gt;# single flat list.&lt;/span&gt;
&lt;span class="c c-Singleline"&gt;# This makes use of the &amp;quot;two at a time&amp;quot; trick from above.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; ^&lt;span class="n"&gt;Inf&lt;/span&gt; &lt;span class="o"&gt;Z&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$index&lt;/span&gt;, &lt;span class="nv"&gt;$value&lt;/span&gt; {
    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Iterating hashes is somewhat simpler; hashes have methods, and the &lt;code&gt;.kv&lt;/code&gt; method returns the keys and values.  (It actually returns them in a flat list &lt;em&gt;interleaved&lt;/em&gt;, which again uses &amp;#8220;two at a time&amp;#8221; syntax.  If you only use a single loop variable, your loop iterations will alternate between a key and a value.  Iterating a hash directly produces &lt;em&gt;pairs&lt;/em&gt;, which are a first-class data type in Perl 6, but I can&amp;#8217;t find any syntax for directly unpacking a pair within a loop&amp;nbsp;header.)&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;%container&lt;/span&gt;.&lt;span class="nb"&gt;kv&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$key&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt; {
    ...
}

&lt;span class="c c-Singleline"&gt;# No surprises here&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;%container&lt;/span&gt;.&lt;span class="nb"&gt;keys&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$key&lt;/span&gt; {
    ...
}
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;%container&lt;/span&gt;.&lt;span class="nb"&gt;values&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$value&lt;/span&gt; {
    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Perl 6 is very big on laziness, which is perhaps why it took fifteen years to see a release.  It has the same &lt;em&gt;iterable&lt;/em&gt; versus &lt;em&gt;iterator&lt;/em&gt; split as Python.  Given a container (iterable), ask for an iterator; given an iterator, repeatedly ask for new values.  When the iterator is exhausted, it returns the &lt;code&gt;IterationEnd&lt;/code&gt; sentinel.  Exactly the same ideas.  I&amp;#8217;m not clear on the precise semantics of the &lt;code&gt;for&lt;/code&gt; block and can&amp;#8217;t find a simple reference, but they&amp;#8217;re probably much like Python&amp;#8217;s&amp;#8230;  plus a thousand special&amp;nbsp;cases.&lt;/p&gt;
&lt;h3 id="generators-kinda"&gt;&lt;a class="toclink" href="#generators-kinda"&gt;Generators,&amp;nbsp;kinda&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Perl 6 also has its own version of generators, though with a few extra twists.  Curiously, generators are a &lt;em&gt;block&lt;/em&gt; called &lt;code&gt;gather&lt;/code&gt;, rather than a kind of function — this means that a one-off &lt;code&gt;gather&lt;/code&gt; is easier to create, but a &lt;code&gt;gather&lt;/code&gt; factory must be explicitly wrapped in a function.  &lt;code&gt;gather&lt;/code&gt; can even take a single expression rather than a block, so there&amp;#8217;s no need for separate &amp;#8220;generator expression&amp;#8221; syntax as in&amp;nbsp;Python.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="n"&gt;inclusive-range&lt;/span&gt;(&lt;span class="nv"&gt;$start&lt;/span&gt;, &lt;span class="nv"&gt;$stop&lt;/span&gt;) {
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;gather&lt;/span&gt; {
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt; = &lt;span class="nv"&gt;$start&lt;/span&gt;;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt; &amp;lt;= &lt;span class="nv"&gt;$stop&lt;/span&gt; {
            &lt;span class="k"&gt;take&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;;
            &lt;span class="nv"&gt;$val&lt;/span&gt;++;
        }
    };
}

&lt;span class="c c-Singleline"&gt;# 6 7 8 9&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;inclusive-range&lt;/span&gt;(&lt;span class="mi"&gt;6&lt;/span&gt;, &lt;span class="mi"&gt;9&lt;/span&gt;) -&amp;gt; &lt;span class="nv"&gt;$n&lt;/span&gt; {
    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unlike Python&amp;#8217;s &lt;code&gt;yield&lt;/code&gt;, Perl 6&amp;#8217;s &lt;code&gt;take&lt;/code&gt; is dynamically scoped — i.e., &lt;code&gt;take&lt;/code&gt; can be used anywhere in the call stack, and it will apply to the most recent &lt;code&gt;gather&lt;/code&gt; caller.  That means arbitrary-depth coroutines, which seems like a big deal to me, but &lt;a href="https://docs.perl6.org/language/control#gather/take"&gt;the documentation&lt;/a&gt; mentions it almost as an&amp;nbsp;afterthought.&lt;/p&gt;
&lt;p&gt;The documentation also says &lt;code&gt;gather/take&lt;/code&gt; &lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;can generate values lazily, depending on context,&amp;#8221; but neglects to clarify &lt;em&gt;how&lt;/em&gt; context factors in.  The code I wrote above turns out to be lazy, but this ambiguity inclines me to use the explicit &lt;code&gt;lazy&lt;/code&gt; marker&amp;nbsp;everywhere.&lt;/p&gt;
&lt;p&gt;Ultimately it&amp;#8217;s a pretty flexible feature, but has a few quirks that make it a bit clumsier to use as a straightforward generator.  Given that the default behavior is an eagerly-evaluated block, I &lt;em&gt;think&lt;/em&gt; the original intention was to avoid the slightly unsatisfying pattern of &amp;#8220;&lt;code&gt;push&lt;/code&gt; onto an array every iteration through a loop&amp;#8221; — instead you can now do&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@results&lt;/span&gt; = &lt;span class="k"&gt;gather&lt;/span&gt; {
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@source-data&lt;/span&gt; -&amp;gt; &lt;span class="nv"&gt;$datum&lt;/span&gt; {
        &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;some-test&lt;/span&gt;(&lt;span class="nv"&gt;$datum&lt;/span&gt;);
        &lt;span class="k"&gt;take&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;(&lt;span class="nv"&gt;$datum&lt;/span&gt;);
    }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Using a simple (syntax-highlighted!) &lt;code&gt;take&lt;/code&gt; puts the focus on the value being taken, rather than the details of putting it where it wants to go and how it gets there.  It&amp;#8217;s an interesting idea and I&amp;#8217;m surprised I&amp;#8217;ve never seen it demonstrated this&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;gather&lt;/code&gt; and some abuse of Perl&amp;#8217;s exceptionally compactable syntax, I can write a much shorter version of the infinite Perl 5 iterator&amp;nbsp;above.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@powers-of-two&lt;/span&gt; = &lt;span class="nb"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;gather&lt;/span&gt; &lt;span class="k"&gt;take&lt;/span&gt; (&lt;span class="k"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; = &lt;span class="mi"&gt;1&lt;/span&gt;) *= &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; ^&lt;span class="n"&gt;Inf&lt;/span&gt;;

&lt;span class="c c-Singleline"&gt;# Binds to $_ by default&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@powers-of-two&lt;/span&gt; {
    &lt;span class="c c-Singleline"&gt;# Method calls are on $_ by default&lt;/span&gt;
    .&lt;span class="nb"&gt;say&lt;/span&gt;;
    &lt;span class="k"&gt;last&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt; &amp;gt; &lt;span class="mi"&gt;1000&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It&amp;#8217;s definitely shorter, I&amp;#8217;ll give it that.  Leaving off the &lt;code&gt;lazy&lt;/code&gt; in this case causes an infinite loop as Perl tries to evaluate the entire list; using a &lt;code&gt;$&lt;/code&gt; instead of a &lt;code&gt;@&lt;/code&gt; produces a &amp;#8220;Cannot &lt;code&gt;.elems&lt;/code&gt; a lazy list&amp;#8221; error; using &lt;code&gt;$&lt;/code&gt; without &lt;code&gt;lazy&lt;/code&gt; prints a &lt;code&gt;...&lt;/code&gt;-terminated representation of the infinite list and then hangs forever.  I don&amp;#8217;t quite understand the semantics of stuffing a list into a scalar (&lt;code&gt;$&lt;/code&gt;) variable in Perl 6, and to be honest the list/array semantics seem to be far more convoluted than Perl 5, so I have no idea what&amp;#8217;s going on here.  Perl 6 has a lot of fascinating toys that are very easy to use&amp;nbsp;incorrectly.&lt;/p&gt;
&lt;h3 id="nuts-and-bolts"&gt;&lt;a class="toclink" href="#nuts-and-bolts"&gt;Nuts and&amp;nbsp;bolts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Iterables and iterators are encoded explicitly as the &lt;a href="https://docs.perl6.org/type/Iterable"&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.perl6.org/type/Iterator"&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; roles.  An &lt;code&gt;Iterable&lt;/code&gt; has an &lt;code&gt;.iterator&lt;/code&gt; method that should return an &lt;code&gt;Iterator&lt;/code&gt;.  An &lt;code&gt;Iterator&lt;/code&gt; has a &lt;code&gt;.pull-one&lt;/code&gt; method that returns the next value, or the &lt;code&gt;IterationEnd&lt;/code&gt; sentinel when the iterator is exhausted.  Both roles offer several other methods, but they have suitable default&amp;nbsp;implementations.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inclusive-range&lt;/code&gt; might be transformed into a class&amp;nbsp;thusly:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;InclusiveRangeIterator&lt;/span&gt; &lt;span class="nb"&gt;does&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; {
    &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;$.range&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;required&lt;/span&gt;;
    &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;$!nextval&lt;/span&gt; = &lt;span class="nv"&gt;$!range&lt;/span&gt;.&lt;span class="n"&gt;start&lt;/span&gt;;

    &lt;span class="k"&gt;method&lt;/span&gt; &lt;span class="n"&gt;pull-one&lt;/span&gt;() {
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$!nextval&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$!range&lt;/span&gt;.&lt;span class="n"&gt;stop&lt;/span&gt; {
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IterationEnd&lt;/span&gt;;
        }

        &lt;span class="c c-Singleline"&gt;# Perl people would probably phrase this:&lt;/span&gt;
        &lt;span class="c c-Singleline"&gt;# ++$!nextval&lt;/span&gt;
        &lt;span class="c c-Singleline"&gt;# and they are wrong.&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt; = &lt;span class="nv"&gt;$!nextval&lt;/span&gt;;
        &lt;span class="nv"&gt;$!nextval&lt;/span&gt;++;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;;
    }
}

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;InclusiveRange&lt;/span&gt; &lt;span class="nb"&gt;does&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt; {
    &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;$.start&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;required&lt;/span&gt;;
    &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;$.stop&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;required&lt;/span&gt;;

    &lt;span class="c c-Singleline"&gt;# Don&amp;#39;t even ask&lt;/span&gt;
    &lt;span class="k"&gt;method&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;(&lt;span class="nv"&gt;$start&lt;/span&gt;, &lt;span class="nv"&gt;$stop&lt;/span&gt;) {
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;bless&lt;/span&gt;(:&lt;span class="nv"&gt;$start&lt;/span&gt;, :&lt;span class="nv"&gt;$stop&lt;/span&gt;);
    }

    &lt;span class="k"&gt;method&lt;/span&gt; &lt;span class="nb"&gt;iterator&lt;/span&gt;() {
        &lt;span class="n"&gt;InclusiveRangeIterator&lt;/span&gt;.&lt;span class="nb"&gt;new&lt;/span&gt;(&lt;span class="n"&gt;range&lt;/span&gt; =&amp;gt; &lt;span class="k"&gt;self&lt;/span&gt;);
    }
}

&lt;span class="c c-Singleline"&gt;# 6 7 8 9&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;InclusiveRange&lt;/span&gt;.&lt;span class="nb"&gt;new&lt;/span&gt;(&lt;span class="mi"&gt;6&lt;/span&gt;, &lt;span class="mi"&gt;9&lt;/span&gt;) -&amp;gt; &lt;span class="nv"&gt;$n&lt;/span&gt; {
    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Can we use &lt;code&gt;gather&lt;/code&gt; to avoid the need for an extra class, just as in Python?  We sure can!  The only catch is that Perl 6 iterators don&amp;#8217;t also pretend to be iterables (remember, in Python, &lt;code&gt;iter(it)&lt;/code&gt; should produce &lt;code&gt;it&lt;/code&gt;), so we need to explicitly return a &lt;code&gt;gather&lt;/code&gt; block&amp;#8217;s&amp;nbsp;iterator.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;InclusiveRange&lt;/span&gt; &lt;span class="nb"&gt;does&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt; {
    &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;$.start&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;required&lt;/span&gt;;
    &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;$.stop&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;required&lt;/span&gt;;

    &lt;span class="c c-Singleline"&gt;# Don&amp;#39;t even ask&lt;/span&gt;
    &lt;span class="k"&gt;method&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;(&lt;span class="nv"&gt;$start&lt;/span&gt;, &lt;span class="nv"&gt;$stop&lt;/span&gt;) {
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;bless&lt;/span&gt;(:&lt;span class="nv"&gt;$start&lt;/span&gt;, :&lt;span class="nv"&gt;$stop&lt;/span&gt;);
    }

    &lt;span class="k"&gt;method&lt;/span&gt; &lt;span class="nb"&gt;iterator&lt;/span&gt;() {
        &lt;span class="k"&gt;gather&lt;/span&gt; {
            &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt; = &lt;span class="nv"&gt;$!start&lt;/span&gt;;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt; &amp;lt;= &lt;span class="nv"&gt;$!stop&lt;/span&gt; {
                &lt;span class="k"&gt;take&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;;
                &lt;span class="nv"&gt;$val&lt;/span&gt;++;
            }
        }.&lt;span class="nb"&gt;iterator&lt;/span&gt;;  &lt;span class="c c-Singleline"&gt;# &amp;lt;- this is important&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For sequences, Perl 6 has the &lt;a href="https://docs.perl6.org/type/Seq"&gt;&lt;code&gt;Seq&lt;/code&gt;&lt;/a&gt; type.  Curiously, even an infinite lazy &lt;code&gt;gather&lt;/code&gt; is still a &lt;code&gt;Seq&lt;/code&gt;.  Indexing and length are &lt;em&gt;not&lt;/em&gt; part of &lt;code&gt;Seq&lt;/code&gt; — both are implemented as &lt;a href="https://docs.perl6.org/language/subscripts#Methods_to_implement_for_positional_subscripting"&gt;separate methods&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Curiously, even though Perl 6 became much stricter overall, the indexing methods don&amp;#8217;t seem to be part of a role; you only need define them, much like Python&amp;#8217;s &lt;code&gt;__dunder__&lt;/code&gt; methods.  In fact, the preceding examples, &lt;code&gt;does Iterator&lt;/code&gt; isn&amp;#8217;t necessary at all; the &lt;code&gt;for&lt;/code&gt; block will blindly try to call an &lt;code&gt;iterator&lt;/code&gt; method and doesn&amp;#8217;t much care where it came&amp;nbsp;from.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sure there are &lt;em&gt;plenty&lt;/em&gt; of cute tricks possible with Perl 6, but, er, I&amp;#8217;ll leave those as an exercise for the&amp;nbsp;reader.&lt;/p&gt;
&lt;h2 id="ruby"&gt;&lt;a class="toclink" href="#ruby"&gt;Ruby&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ruby is a popular and well-disguised Perl variant, if Perl just went completely all-in on Smalltalk.  It has no C-style &lt;code&gt;for&lt;/code&gt;, but it does have an infinite &lt;code&gt;loop&lt;/code&gt; block and a very Python-esque &lt;code&gt;for&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Nobody uses this.  No, really, &lt;a href="http://ruby-doc.org/core-2.3.1/doc/syntax/control_expressions_rdoc.html#label-for+Loop"&gt;the core language documentation&lt;/a&gt; outright&amp;nbsp;says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop is rarely used in modern ruby&amp;nbsp;programs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Instead, you&amp;#8217;ll probably see&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It doesn&amp;#8217;t look it, but this is completely backwards from everything seen so far.  All of these other languages have used &lt;em&gt;external&lt;/em&gt; iterators, where an object is repeatedly asked to produce values and calling code can do whatever it wants with them.  Here, something very different is happening.  The entire &lt;code&gt;do ... end&lt;/code&gt; block acts as a &lt;em&gt;closure&lt;/em&gt; whose argument is &lt;code&gt;value&lt;/code&gt;; it&amp;#8217;s passed to the &lt;code&gt;each&lt;/code&gt; method, which calls it once for each value in the sequence.  This is an &lt;em&gt;internal&lt;/em&gt;&amp;nbsp;iterator.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Pass a block to a function which can then call it a lot&amp;#8221; is a built-in syntactic feature of Ruby, so these kinds of iterators are fairly common.  The upside is that they look almost like a custom block, so they fit naturally with the language.  The downside is that all of these block-accepting methods are implemented &lt;em&gt;on &lt;code&gt;Array&lt;/code&gt;&lt;/em&gt;, rather than as generic functions: &lt;code&gt;bsearch&lt;/code&gt;, &lt;code&gt;bsearch_index&lt;/code&gt;, &lt;code&gt;collect&lt;/code&gt;, &lt;code&gt;collect!&lt;/code&gt;, &lt;code&gt;combination&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;cycle&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;delete_if&lt;/code&gt;, &lt;code&gt;drop_while&lt;/code&gt;, &lt;code&gt;each&lt;/code&gt;, &lt;code&gt;each_index&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;find_index&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;keep_if&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;map!&lt;/code&gt;, &lt;code&gt;permutation&lt;/code&gt;, &lt;code&gt;product&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;reject!&lt;/code&gt;, &lt;code&gt;repeated_combination&lt;/code&gt;, &lt;code&gt;repeated_permutation&lt;/code&gt;, &lt;code&gt;reverse_each&lt;/code&gt;, &lt;code&gt;rindex&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;select!&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;sort!&lt;/code&gt;, &lt;code&gt;sort_by!&lt;/code&gt;, &lt;code&gt;take_while&lt;/code&gt;, &lt;code&gt;uniq&lt;/code&gt;, &lt;code&gt;uniq!&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt;.  Some of those, as well as a number of additional methods, are provided by the &lt;a href="https://ruby-doc.org/core-2.3.1/Enumerable.html"&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; mixin which can express them in terms of &lt;code&gt;each&lt;/code&gt;.  I suppose the other upside is that any given type can provide its own more efficient implementation of these methods, if it so&amp;nbsp;desires.&lt;/p&gt;
&lt;p&gt;I guess that huge list of methods answers most questions about how to iterate over indices or in reverse.  The only bit missing is that &lt;code&gt;..&lt;/code&gt; range syntax exists in Ruby as well, and it produces &lt;code&gt;Range&lt;/code&gt; objects which also have an &lt;code&gt;each&lt;/code&gt; method.  If you don&amp;#8217;t care about each index, you can also use the cute &lt;code&gt;3.times&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Ruby blocks are a fundamental part of the language and built right into the method-calling syntax.  Even &lt;code&gt;break&lt;/code&gt; is defined in terms of blocks, and it works with an&amp;nbsp;argument!&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This just doesn&amp;#39;t feel like it should work, but it does.  Prints 17.&lt;/span&gt;
&lt;span class="c1"&gt;# Braces are conventionally used for inline blocks, but do/end would work too.&lt;/span&gt;
&lt;span class="n"&gt;primes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;each()&lt;/code&gt; doesn&amp;#8217;t need to do anything special here; &lt;code&gt;break&lt;/code&gt; will just cause its return value to be 17.  Somehow.  (Honestly, this is the sort of thing that makes me wary of Ruby; it seems so ad-hoc and raises so many questions.  A language keyword that changes the return value of a different function?  Does the inside of &lt;code&gt;each()&lt;/code&gt; know about this or have any control over it?  How does it actually work?  Is there any opportunity for cleanup?  I have no idea, and &lt;a href="http://ruby-doc.org/core-2.3.1/doc/syntax/control_expressions_rdoc.html#label-break+Statement"&gt;the documentation&lt;/a&gt; doesn&amp;#8217;t seem to think this is worth commenting&amp;nbsp;on.)&lt;/p&gt;
&lt;h3 id="using-blocks"&gt;&lt;a class="toclink" href="#using-blocks"&gt;Using&amp;nbsp;blocks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Anyway, with block-passing as a language feature, the &amp;#8220;iterator protocol&amp;#8221; is pretty straightforward: just write a method that takes a&amp;nbsp;block.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;each&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Be careful!  Though it&amp;#8217;s handy for iteration, that &lt;code&gt;yield&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; the same as Python&amp;#8217;s &lt;code&gt;yield&lt;/code&gt;.  Ruby&amp;#8217;s &lt;code&gt;yield&lt;/code&gt; calls the passed-in block — &lt;em&gt;yields&lt;/em&gt; control to the caller — with the given&amp;nbsp;value(s).&lt;/p&gt;
&lt;p&gt;I pulled a dirty trick there, because I expressed &lt;code&gt;each&lt;/code&gt; in terms of &lt;code&gt;for&lt;/code&gt;.  So how does &lt;code&gt;for&lt;/code&gt; work?  Well, ah, it just delegates to &lt;code&gt;each&lt;/code&gt;.&amp;nbsp;Oops!&lt;/p&gt;
&lt;p&gt;How, then, do you write an iterator completely from scratch?  The obvious way is to use &lt;code&gt;yield&lt;/code&gt; repeatedly.  That gives you something that looks rather a lot like Python, though it doesn&amp;#8217;t actually pause&amp;nbsp;execution.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InclusiveRange&lt;/span&gt;
    &lt;span class="c1"&gt;# This gets you a variety of other iteration methods, all defined in&lt;/span&gt;
    &lt;span class="c1"&gt;# terms of each()&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Enumerable&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="vi"&gt;@stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;each&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@start&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="vi"&gt;@stop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# 6 7 8 9&lt;/span&gt;
&lt;span class="c1"&gt;# A `for` loop would also work here&lt;/span&gt;
&lt;span class="no"&gt;InclusiveRange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="enumerators"&gt;&lt;a class="toclink" href="#enumerators"&gt;Enumerators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Well, that&amp;#8217;s nice for creating a whole collection type, but what if I want an ad-hoc custom iterator?  Enter the &lt;a href="https://ruby-doc.org/core-2.3.1/Enumerator.html"&gt;&lt;code&gt;Enumerator&lt;/code&gt;&lt;/a&gt; class, which allows you to create&amp;#8230;  ah,&amp;nbsp;enumerators.&lt;/p&gt;
&lt;p&gt;Note that the relationship between &lt;code&gt;Enumerable&lt;/code&gt; and &lt;code&gt;Enumerator&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; the same as the relationship between &amp;#8220;iterable&amp;#8221; and &amp;#8220;iterator&amp;#8221;.  Most importantly, neither is really an interface.  &lt;code&gt;Enumerable&lt;/code&gt; is a set of common iteration methods that any collection type may want to have, and it expects an &lt;code&gt;each&lt;/code&gt; to exist.  &lt;code&gt;Enumerator&lt;/code&gt; is a generic collection type, and in fact mixes in &lt;code&gt;Enumerable&lt;/code&gt;.  Maybe I should just show you some&amp;nbsp;code.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Enumerator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# 6 7 8 9&lt;/span&gt;
&lt;span class="n"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;Enumerator&lt;/code&gt; turns a block into a fully-fledged data stream.  The block is free to do whatever it wants, and whenever it wants to emit a value, it calls &lt;code&gt;y.yield value&lt;/code&gt;.  The &lt;code&gt;y&lt;/code&gt; argument is a &amp;#8220;yielder&amp;#8221; object, an opaque magic type; &lt;code&gt;y.yield&lt;/code&gt; is a regular method call, unrelated to the &lt;code&gt;yield&lt;/code&gt; keyword.  (&lt;code&gt;y &amp;lt;&amp;lt; value&lt;/code&gt; is equivalent; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; is Ruby&amp;#8217;s &amp;#8220;append&amp;#8221; operator.  And also, yes, bit&amp;nbsp;shift.)&lt;/p&gt;
&lt;p&gt;The amazing bit is that you can do&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;Enumerator&lt;/code&gt; has all of the &lt;code&gt;Enumerable&lt;/code&gt; methods, one of which is &lt;code&gt;first&lt;/code&gt;.  So, that&amp;#8217;s&amp;nbsp;nice.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;really&lt;/em&gt; amazing bit is that if you stick some debugging code into the block passed to &lt;code&gt;Enumerator.new&lt;/code&gt;, you&amp;#8217;ll find that&amp;#8230;  the values are produced lazily.  That call to &lt;code&gt;first()&lt;/code&gt; doesn&amp;#8217;t generate the full sequence and then discard everything after the first item; it only generates the first item, then&amp;nbsp;stops.&lt;/p&gt;
&lt;p&gt;(Beware!  The values are produced lazily, but many &lt;code&gt;Enumerable&lt;/code&gt; methods are eager.  I&amp;#8217;ll get back to this in a&amp;nbsp;moment.)&lt;/p&gt;
&lt;p&gt;Hang on, didn&amp;#8217;t I say &lt;code&gt;yield&lt;/code&gt; doesn&amp;#8217;t pause execution?  Didn&amp;#8217;t I also say the above &lt;code&gt;yield&lt;/code&gt; is just a method call, not the&amp;nbsp;keyword?&lt;/p&gt;
&lt;p&gt;I did!  And I wasn&amp;#8217;t lying.  The really truly amazing bit, which I&amp;#8217;ve seen &lt;em&gt;shockingly&lt;/em&gt; little excitement about while researching this, is that under the hood, this is all using &lt;a href="https://ruby-doc.org/core-2.3.1/Fiber.html"&gt;&lt;code&gt;Fiber&lt;/code&gt;&lt;/a&gt;s.&amp;nbsp;Coroutines.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Enumerator.new&lt;/code&gt; takes a block and turns it into a coroutine.  Every time something wants a value from the enumerator, it resumes the coroutine.  The yielder object&amp;#8217;s &lt;code&gt;yield&lt;/code&gt; method then calls &lt;code&gt;Fiber.yield()&lt;/code&gt; to pause the coroutine.  It works just like Lua, but it&amp;#8217;s designed to work with existing Ruby conventions, like the piles of internal iteration methods developers expect to&amp;nbsp;find.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;Enumerator.new&lt;/code&gt; can produce Python-style generators, albeit in a slightly un-native-looking way.  There&amp;#8217;s also one other significant difference: an &lt;code&gt;Enumerator&lt;/code&gt; can &lt;em&gt;restart itself&lt;/em&gt; for each method called on it, simply by calling the block again.  This code will print 6 three&amp;nbsp;times:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;ir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;ir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;ir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For something like an inclusive range object, that&amp;#8217;s pretty nice.  For something like a file, maybe not so nice.  It also means you need to be sure to put your setup code &lt;em&gt;inside&lt;/em&gt; the block passed to &lt;code&gt;Enumerator.new&lt;/code&gt;, or funny things will happen when the block is&amp;nbsp;restarted.&lt;/p&gt;
&lt;h3 id="something-like-generators"&gt;&lt;a class="toclink" href="#something-like-generators"&gt;Something like&amp;nbsp;generators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But wait, there&amp;#8217;s more.  Specifically, this common pattern, which pretty much lets you ignore &lt;code&gt;Enumerator.new&lt;/code&gt; entirely.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_iterator_method&lt;/span&gt;
    &lt;span class="c1"&gt;# __method__ is the current method name.  block_given? is straightforward.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;enum_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__method__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;block_given?&lt;/span&gt;

    &lt;span class="c1"&gt;# An extremely accurate simulation of a large list.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;having a look at &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# Blocks are invisible to `yield`; this will yield to the block passed&lt;/span&gt;
        &lt;span class="c1"&gt;# to some_iterator_method.&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;even?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# having a look at 1&lt;/span&gt;
&lt;span class="c1"&gt;# having a look at 2&lt;/span&gt;
&lt;span class="c1"&gt;# 2&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;some_iterator_method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Okay, bear with&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;some_iterator_method()&lt;/code&gt; is called.  It doesn&amp;#8217;t have a block attached, so &lt;code&gt;block_given?&lt;/code&gt; is false, and it returns &lt;code&gt;enum_for(...)&lt;/code&gt;, whatever that does.  Then &lt;code&gt;first()&lt;/code&gt; is called on the result, and that produces a single element and&amp;nbsp;stops.&lt;/p&gt;
&lt;p&gt;The above code has no magic yielder object.  It uses the straightforward &lt;code&gt;yield&lt;/code&gt; keyword.  Why doesn&amp;#8217;t it loop over the entire range from 1 to&amp;nbsp;1000?&lt;/p&gt;
&lt;p&gt;Remember, &lt;code&gt;Enumerator&lt;/code&gt; uses coroutines under the hood.  One neat thing coroutines can do is &lt;em&gt;pause code that doesn&amp;#8217;t know it&amp;#8217;s in a coroutine&lt;/em&gt;.  Python&amp;#8217;s generators pause themselves with &lt;code&gt;yield&lt;/code&gt;, and the mere presence of &lt;code&gt;yield&lt;/code&gt; turns a function into a generator; but in Lua or Ruby or any other language with coroutines, any function can pause at any time.  You can even make a closure that pauses, then pass that closure to another function which calls it, without that function ever knowing anything&amp;nbsp;happened.&lt;/p&gt;
&lt;p&gt;(This arguably has some considerable &lt;em&gt;downsides&lt;/em&gt; as well — it becomes difficult to know when or where your code might pause, which makes reasoning about the order of operations much harder.  That&amp;#8217;s why Python and some other languages opted to implement async &lt;span class="caps"&gt;IO&lt;/span&gt; with an &lt;code&gt;await&lt;/code&gt; keyword — anyone reading the code knows that it can &lt;em&gt;only&lt;/em&gt; pause where an &lt;code&gt;await&lt;/code&gt; appears.)&lt;/p&gt;
&lt;p&gt;(Also, I&amp;#8217;m saying &amp;#8220;pause&amp;#8221; here instead of &amp;#8220;yield&amp;#8221; because Ruby has really complicated the hell out of this by already having a &lt;code&gt;yield&lt;/code&gt; keyword that does something totally different, &lt;em&gt;and&lt;/em&gt; naming its coroutine pause function &lt;code&gt;yield&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Anyway, that&amp;#8217;s exactly what&amp;#8217;s happening here.  &lt;code&gt;enum_for&lt;/code&gt; returns an &lt;code&gt;Enumerator&lt;/code&gt; that wraps the whole method.  (It doesn&amp;#8217;t need to know &lt;code&gt;self&lt;/code&gt;, because &lt;code&gt;enum_for&lt;/code&gt; is actually a method inherited from &lt;code&gt;Object&lt;/code&gt;, goodness gracious.)  When the &lt;code&gt;Enumerator&lt;/code&gt; needs some items, it calls the method a second time with its &lt;em&gt;own&lt;/em&gt; block, running in a coroutine, just like a block passed to &lt;code&gt;Enumerator.new&lt;/code&gt;.  Eventually the method emits a value using the regular old &lt;code&gt;yield&lt;/code&gt; keyword, and that value reaches the block created by &lt;code&gt;Enumerator&lt;/code&gt;, and that block &lt;em&gt;pauses the call stack&lt;/em&gt;.  It doesn&amp;#8217;t matter that &lt;code&gt;Range.each&lt;/code&gt; is eager, because its iteration is still happening in code somewhere, and that code is part of a call stack in a coroutine, so it can be paused.  Eventually the coroutine is no longer useful and gets thrown away, so the eager &lt;code&gt;each&lt;/code&gt; call simply stops midway through its work, unaware that anything unusual ever&amp;nbsp;happened.&lt;/p&gt;
&lt;p&gt;In fact, despite being an &lt;code&gt;Object&lt;/code&gt; method, &lt;code&gt;enum_for&lt;/code&gt; isn&amp;#8217;t special at all.  It can be expressed in pure Ruby very&amp;nbsp;easily:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_enum_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Enumerator.new creates a coroutine-as-iteration-source, as above.&lt;/span&gt;
    &lt;span class="no"&gt;Enumerator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="c1"&gt;# All it does is call the named method with a trivial block.  Every&lt;/span&gt;
        &lt;span class="c1"&gt;# time the method produces a value with the `yield` keyword, we pass it&lt;/span&gt;
        &lt;span class="c1"&gt;# along to the yielder object, which pauses the coroutine.&lt;/span&gt;
        &lt;span class="c1"&gt;# This is nothing more than a bridge between &amp;quot;yield&amp;quot; in the Ruby block&lt;/span&gt;
        &lt;span class="c1"&gt;# sense, and &amp;quot;yield&amp;quot; in the coroutine sense.&lt;/span&gt;
        &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, that&amp;#8217;s pretty neat.  Incidentally, several built-in methods like &lt;code&gt;Array.each&lt;/code&gt; and &lt;code&gt;Enumerable.collect&lt;/code&gt; act like this, returning an &lt;code&gt;Enumerator&lt;/code&gt; if called with no&amp;nbsp;arguments.&lt;/p&gt;
&lt;h3 id="full-laziness"&gt;&lt;a class="toclink" href="#full-laziness"&gt;Full&amp;nbsp;laziness&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I mentioned above that while an &lt;code&gt;Enumerator&lt;/code&gt; fetches items lazily, many of the methods are eager.  To clarify what I mean by that,&amp;nbsp;consider:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;considering &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;collect()&lt;/code&gt; is one of those common &lt;code&gt;Enumerable&lt;/code&gt; methods.  You might know it by its other name, &lt;code&gt;map()&lt;/code&gt;.  Ruby is big on multiple names for the same thing: one that everyone uses in practice, and another that people who don&amp;#8217;t use Ruby will actually&amp;nbsp;recognize.&lt;/p&gt;
&lt;p&gt;Even though this code ultimately only needs three items, and even though there&amp;#8217;s all this coroutine machinery happening under the hood, this &lt;em&gt;still&lt;/em&gt; evaluates the entire range.&amp;nbsp;Why?&lt;/p&gt;
&lt;p&gt;The problem is that &lt;code&gt;collect()&lt;/code&gt; has always returned an &lt;em&gt;array&lt;/em&gt;, and is generally expected to continue doing so.  It has no way of knowing that it&amp;#8217;s about to be fed into &lt;code&gt;first&lt;/code&gt;.  Rather than violate this &lt;span class="caps"&gt;API&lt;/span&gt;, Ruby added a new method, &lt;code&gt;Enumerable.lazy&lt;/code&gt;.  This stops after three&amp;nbsp;items:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;inclusive_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;considering &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;All this does is return an &lt;a href="https://ruby-doc.org/core-2.3.1/Enumerator/Lazy.html"&gt;&lt;code&gt;Enumerator::Lazy&lt;/code&gt;&lt;/a&gt; object, which has lazy implementations of various methods that would usually do a full iteration.  Methods like &lt;code&gt;first(3)&lt;/code&gt; are still &amp;#8220;eager&amp;#8221; (in the sense that they just return an array), since their results have a fixed finite&amp;nbsp;size.&lt;/p&gt;
&lt;p&gt;This seems a little clunky to me, since the end result is still an object with a &lt;code&gt;collect&lt;/code&gt; method that doesn&amp;#8217;t return an array.  I suspect the real reason is just that &lt;code&gt;Enumerator&lt;/code&gt; was added first; even though the coroutine support was already there, &lt;code&gt;Enumerator::Lazy&lt;/code&gt; only came along later.  Changing &lt;em&gt;existing&lt;/em&gt; eager methods to be lazy can, ah, &lt;a href="https://eev.ee/blog/2016/07/31/python-faq-how-do-i-port-to-python-3/"&gt;cause problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The only built-in type that seems to have &lt;em&gt;interesting&lt;/em&gt; &lt;code&gt;lazy&lt;/code&gt; behavior is &lt;code&gt;Range&lt;/code&gt;, which can be&amp;nbsp;infinite.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Whoops, infinite loop.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="no"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;INFINITY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;even?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 2 4 6 8 10&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="no"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;INFINITY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;even?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="a-loose-end"&gt;&lt;a class="toclink" href="#a-loose-end"&gt;A loose&amp;nbsp;end&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I think the only remaining piece of this puzzle is something I stumbled upon but can&amp;#8217;t explain.  &lt;code&gt;Enumerator&lt;/code&gt; has a &lt;a href="https://ruby-doc.org/core-2.3.1/Enumerator.html#method-i-next"&gt;&lt;code&gt;next&lt;/code&gt; method&lt;/a&gt;, which returns the next value or raises &lt;code&gt;StopIteration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wow, that sounds awfully&amp;nbsp;familiar.&lt;/p&gt;
&lt;p&gt;But I can&amp;#8217;t find anything in the language or standard library that &lt;em&gt;uses&lt;/em&gt; this, with one single and boring exception: &lt;a href="https://ruby-doc.org/core-2.3.1/Kernel.html#method-i-loop"&gt;the &lt;code&gt;loop&lt;/code&gt; construct&lt;/a&gt;.  It catches &lt;code&gt;StopIteration&lt;/code&gt; and exits the&amp;nbsp;block.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;enumerator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;
&lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the fourth call, &lt;code&gt;next()&lt;/code&gt; will be out of items, so it raises &lt;code&gt;StopIteration&lt;/code&gt;.  Removing the &lt;code&gt;loop&lt;/code&gt; block makes this quite&amp;nbsp;obvious.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it.  That&amp;#8217;s the only use of it in the language, as far as I can tell.  It seems almost&amp;#8230;  vestigial.  It&amp;#8217;s also a little weird, since it keeps the current iteration state inside the &lt;code&gt;Enumerator&lt;/code&gt;, unlike any of its other methods.  But it&amp;#8217;s also the only form of external iteration that I know of in Ruby, and that&amp;#8217;s handy to have&amp;nbsp;sometimes.&lt;/p&gt;
&lt;h2 id="and-uh-so-on"&gt;&lt;a class="toclink" href="#and-uh-so-on"&gt;And, uh, so&amp;nbsp;on&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I intended to foray into a few more languages, including some recent lower-level friends like C++/Rust/Swift, but this post somehow spiraled out of control and hit &lt;em&gt;nine thousand words&lt;/em&gt;.  No one has read this&amp;nbsp;far.&lt;/p&gt;
&lt;p&gt;Handily, it turns out that the above languages pretty much cover the basic ways of approaching iteration; if any of this made sense, other languages will probably seem pretty&amp;nbsp;familiar.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++&amp;#8217;s &lt;a href="http://www.cplusplus.com/reference/iterator/"&gt;iteration protocol&lt;/a&gt;(s) has existed for a long time in the form of &lt;code&gt;++it&lt;/code&gt; to advance an iterator and &lt;code&gt;*it&lt;/code&gt; to read the current item, though this was usually written manually in a C-style &lt;code&gt;for&lt;/code&gt; loop, and loops were generally terminated with an explicit&amp;nbsp;endpoint.&lt;/p&gt;
&lt;p&gt;C++11 added the range-based &lt;code&gt;for&lt;/code&gt;, which does basically the same stuff under the hood.  Idiomatic C++ is inscrutible, but maybe you can make sense of &lt;a href="https://github.com/klmr/cpp11-range/"&gt;this project&lt;/a&gt; which provides optionally-infinite iterable&amp;nbsp;ranges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust has an entire (extremely well-documented) &lt;a href="https://doc.rust-lang.org/stable/std/iter/index.html"&gt;&lt;code&gt;iter&lt;/code&gt; module&lt;/a&gt; with numerous iterators and examples of how to create your own.  The core of the &lt;a href="https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html"&gt;&lt;code&gt;Iterator&lt;/code&gt; trait&lt;/a&gt; is just a &lt;code&gt;next&lt;/code&gt; method which returns &lt;code&gt;None&lt;/code&gt; when exhausted.  It also has a lot of handy Ruby-like chainable methods, so working directly with iterators is more common in Rust than in&amp;nbsp;Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Swift also has (well-documented) &lt;a href="https://developer.apple.com/reference/swift/iteratorprotocol"&gt;simple &lt;code&gt;next&lt;/code&gt;-based iterators&lt;/a&gt;, which return &lt;code&gt;nil&lt;/code&gt; when exhausted, effectively the same &lt;span class="caps"&gt;API&lt;/span&gt; as&amp;nbsp;Rust.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could probably keep finding more subsequent languages indefinitely, so I&amp;#8217;m gonna take a break from this&amp;nbsp;now.&lt;/p&gt;</content><category term="tech"></category><category term="plt"></category></entry><entry><title>JavaScript: A Horror Story</title><link href="https://eev.ee/blog/2016/10/31/javascript-a-horror-story/" rel="alternate"></link><published>2016-10-31T00:00:00-07:00</published><updated>2016-10-31T00:00:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-10-31:/blog/2016/10/31/javascript-a-horror-story/</id><summary type="html">&lt;p&gt;Ever since writing &lt;a href="https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/"&gt;that one post about &lt;span class="caps"&gt;PHP&lt;/span&gt;&lt;/a&gt;, I&amp;#8217;ve had a steady trickle of people ask me to write a similar post for other languages or platforms.  The most common request by far is&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;Well, I&amp;#8217;ve finally done it.  Here you go: the horror story that is&amp;nbsp;JavaScript.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Ever since writing &lt;a href="https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/"&gt;that one post about &lt;span class="caps"&gt;PHP&lt;/span&gt;&lt;/a&gt;, I&amp;#8217;ve had a steady trickle of people ask me to write a similar post for other languages or platforms.  The most common request by far is&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;Well, I&amp;#8217;ve finally done it.  Here you go: the horror story that is&amp;nbsp;JavaScript.&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;*ahem*&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;JavaScript is bad, too.  Not &lt;em&gt;real&lt;/em&gt; bad, but like, &lt;em&gt;pretty&lt;/em&gt;&amp;nbsp;bad.&lt;/p&gt;
&lt;p&gt;You probably knew that already if you&amp;#8217;re bothering to read&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;I could go into details, but you probably know those too, and anyway they don&amp;#8217;t&amp;nbsp;matter.&lt;/p&gt;
&lt;p&gt;Because we&amp;#8217;re &lt;em&gt;stuck&lt;/em&gt; with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re all stuck with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Stuck with&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Forever.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-31-javascript-bad/muahahaha.jpg" alt="" title="muahahahahaha..."&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Happy&amp;nbsp;Halloween&amp;#8230;&lt;/em&gt;&lt;/p&gt;</content><category term="tech"></category></entry><entry><title>Accessible games</title><link href="https://eev.ee/blog/2016/10/29/accessible-games/" rel="alternate"></link><published>2016-10-29T18:35:00-07:00</published><updated>2016-10-29T18:35:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-10-29:/blog/2016/10/29/accessible-games/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve now made &lt;a href="/projects/#games"&gt;a few small games&lt;/a&gt;.  One of the trickiest and most interesting parts of designing them has been making them&amp;nbsp;accessible.&lt;/p&gt;
&lt;p&gt;I mean that in a very general and literal sense.  I want as many people as possible to experience as much of my games as possible.  Finding and clearing out unnecessary hurdles can be hard, but every one I leave risks losing a bunch of players who can&amp;#8217;t or won&amp;#8217;t clear&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve noticed three major categories of hurdle, all of them full of tradeoffs.  &lt;strong&gt;Difficulty&lt;/strong&gt; is what makes a game challenging, but if a player can&amp;#8217;t get past a certain point, they can never see the rest of the game.  &lt;strong&gt;Depth&lt;/strong&gt; is great, but not everyone has 80 hours to pour into a game, and it&amp;#8217;s tough to spend weeks of dev time on stuff most people won&amp;#8217;t see.  &lt;strong&gt;Distribution&lt;/strong&gt; is a question of who can even get your game in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Here are some&amp;nbsp;thoughts.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve now made &lt;a href="/projects/#games"&gt;a few small games&lt;/a&gt;.  One of the trickiest and most interesting parts of designing them has been making them&amp;nbsp;accessible.&lt;/p&gt;
&lt;p&gt;I mean that in a very general and literal sense.  I want as many people as possible to experience as much of my games as possible.  Finding and clearing out unnecessary hurdles can be hard, but every one I leave risks losing a bunch of players who can&amp;#8217;t or won&amp;#8217;t clear&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve noticed three major categories of hurdle, all of them full of tradeoffs.  &lt;strong&gt;Difficulty&lt;/strong&gt; is what makes a game challenging, but if a player can&amp;#8217;t get past a certain point, they can never see the rest of the game.  &lt;strong&gt;Depth&lt;/strong&gt; is great, but not everyone has 80 hours to pour into a game, and it&amp;#8217;s tough to spend weeks of dev time on stuff most people won&amp;#8217;t see.  &lt;strong&gt;Distribution&lt;/strong&gt; is a question of who can even get your game in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Here are some&amp;nbsp;thoughts.&lt;/p&gt;


&lt;h2 id="mario-maker"&gt;&lt;a class="toclink" href="#mario-maker"&gt;Mario&amp;nbsp;Maker&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mario Maker is most notable for how accessible it is to budding game designers, which is important but also a completely different sense of&amp;nbsp;accessibility.&lt;/p&gt;
&lt;p&gt;The really nice thing about Mario Maker is that its levels are &lt;em&gt;also&lt;/em&gt; accessible to &lt;em&gt;players&lt;/em&gt;.  Virtually everyone who&amp;#8217;s heard of video games has heard of Mario.  You don&amp;#8217;t need to know many rules to be able to play.  Move to the right, jump over/on things, and get to the&amp;nbsp;flag.&lt;/p&gt;
&lt;p&gt;(The &amp;#8220;distribution&amp;#8221; model is a bit of a shame, though — you need to own a particular console and a $60 game.  If I want people to play a single individual level I made, that&amp;#8217;s a lot of upfront investment to ask for.  Ultimately Nintendo is in this to sell their own game more than to help people show off their&amp;nbsp;own.)&lt;/p&gt;
&lt;p&gt;But the emergent depth of Mario Maker&amp;#8217;s myriad objects — the very property that makes the platform more than a toy — also makes it &lt;em&gt;less&lt;/em&gt; accessible.  Everyone knows you move around and jump, but not everyone knows you can pick up an item with &lt;kbd&gt;B&lt;/kbd&gt;, or that you can put on a hat you&amp;#8217;re carrying by pressing &lt;kbd&gt;↓&lt;/kbd&gt;, or that you can spinjump on certain hazards.  And these are fairly basic controls — Mario Maker contains plenty of special interactions between more obscure objects, and no manual explaining them&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;I thought it was especially interesting that &lt;a href="http://supermariomaker.nintendo.com/comics/"&gt;Nintendo&amp;#8217;s own comic series on building Mario Maker levels&lt;/a&gt; specifically points out that &lt;a href="http://supermariomaker.nintendo.com/comics/5/"&gt;running jumps don&amp;#8217;t come naturally to everyone&lt;/a&gt;.  It&amp;#8217;s hard to imagine too many people playing Mario Maker and not knowing how to jump while&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;And&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;And yet, imagine being one such person, and encountering a level that requires a running jump early on.  You can&amp;#8217;t get past it.  You might not even understand &lt;em&gt;how&lt;/em&gt; to get past it; perhaps you don&amp;#8217;t even know Mario can run.  Now what?  That&amp;#8217;s it, you&amp;#8217;re stuck.  You&amp;#8217;ll never see the rest of that level.  It&amp;#8217;s a hurdle, in a somewhat more literal&amp;nbsp;sense.&lt;/p&gt;
&lt;p&gt;Why make the level that way in the first place, then?  Does any seasoned Mario player jump over a moderate-width gap and come away feeling proud for having conquered it?  Seems&amp;nbsp;unlikely.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve tried playing through 100 Mario Challenge on Expert a number of times (without once managing to complete it), and I&amp;#8217;ve noticed three fuzzy categories.  Some levels are an arbitrary mess of hazards right from the start, so I don&amp;#8217;t expect them to get any easier.  Some levels are clearly &lt;em&gt;designed&lt;/em&gt; as difficult obstacle courses, so again, I assume they&amp;#8217;ll be just as hard all the way through.  In both cases, if I give up and skip to the next level, I don&amp;#8217;t feel like I&amp;#8217;m missing out on anything — I&amp;#8217;m not the intended&amp;nbsp;audience.&lt;/p&gt;
&lt;p&gt;But there are some Expert-ranked levels that seem pretty reasonable&amp;#8230;  until &lt;em&gt;this one point&lt;/em&gt; where all hell breaks loose.  I always wonder how deliberate those parts are, and I vaguely regret skipping them — would the rest of the level have calmed back down and been&amp;nbsp;enjoyable?&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s the kind of hurdle I think about when I see conspicuous clusters of death markers in my own levels.  How many people died there and gave up?  I make levels intending for people to &lt;em&gt;play&lt;/em&gt; them, to see them through, but how many players have I turned off with some needlessly tricky&amp;nbsp;part?&lt;/p&gt;
&lt;p&gt;One of my levels is a &lt;a href="https://eev.ee/dev/2015/09/18/mario-maker-spoopy-manor/"&gt;Boo house&lt;/a&gt; with a few cute tricks in it.  Unfortunately, I also put a ring of Boos right at the beginning that&amp;#8217;s tricky to jump through, so it&amp;#8217;s very easy for a player to die several times right there and never see anything&amp;nbsp;else.&lt;/p&gt;
&lt;p&gt;I wanted my Boo house to be &lt;em&gt;interesting&lt;/em&gt; rather than difficult, but I let difficulty creep in accidentally, and so I&amp;#8217;ve reduced the number of people who can appreciate the interestingness.  Every level I&amp;#8217;ve made since then, I&amp;#8217;ve struggled to keep the difficulty down, and still sometimes failed.  It&amp;#8217;s easy to make a level that&amp;#8217;s very hard; it&amp;#8217;s surprisingly hard to make a level that&amp;#8217;s fairly easy.  All it takes is a single unintended hurdle — a tricky jump, an awkwardly-placed enemy — to start losing&amp;nbsp;players.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t to say that games should never be difficult, but difficulty needs to be deliberately calibrated, and that&amp;#8217;s a hard thing to do.  It&amp;#8217;s very easy to think only in terms of &amp;#8220;can &lt;em&gt;I&lt;/em&gt; beat this&amp;#8221;, and even that&amp;#8217;s not accurate, since you know every nook and cranny of your own level.  Can you beat it blind, on the first few tries?  Could someone&amp;nbsp;else?&lt;/p&gt;
&lt;p&gt;Those questions are especially important in Mario Maker, where the easiest way to encounter an assortment of levels is to play 100 Mario Challenge.  You have 100 lives and need to beat 16 randomly-chosen levels.  If you run out of lives, you&amp;#8217;re done, and you have to start over.  If I encounter your level here, I &lt;em&gt;can&amp;#8217;t afford&lt;/em&gt; to burn more than six or seven lives on it, or I&amp;#8217;ll game over and have wasted my time.  So if your level looks ridiculously hard (and not even in a fun way), I&amp;#8217;ll just skip it and hope I get a better level next&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I wonder if designers forget to calibrate for this.  When you spend a lot of time working on something, it&amp;#8217;s easy to imagine it exists in a vacuum, to assume that other people will be as devoted to playing it as you were to making&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Mario Maker is an extreme case: &lt;em&gt;millions&lt;/em&gt; of levels are available, and any player can skip to another one with the push of a button.  That might be why I feel like I&amp;#8217;ve seen a huge schism in level difficulty: most Expert levels are impossible for me, whereas most Normal levels are fairly doable with one or two rough patches.  I haven&amp;#8217;t seen much that&amp;#8217;s in the middle, that feels like a solid challenge.  I suspect that people who are very good at Mario are looking for an extreme challenge, and everyone else just wants to play some Mario, so moderate-difficulty levels just aren&amp;#8217;t as common.  The former group will be bored by them, and the latter group will skip&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Or maybe that&amp;#8217;s a stretch.  It&amp;#8217;s hard to generalize about the game&amp;#8217;s pool of levels when they number in the millions, and I can&amp;#8217;t have played more than a few&amp;nbsp;hundred.&lt;/p&gt;
&lt;p&gt;What Mario Maker has really taught me is what a hurdle &lt;em&gt;looks like&lt;/em&gt;.  The game keeps track of everywhere a player has ever died.  I may not be able to watch people play my levels, but looking back at them later and seeing &lt;em&gt;clumps&lt;/em&gt; of death markers is very powerful.  Those are the places people failed.  Did they stop playing after that?  Did I intend for those places to be so&amp;nbsp;difficult?&lt;/p&gt;
&lt;h2 id="doom"&gt;&lt;a class="toclink" href="#doom"&gt;Doom&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Doom is an interesting contrast to Mario Maker.  A great many Doom maps have been produced over the past two decades, but nowhere near as many levels as Mario Maker has produced in a couple years.  On the other hand, many people who still play Doom have been playing Doom this entire time, so a greater chunk of the community is &lt;em&gt;really good&lt;/em&gt; at the game and enjoys a serious&amp;nbsp;challenge.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve only released a couple Doom maps of my own: &lt;a href="https://eev.ee/blog/2016/03/31/i-made-a-doom-level/"&gt;Throughfare&lt;/a&gt; (the one I contributed to &lt;span class="caps"&gt;DUMP&lt;/span&gt; 2 earlier this year) and a few &lt;a href="https://twitter.com/eevee/status/791048165919043584"&gt;one-hour speedmaps&lt;/a&gt; I made earlier this week.  I like building in Doom, with its interesting balance of restrictions — it&amp;#8217;s a fairly accessible way to build an interesting 3D world, and nothing else is quite like&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve had the privilege of watching a few people play through my maps live, and I have learned some&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;The first is that the community&amp;#8217;s love of difficulty is comically misleading.  It&amp;#8217;s not &lt;em&gt;wrong&lt;/em&gt;, but, well, that community isn&amp;#8217;t actually my target audience.  So far I&amp;#8217;ve &amp;#8220;published&amp;#8221; maps on this blog and Twitter, where my audience hasn&amp;#8217;t necessarily even played Doom in twenty years.  If at all!  Some of my followers are younger than&amp;nbsp;Doom.&lt;/p&gt;
&lt;p&gt;Most notably, this creates something of a distribution problem: to play my maps, you need to install a thing (ZDoom) and kinda figure out how to use it and also get a copy of Doom 2 which probably involves spending five bucks.  Less of a hurdle than getting Mario Maker, yes, but still some upfront&amp;nbsp;effort.&lt;/p&gt;
&lt;p&gt;Also, ZDoom&amp;#8217;s default settings are&amp;#8230;  not optimal.  Out of the box, it&amp;#8217;s similar to classic Doom: no &lt;span class="caps"&gt;WASD&lt;/span&gt;, no mouselook.  I don&amp;#8217;t know who this is meant to appeal to.  If you&amp;#8217;ve never played Doom, the controls are goofy.  If you&amp;#8217;ve played other shooters, the controls are goofy.  If you played Doom when it came out but not since, you probably don&amp;#8217;t remember the controls, so they&amp;#8217;re still goofy.&amp;nbsp;Oof.&lt;/p&gt;
&lt;p&gt;Not having mouselook is more of a problem than you&amp;#8217;d think.  If you as the designer play with mouselook, it&amp;#8217;s &lt;em&gt;really easy&lt;/em&gt; to put important things off the top or bottom of the screen and never realize it&amp;#8217;ll be a problem.  I watched someone play through Throughfare a few days ago and get completely stuck at what seemed to be a dead end — because he needed to drop down a hole in a small platform, and the hole was completely hidden by the status&amp;nbsp;bar.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s actually an interesting example for another reason.  Here&amp;#8217;s the room where he got&amp;nbsp;stuck.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-29-accessible-games/throughfare-dead-end.png" alt="A small room with a raised platform at the end, a metal section in the floor, and a switch on the side wall"&gt;
&lt;/div&gt;

&lt;p&gt;When you press the switch, the metal plates on the ground rise up and become stairs, so you can get onto the platform.  He did that, saw nowhere obvious to go, and immediately turned around and backtracked quite a ways looking for some other&amp;nbsp;route.&lt;/p&gt;
&lt;p&gt;This surprised me!  The room makes no sense as a dead end.  It&amp;#8217;s not an easter egg or interesting feature; it has no obvious reward; it has a button that appears to help you progress.  If I were stuck here, I&amp;#8217;d investigate the hell out of this room — yet this player gave up almost&amp;nbsp;immediately.&lt;/p&gt;
&lt;p&gt;Not to say that the player is wrong and the level is right.  This room was supposed to be trivially simple, and I regret that it became a hurdle for someone.  It&amp;#8217;s just a difference in playstyle I didn&amp;#8217;t account for.  Besides the mouselook problem, this player tended to move very quickly in general, charging straight ahead in new areas without so much as looking around; I play more slowly, looking around for nooks and crannies.  He ended up missing the plasma gun for much the same reason — it was on a ledge slightly below the default view angle, making it hard to see without&amp;nbsp;mouselook.&lt;/p&gt;
&lt;p&gt;Speaking of nooks and crannies: watching someone find or miss secrets in a world I built is utterly fascinating.  I&amp;#8217;ve watched several people play Throughfare now, and the secrets are the part I love watching the most.  I&amp;#8217;ve seen people charge directly into secrets on accident; I&amp;#8217;ve seen people run straight to a very clever secret just because they had the same idea I did; I&amp;#8217;ve seen people find a secret switch and then &lt;em&gt;not press it&lt;/em&gt;.  It&amp;#8217;s amazing how different just a handful of players have&amp;nbsp;been.&lt;/p&gt;
&lt;p&gt;I think the spread of secrets in Throughfare is pretty good, though I slightly regret using the same trick three times; either you get it right away and try it everywhere, or you don&amp;#8217;t get it at all and miss out on a lot of goodies.  Of course, the whole point of secrets is that not everyone will find them on the first try (or at all), so it&amp;#8217;s probably okay to err on the trickier&amp;nbsp;side.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As for the speedmaps, I&amp;#8217;ve only watched one person play them live.  The biggest hurdle was a room I made that required&amp;nbsp;jumping.&lt;/p&gt;
&lt;p&gt;Jumping wasn&amp;#8217;t in the original Doom games.  People thus don&amp;#8217;t really expect to &lt;em&gt;need&lt;/em&gt; to jump in Doom maps.  Worse, ZDoom doesn&amp;#8217;t even have a key bound to jump out of the box, which I only discovered&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;See, when I made the room (very quickly), I was imagining a ZDoom veteran seeing it and immediately thinking, &amp;#8220;oh, this is one of those maps where I need to jump&amp;#8221;.  I&amp;#8217;ve heard people say that about other maps before, so it felt like common knowledge.  But it&amp;#8217;s only common knowledge if you&amp;#8217;re part of the community and have run into a few maps that require&amp;nbsp;jumping.&lt;/p&gt;
&lt;p&gt;The situation is made all the more complicated by the way ZDoom handles it.  Maps can use a ZDoom-specific settings file to explicitly allow or forbid jumping, but the default is to allow it.  The stock maps and most third-party vanilla maps won&amp;#8217;t have this ZDoom-specific file, so jumping will be allowed, even though they&amp;#8217;re not designed for it.  Most mappers only use this file at all if they&amp;#8217;re making something specifically for ZDoom, in which case they might as well allow jumping anyway.  It&amp;#8217;s opt-out, but the maps that don&amp;#8217;t want it are the ones least likely to use the opt-out, so in practice everyone has to assume jumping &lt;em&gt;isn&amp;#8217;t&lt;/em&gt; allowed until they see some strong indication otherwise.  It&amp;#8217;s a mess.  Oh, and ZDoom also supports crouching, which is even more&amp;nbsp;obscure.&lt;/p&gt;
&lt;p&gt;I probably should&amp;#8217;ve thought of all that at the time.  In my defense, you know,&amp;nbsp;speedmap.&lt;/p&gt;
&lt;p&gt;One other minor thing was that, of course, ZDoom uses the traditional Doom &lt;span class="caps"&gt;HUD&lt;/span&gt; out of the box, and plenty of people play that way on purpose.  I&amp;#8217;m used to ZDoom&amp;#8217;s &amp;#8220;alternative&amp;#8221; &lt;span class="caps"&gt;HUD&lt;/span&gt;, which not only expands your field of view slightly, but also shows a permanent count of how many secrets are in the level and how many you&amp;#8217;ve found.  I love that, because it tells me how much secret-hunting I&amp;#8217;ll need to do from the beginning&amp;#8230;  but if you don&amp;#8217;t use that &lt;span class="caps"&gt;HUD&lt;/span&gt; (and don&amp;#8217;t look at the count on the automap), you won&amp;#8217;t even know whether there are secrets or&amp;nbsp;not.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;For a third-party example: a recent (well, late 2014) cool release was &lt;a href="https://www.doomworld.com/idgames/levels/doom2/Ports/megawads/gd"&gt;Going Down&lt;/a&gt;, a set of small and devilish maps presented as the floors of a building you&amp;#8217;re traversing from the roof downwards.  I don&amp;#8217;t actually play a lot of Doom, but I liked this concept enough to actually play it, and I enjoyed the clever traps and interwoven&amp;nbsp;architecture.&lt;/p&gt;
&lt;p&gt;Then I reached &lt;span class="caps"&gt;MAP12&lt;/span&gt;, Dead End.  An appropriate name, because I got stuck here.  Permanently stuck.  The climax of the map is too many monsters in not enough space, and it&amp;#8217;s cleverly rigged to remove the only remaining cover right when you need it.  I couldn&amp;#8217;t beat&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;That was a year ago.  I haven&amp;#8217;t seen any of the other 20 maps beyond this point.  I&amp;#8217;m sure they&amp;#8217;re very cool, but I can&amp;#8217;t get to them.  This one is too high a&amp;nbsp;hurdle.&lt;/p&gt;
&lt;p&gt;Granted, hopping around levels is trivially easy in Doom games, but I don&amp;#8217;t &lt;em&gt;want&lt;/em&gt; to cheat my way through — and anyway, if I can&amp;#8217;t beat &lt;span class="caps"&gt;MAP12&lt;/span&gt;, what hope do I have of beating &lt;span class="caps"&gt;MAP27&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;I feel ambivalent about this.  The author describes the gameplay as &amp;#8220;chaotic evil&amp;#8221;, so it &lt;em&gt;is&lt;/em&gt; meant to be very hard, and I appreciate the design of the traps&amp;#8230;  but I&amp;#8217;m unable to appreciate any &lt;em&gt;more&lt;/em&gt; of&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t the author&amp;#8217;s fault, anyway; it&amp;#8217;s baked into the design of Doom.  If you can&amp;#8217;t beat one level, you don&amp;#8217;t get to see any future levels.  In vanilla Doom it was particularly bad: if you die, you restart the level with no weapons or armor, probably making it even &lt;em&gt;harder&lt;/em&gt; than it was before.  You can save any time, and some modern source ports like ZDoom will autosave when you start a level, but the original game never saved&amp;nbsp;automatically.&lt;/p&gt;
&lt;h2 id="isaacs-descent"&gt;&lt;a class="toclink" href="#isaacs-descent"&gt;Isaac's&amp;nbsp;Descent&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://eev.ee/blog/2016/08/29/i-entered-ludum-dare-36/"&gt;Isaac&amp;#8217;s Descent&lt;/a&gt; is the little &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 puzzle platformer I made for Ludum Dare 36 a couple months ago.  It worked out surprisingly well; pretty much everyone who played it (and commented on it to me) got it, finished it, and enjoyed it.  The &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 exports to an &lt;span class="caps"&gt;HTML&lt;/span&gt; player, too, so anyone with a keyboard can play it with no further effort&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;I was really happy with the puzzle design, especially considering I hadn&amp;#8217;t really made a puzzle game before and was rushing to make some rooms in a very short span of time.  Only two were perhaps unfair.  One was the penultimate room, which involved a tricky timing puzzle, so I&amp;#8217;m not too bothered about that.  The other was this&amp;nbsp;room:&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-29-accessible-games/isaac-two-doors.png" alt="A cavern with two stone slab doors, one much taller than the other, and a wooden wheel on the wall"&gt;
&lt;/div&gt;

&lt;p&gt;Using the wheel raises all stone doors in the room.  Stone doors open at a constant rate, wait for a fixed time, and then close again.  The tricky part with this puzzle is that by the time the very tall door has opened, the short door has already closed again.  The solution is simply to use the wheel again right after the short door has closed, while the tall door is still opening.  The short door will reopen, while the tall door won&amp;#8217;t be affected since it&amp;#8217;s already&amp;nbsp;busy.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t particularly difficult to figure out, but it did catch a few people, and overall it doesn&amp;#8217;t sit particularly well with me.  Using the wheel while a door is opening feels like a weird edge case, not something that a game would usually rely on, yet I based an entire puzzle around it.  I don&amp;#8217;t know.  I might be overthinking this.  The problem might be that &amp;#8220;ignore the message&amp;#8221; is a very computery thing to do and doesn&amp;#8217;t match with how such a wheel would work in practice; perhaps I&amp;#8217;d like the puzzle more if the wheel always &lt;em&gt;interrupted&lt;/em&gt; whatever a door was doing and forced it to raise&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;Overall, though, the puzzles worked&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;The biggest snags I saw were control issues with the &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 itself.  The &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 is a &amp;#8220;fantasy console&amp;#8221; — effectively an emulator for a console that never existed.  One of the consequences of this is that the controls aren&amp;#8217;t defined in terms of keyboard keys, but in terms of the &lt;span class="caps"&gt;PICO&lt;/span&gt;-8&amp;#8217;s own &amp;#8220;controller&amp;#8221;.  Unfortunately, that controller is only defined indirectly, and the web player doesn&amp;#8217;t indicate in any way how it&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;The controller&amp;#8217;s main inputs — the only ones a game can actually read — are a directional pad and two buttons, &lt;kbd&gt;○&lt;/kbd&gt; and &lt;kbd&gt;❌&lt;/kbd&gt;, which map to &lt;kbd&gt;z&lt;/kbd&gt; and &lt;kbd&gt;x&lt;/kbd&gt; on a keyboard.  The &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 font has glyphs for &lt;kbd&gt;○&lt;/kbd&gt; and &lt;kbd&gt;❌&lt;/kbd&gt;, so I used those to indicate which button does what.  Unfortunately, if you aren&amp;#8217;t familiar with the &lt;span class="caps"&gt;PICO&lt;/span&gt;-8, those won&amp;#8217;t make a lot of sense to you.  It&amp;#8217;s nice that &lt;kbd&gt;❌&lt;/kbd&gt; looks like the keyboard key it&amp;#8217;s bound to, but &lt;kbd&gt;○&lt;/kbd&gt; looks like the &lt;em&gt;wrong&lt;/em&gt; keyboard key.  This caused a little&amp;nbsp;confusion.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Well,&amp;#8221; I hear you say, &amp;#8220;why not just refer to the keys directly?&amp;#8221;  Ah, but there&amp;#8217;s a very good reason the &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 is defined in terms of buttons: those aren&amp;#8217;t the only keys you can use!  &lt;kbd&gt;n&lt;/kbd&gt; and &lt;kbd&gt;m&lt;/kbd&gt; also work, as do &lt;kbd&gt;c&lt;/kbd&gt; and &lt;kbd&gt;v&lt;/kbd&gt;.  The &lt;a href="https://getchip.com/pages/pocketchip"&gt;PocketCHIP&lt;/a&gt; also allows&amp;#8230;  &lt;kbd&gt;0&lt;/kbd&gt; and &lt;kbd&gt;=&lt;/kbd&gt;, I think, which is good because &lt;kbd&gt;z&lt;/kbd&gt; and &lt;kbd&gt;x&lt;/kbd&gt; are directly &lt;em&gt;under&lt;/em&gt; the arrow keys on the PocketCHIP keyboard.  And of course you can play on a &lt;span class="caps"&gt;USB&lt;/span&gt; controller, or rebind the&amp;nbsp;keys.&lt;/p&gt;
&lt;p&gt;I could&amp;#8217;ve mentioned that &lt;kbd&gt;z&lt;/kbd&gt; and &lt;kbd&gt;x&lt;/kbd&gt; are the defaults, but that&amp;#8217;s wrong for the PocketCHIP, and now I&amp;#8217;m looking at a screenful of text explaining buttons that most people won&amp;#8217;t read&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;A similar problem is the pause menu, accessible with &lt;kbd&gt;p&lt;/kbd&gt; or &lt;kbd&gt;enter&lt;/kbd&gt;.  I&amp;#8217;d put an option on the pause menu for resetting the room you&amp;#8217;re in, &lt;em&gt;just in case&lt;/em&gt;, but didn&amp;#8217;t bother to explain how to get to the pause menu.Or that a pause menu exists.  Also, the ability to put custom things on the pause menu is new, so a lot of people might not even know about it.  I&amp;#8217;m sure you can see this coming: a few rooms (including the two-door one) had places you could get stuck, and without any obvious way to restart the room, a few people thought they had to start the whole game over.&amp;nbsp;Whoops.&lt;/p&gt;
&lt;p&gt;In my defense, the web player is actively working against me here: it has a &amp;#8220;pause&amp;#8221; &lt;em&gt;link&lt;/em&gt; below the console, but all the link does is freeze the player, not bring up the pause&amp;nbsp;menu.&lt;/p&gt;
&lt;p&gt;This is a recurring problem, and perhaps a fundamental question of making games accessible: how much do you need to explain to people who aren&amp;#8217;t familiar with the platform or paradigm?  Should every single game explain itself?  Players who don&amp;#8217;t need the explanation can easily get irritated by it, and that&amp;#8217;s a bad way to start a game.  The &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 in particular has the extra wrinkle that its cartridge space is very limited, and any kind of explanation/tutorial costs space you could be using for gameplay.  On the other hand, I&amp;#8217;ve played more than one popular &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 game that was completely opaque to me because it didn&amp;#8217;t explain its controls at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m reminded of &lt;a href="http://emshort.com/counterfeit_monkey/"&gt;Counterfeit Monkey&lt;/a&gt;, a &lt;em&gt;very good&lt;/em&gt; interactive fiction game that goes out of its way to implement a hint system and a gentle tutorial.  The tutorial knits perfectly with the story, and the hints are trivially turned off, so neither is a bother.  The game also has a hard mode, which eliminates some of the more obvious solutions and gives a nod to seasoned &lt;span class="caps"&gt;IF&lt;/span&gt; players as well.  &lt;a href="http://emshort.com/"&gt;The author&lt;/a&gt; is very interested in making interactive fiction more accessible in general, and it definitely shows.  I think this game alone convinced me it&amp;#8217;s worth the effort — I&amp;#8217;m putting many of the same touches in my own &lt;span class="caps"&gt;IF&lt;/span&gt;&amp;nbsp;foray.&lt;/p&gt;
&lt;h2 id="under-construction"&gt;&lt;a class="toclink" href="#under-construction"&gt;Under&amp;nbsp;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://eev.ee/blog/2016/05/25/under-construction-our-pico-8-game/"&gt;Under Construction&lt;/a&gt; is the &lt;span class="caps"&gt;PICO&lt;/span&gt;-8 game that Mel and I made early this year.  It&amp;#8217;s a simple, slightly surreal, slightly obtuse&amp;nbsp;platformer.&lt;/p&gt;
&lt;p&gt;Traditional wisdom has it that you don&amp;#8217;t want games to be obtuse.  That acts as a hurdle, and loses you players.  Here, though, it&amp;#8217;s part of the experience, so the question becomes how to strike a good balance without losing the&amp;nbsp;impact.  &lt;/p&gt;
&lt;p&gt;A valid complaint we heard was that the use of color is slightly inconsistent in places.  For the most part, foreground objects (those you can stand on) are light and background decorations are gray, but a couple tiles break that pattern.  A related problem that came up almost immediately in beta testing was that spikes were difficult to pick out.  I addressed that — fairly effectively, I think — by adding a single dark red pixel to the tip of the&amp;nbsp;spikes.&lt;/p&gt;
&lt;p&gt;But the most common hurdle by far was act 3, which caught us completely by surprise.  &lt;strong&gt;Spoilers!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From the very beginning, the world contains a lot of pillars containing eyeballs that look at you.  They don&amp;#8217;t otherwise do anything, beyond act as platforms you can stand&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;In act 2, a number of little radios appear throughout the world.  Mr. 5 complains that it&amp;#8217;s very noisy, so you need to break all the radios by jumping on&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;In act 3, the world seems largely the same&amp;#8230;  but the eyes in the pillars now turn to ❌&amp;#8217;s when you touch them.  If this happens before you make it to the end, Mr. 5 complains that he&amp;#8217;s in pain, and the act&amp;nbsp;restarts.&lt;/p&gt;
&lt;p&gt;The correct solution is to &lt;em&gt;avoid&lt;/em&gt; touching any of the eye pillars.  But because this comes immediately after act 2, where we taught the player to jump on things to defeat them — reinforcing a very common platforming mechanic — some players thought you were supposed to jump on &lt;em&gt;all of them&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know how we could&amp;#8217;ve seen that coming.  The acts were implemented one at a time and not in the order they appear in the game, so we were both pretty used to every individual mechanic before we started playing through the entire game at once.  I suppose when a game is developed and tested in pieces (as most games are), the order and connection between those pieces is a weak point and needs some extra&amp;nbsp;consideration.&lt;/p&gt;
&lt;p&gt;We didn&amp;#8217;t change the game to address this, but &lt;a href="http://floraverse.com/comic/games/466-under-construction-instruction-manual-p1-7/"&gt;the manual&lt;/a&gt; contains a strong&amp;nbsp;hint.&lt;/p&gt;
&lt;p&gt;Under Construction also contains a couple of easter eggs and different endings.  All are fairly minor changes, but they added a &lt;em&gt;lot&lt;/em&gt; of character to the game and gave its fans something else to delve into once they&amp;#8217;d beaten&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Crucially, these things worked as well as they did because they &lt;em&gt;weren&amp;#8217;t&lt;/em&gt; accessible.  Easily-accessed easter eggs aren&amp;#8217;t really easter eggs any more, after all.  I don&amp;#8217;t think the game has any explicit indication that the ending can vary, which meant that players would only find out about it from us or other&amp;nbsp;fans.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t yet know the right answer for balancing these kinds of extras, and perhaps there isn&amp;#8217;t one.  If you spend a lot of time on easter eggs, multiple endings, or even just multiple paths through the game, you&amp;#8217;re putting a lot of effort into stuff that many players will never see.  On the other hand, they add an incredible amount of depth and charm to a game and reward those players who &lt;em&gt;do&lt;/em&gt; stick around to&amp;nbsp;explore.&lt;/p&gt;
&lt;p&gt;This is a lot like the balancing act with software interfaces.  You want your thing to be accessible in the sense that a newcomer can sit down and get useful work done, but you also want to reward long-time users with shortcuts and more advanced features.  You don&amp;#8217;t want to &lt;em&gt;hide&lt;/em&gt; advanced features too much, but you also don&amp;#8217;t want to have an interface with a thousand&amp;nbsp;buttons.&lt;/p&gt;
&lt;h2 id="how-larger-and-better-known-games-deal-with-this"&gt;&lt;a class="toclink" href="#how-larger-and-better-known-games-deal-with-this"&gt;How larger and better-known games deal with&amp;nbsp;this&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#8217;t have the patience for Zelda I.  I never even tried it until I got it for free on my &lt;span class="caps"&gt;3DS&lt;/span&gt;, as part of a pack of Virtual Console games given to everyone who bought a &lt;span class="caps"&gt;3DS&lt;/span&gt; early.  I gave it a shot, but I got bored really quickly.  The overworld was probably the most frustrating part: the connections between places are weird, everything looks pretty much the same, the map is not very helpful, and very little acts as a landmark.  I could&amp;#8217;ve drawn my own map, but, well, I usually can&amp;#8217;t be bothered to do that for&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;I contrast this with Skyward Sword, which I mostly enjoyed.  Ironically, one of my complaints is that it doesn&amp;#8217;t quite have an overworld.  It &lt;em&gt;almost&lt;/em&gt; does, but they stopped most of the way, leaving us with three large chunks of world and a completely-open sky area reminiscent of Wind Waker&amp;#8217;s&amp;nbsp;ocean.&lt;/p&gt;
&lt;p&gt;Clearly, something about huge open spaces with no barriers whatsoever appeals to the Zelda team.  I have to wonder if they&amp;#8217;re trying to avoid situations like my experience with Zelda I.  If a player gets lost in an expansive overworld, either they&amp;#8217;ll figure out where to go eventually, or they&amp;#8217;ll give up and never see the rest of the game.  Losing players that way, especially in a story-driven game, is a huge&amp;nbsp;shame.&lt;/p&gt;
&lt;p&gt;And this is kind of a problem with the medium in general.  For all the lip service paid to nonlinearity and sandboxes, the vast majority of games require some core progression that&amp;#8217;s purely linear.  You may be able to wander around a huge overworld, but you still &lt;em&gt;must&lt;/em&gt; complete these dungeons and quests in this specific order.  If something prevents you from doing one of them, you won&amp;#8217;t be able to experience the others.  You have to do all of the first &lt;em&gt;x&lt;/em&gt; parts of the game before you can see part &lt;em&gt;x + 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is really weird!  No other media is like this.  If you watch a movie or read a book or listen to a song and some part of it is inaccessible for whatever reason — the plot is poorly explained, a joke goes over your head, the lyrics are mumbled — you can still &lt;em&gt;keep going&lt;/em&gt; and experience the rest.  The stuff that comes later might even help you make sense of the part you didn&amp;#8217;t&amp;nbsp;get.&lt;/p&gt;
&lt;p&gt;In games, these little bumps in the road can become &lt;em&gt;walls&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not even necessarily difficulty, or getting lost, or whatever.  A lot of mobile puzzle games use the same kind of artificial progression where you can only do puzzles in sequential batches; solving enough of the available puzzles will unlock the next batch.  But in the interest of padding out the length, many of these games will have &lt;em&gt;dozens&lt;/em&gt; of trivially easy and nearly identical puzzles in the beginning, which you &lt;em&gt;have&lt;/em&gt; to solve to get to the later interesting ones.  Sometimes I&amp;#8217;ve gotten so bored by this that I&amp;#8217;ve given up on a game before reaching the interesting&amp;nbsp;puzzles.&lt;/p&gt;
&lt;p&gt;In a way, that&amp;#8217;s the same problem as getting lost in an overworld.  Getting lost isn&amp;#8217;t a hard wall, after all — you can always do an exhaustive search and talk to every &lt;span class="caps"&gt;NPC&lt;/span&gt; twice.  But that takes time, and it&amp;#8217;s not fun, much like the batches of required baby puzzles.  People generally don&amp;#8217;t like playing games that waste their&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I love the Picross &amp;#8220;e&amp;#8221; series on the &lt;span class="caps"&gt;3DS&lt;/span&gt;, because over time they&amp;#8217;ve largely figured out that this is pointless: in the latest game in the series, everything is available from the beginning.  Want to do easy puzzles?  Do easy puzzles.  Want to skip right to the hard stuff?  Sure, do that.  Don&amp;#8217;t like being told when you made a wrong move?  Turn it&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;(It&amp;#8217;s kinda funny that the same people then made Pokémon Picross, which has some of the most absurd progression I&amp;#8217;ve ever seen.  Progressing beyond the first half-dozen puzzles requires spending &lt;em&gt;weeks&lt;/em&gt; doing a boring minigame every day to grind enough pseudocurrency to unlock more puzzles.  Or you can just pay for pseudocurrency, and you&amp;#8217;ll have unlocked pretty much the whole game instantly.  It might as well just be a demo; the non-paid progression is&amp;nbsp;useless.)&lt;/p&gt;
&lt;p&gt;Chip&amp;#8217;s Challenge also handled this pretty well.  You couldn&amp;#8217;t skip around between levels arbitrarily, which was somewhat justified by the (very light) plot.  Instead, if you died or restarted enough times, the game would offer to skip you to the next level, and that would be that.  You weren&amp;#8217;t denied the rest of the game just because you couldn&amp;#8217;t figure out an ice maze or complete some horrible nightmare like &lt;a href="http://chipschallenge.wikia.com/wiki/Blobnet"&gt;Blobnet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wish this sort of mechanic were more common.  Not so games could be more difficult, but so games wouldn&amp;#8217;t have to worry as much about erring on the side of ease.  I don&amp;#8217;t know how it could work for a story-driven game where much of the story is told via experiencing the game itself, though — skipping parts of Portal would work poorly.  On the other hand, Portal took the &lt;em&gt;very&lt;/em&gt; clever step of offering &amp;#8220;advanced&amp;#8221; versions of several levels, which were altered very slightly to break all the obvious easy&amp;nbsp;solutions.&lt;/p&gt;
&lt;p&gt;Slapping on difficulty settings is nice for non-puzzle games (and even some puzzle games), but unless your game lets you change the difficulty partway through, someone who hits a wall still has to replay the entire game to change the difficulty.  (Props to Doom 4, which looks to have taken difficulty levels very seriously — some have entirely different rules, and you can change whenever you&amp;nbsp;want.)&lt;/p&gt;
&lt;p&gt;I have a few wisps of ideas for how to deal with this in Isaac &lt;span class="caps"&gt;HD&lt;/span&gt;, but I can&amp;#8217;t really talk about them before the design of the game has solidified a little more.  Ultimately, my goal is the same as with everything else I do: to make something that people have a chance to enjoy, even if they don&amp;#8217;t otherwise like the&amp;nbsp;genre.&lt;/p&gt;</content><category term="tech"></category><category term="gamedev"></category><category term="making things"></category></entry><entry><title>Inktober</title><link href="https://eev.ee/blog/2016/10/23/inktober/" rel="alternate"></link><published>2016-10-23T23:37:00-07:00</published><updated>2016-10-23T23:37:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-10-23:/blog/2016/10/23/inktober/</id><summary type="html">&lt;p&gt;Inktober is an ancient and hallowed art tradition, dating all the way back to sometime, when it was started by someone.  The idea is simple: draw something in ink every day.  Real ink.  You know.  On&amp;nbsp;paper.&lt;/p&gt;
&lt;p&gt;I tried this last year.  I quit after four days.  Probably because I tried to do it without pencil sketches, and I&amp;#8217;m really not very good at drawing things correctly the first time.  I&amp;#8217;d hoped that forcing myself to do it would spark some improvement, but all it really produced was half a week of frustration and bad&amp;nbsp;artwork.&lt;/p&gt;
&lt;p&gt;This year, I was convinced to try again without unnecessarily handicapping myself, so I did that.  Three weeks and more than forty ink drawings later, here are some&amp;nbsp;thoughts.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Inktober is an ancient and hallowed art tradition, dating all the way back to sometime, when it was started by someone.  The idea is simple: draw something in ink every day.  Real ink.  You know.  On&amp;nbsp;paper.&lt;/p&gt;
&lt;p&gt;I tried this last year.  I quit after four days.  Probably because I tried to do it without pencil sketches, and I&amp;#8217;m really not very good at drawing things correctly the first time.  I&amp;#8217;d hoped that forcing myself to do it would spark some improvement, but all it really produced was half a week of frustration and bad&amp;nbsp;artwork.&lt;/p&gt;
&lt;p&gt;This year, I was convinced to try again without unnecessarily handicapping myself, so I did that.  Three weeks and more than forty ink drawings later, here are some&amp;nbsp;thoughts.&lt;/p&gt;


&lt;h2 id="some-background"&gt;&lt;a class="toclink" href="#some-background"&gt;Some&amp;nbsp;background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been &lt;a href="https://eev.ee/blog/2016/05/06/learning-to-draw-learning-to-learn/"&gt;drawing seriously since the beginning of 2015&lt;/a&gt;.  I spent the first few months working primarily in pencil, until I was gifted a hand-me-down tablet in March; almost everything has been digital since&amp;nbsp;then.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been fairly lax about learning to use color effectively — I have enough trouble just producing a sketch I like, so I&amp;#8217;ve mostly been trying to improve there.  Doesn&amp;#8217;t feel worth the effort to color a sketch I&amp;#8217;m not really happy with, and by the time I&amp;#8217;m really happy with it, I&amp;#8217;m itching to draw something else.  Whoops.  Until I get quicker or find some mental workaround, monochrome ink is a good direction to&amp;nbsp;try.&lt;/p&gt;
&lt;p&gt;I have an ongoing &lt;a href="https://lexyeevee.tumblr.com/tagged/daily-pok%C3%A9mon"&gt;&amp;#8220;daily&amp;#8221; pokémon series&lt;/a&gt;, so I&amp;#8217;ve been continuing that in ink.  (Everyone else seems to be using some list of single-word prompts, but I didn&amp;#8217;t even know about that until after I&amp;#8217;d started, so,&amp;nbsp;whoops.)&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve got a few things I want to get better&amp;nbsp;at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Detailing, whatever that means.  Part of the problem is that I&amp;#8217;m not sure what it means.  My art is fairly simple and cartoony, and I know it&amp;#8217;s possible to be more detailed without doing realistic shading, but I don&amp;#8217;t have a grasp of how to think about&amp;nbsp;that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better edges, which mostly means line weight.  I mentally categorize this as a form of &lt;em&gt;scale&lt;/em&gt;, which also includes tips like &amp;#8220;don&amp;#8217;t let parallel lines get too close together&amp;#8221; and &amp;#8220;don&amp;#8217;t draw one or two very small&amp;nbsp;details&amp;#8221;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better backgrounds and environments.  Or, let&amp;#8217;s be honest, &lt;em&gt;any&lt;/em&gt; backgrounds and environments — I draw an awful lot of single characters floating in an empty white void.  My fixed-size canvas presents an obvious and simple challenge: fill the&amp;nbsp;page!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More interesting poses, and relatedly, getting a better hang of anatomy.  I started drawing the pokémon series partly for this reason: a great many pokémon have really unusual shapes I&amp;#8217;ve tried drawing before.  Dealing with weird anatomy and trying to map it to my existing understanding should hopefully flex some visualization&amp;nbsp;muscles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lighting, probably?  I&amp;#8217;m aware that things not facing a light source are in shadow, but my understanding doesn&amp;#8217;t extend very far beyond that.  How does light affect a large outdoor area?  How can you represent the complexity of light and shadow with only a single pen?  Art, especially cartoony art, has an entire vocabulary of subtle indicators of shadow and volume that I don&amp;#8217;t know much&amp;nbsp;about.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s see what exactly I&amp;#8217;ve&amp;nbsp;learned.&lt;/p&gt;
&lt;h2 id="analog-materials-are-very-different"&gt;&lt;a class="toclink" href="#analog-materials-are-very-different"&gt;Analog materials are very&amp;nbsp;different&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-23-inktober/20161014-064-bergmite.jpg" alt="" title="Oct 14, 2016: Bergmite"&gt;
&lt;/div&gt;

&lt;p&gt;I&amp;#8217;ve drawn plenty of pencil sketches on paper, and I&amp;#8217;ve done a few watercolors, but I&amp;#8217;ve never done this volume of &amp;#8220;serious&amp;#8221; art on paper&amp;nbsp;before.&lt;/p&gt;
&lt;p&gt;All my inks so far are in a 3.5” × 5” sketchbook.  I&amp;#8217;ll run out of pages in a few days, at which point I&amp;#8217;ll finish up the month in a bigger sketchbook.  It&amp;#8217;s been a mixed blessing: I have less page to fill, but details are smaller and more fiddly, so mistakes are more obvious.  I also don&amp;#8217;t have much room for error with the&amp;nbsp;composition.&lt;/p&gt;
&lt;p&gt;I started out drawing with a small black Faber–Castell &amp;#8220;&lt;span class="caps"&gt;PITT&lt;/span&gt; artist pen&amp;#8221;.  Around day five, I borrowed C3 and C7 (light and dark cool greys) Copic sketch markers from Mel; later I got a C5 as well.  A few days ago I bought a Lamy Safari fountain pen with Noodler&amp;#8217;s Heart of Darkness&amp;nbsp;ink.&lt;/p&gt;
&lt;p&gt;Both the &lt;span class="caps"&gt;FC&lt;/span&gt; pen and the fountain pen are ultimately still pens, but they have some interesting differences in edge cases.  Used very lightly at an extreme angle, the &lt;span class="caps"&gt;FC&lt;/span&gt; pen produces very scratchy-looking lines&amp;#8230;  sometimes.  Sometimes it does nothing instead, and you must precariously tilt the pen until you find the magical angle, hoping you don&amp;#8217;t suddenly get a solid line where you didn&amp;#8217;t want it.  The Lamy has been much more consistent: it&amp;#8217;s a little more willing to draw thinner lines than it&amp;#8217;s intended for, and it hasn&amp;#8217;t created any unpleasant surprises.  The Lamy feels much smoother overall, like it &lt;em&gt;flows&lt;/em&gt;, which is appropriate since that&amp;#8217;s how fountain pens&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;Markers are interesting.  The last &amp;#8220;serious&amp;#8221; art I did on paper was watercolor, which is pretty fun — I can water a color down however much I want, and if I&amp;#8217;m lucky and fast, I can push color around on the paper a bit before it dries.  Markers, ah, not so much.  Copics are supposed to be blendable, but I&amp;#8217;ve yet to figure out how to make that happen.  It might be that my sketchbook&amp;#8217;s paper is too thin, but the ink seems to dry within seconds, too fast for me to switch markers and do much of anything.  For the same reason, I &lt;em&gt;have&lt;/em&gt; to color an area by&amp;#8230; &amp;#8220;flood-filling&amp;#8221;?  I can&amp;#8217;t let the edge of the colored area dry, or when I go back to extend that edge, I&amp;#8217;ll be putting down a second layer of ink and create an obvious dark band.  I&amp;#8217;ve learned to keep the edge wet as much as&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;On the plus side, going over dry ink in the same color will darken it, and I&amp;#8217;ve squeezed several different shades of gray out of just the light marker.  The brush tip can be angled in several different ways to make different shapes; I&amp;#8217;ve managed a grassy background and a fur texture just by holding the marker differently.  Marker ink does bleed very slightly, but it tends to stop at pen ink, a feature I&amp;#8217;ve wanted in digital art for at least a century.  I can also &lt;em&gt;kinda&lt;/em&gt; make strokes that fade out by moving the marker quickly and lifting it off the paper as I go; surely there are more clever things to be done here, but I&amp;#8217;ve yet to figure them&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;The drawing of bergmite above was done as the light marker started to run dry, which is not a problem I was expecting.  The marker still worked, but not very well.  The strokes on the cave wall in the background aren&amp;#8217;t a deliberate effect; those are the strokes the marker was making, and I tried to use them as best I could.  I didn&amp;#8217;t have the medium marker yet, and the dark marker is &lt;em&gt;very&lt;/em&gt; dark — almost black.  I&amp;#8217;d already started laying down marker, so I couldn&amp;#8217;t very well finish the picture with just the pen, and I had to&amp;nbsp;improvise.&lt;/p&gt;
&lt;h2 id="ink-is-permanent"&gt;&lt;a class="toclink" href="#ink-is-permanent"&gt;Ink is&amp;nbsp;permanent&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-23-inktober/20161005-045-floatzel.jpg" alt="" title="Oct 5, 2016: Floatzel"&gt;
&lt;/div&gt;

&lt;p&gt;Well.&amp;nbsp;Obviously.&lt;/p&gt;
&lt;p&gt;I have to be pretty careful about what I draw, which creates a bit of a conflict.  If I make smooth, confident strokes, I&amp;#8217;m likely to fuck them up, and I can&amp;#8217;t undo and try again.  If I make a lot of short strokes, I get those tell-tale amateurish scratchy lines.  If I trace my sketch very carefully and my hand isn&amp;#8217;t perfectly steady, the resulting line will be visibly&amp;nbsp;shaky.&lt;/p&gt;
&lt;p&gt;I probably exacerbated the shaky lines with my choice of relatively small paper; there&amp;#8217;s no buffer between those tiny wobbles and the smallest level of detail in the drawing itself.  I can&amp;#8217;t always even see where my tiny sketch is going, because my big fat fingers are in the&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also had the problem that my sketch is such a mess that I can&amp;#8217;t tell where a line is &lt;em&gt;supposed&lt;/em&gt; to be going&amp;#8230;  until I&amp;#8217;ve drawn it and it&amp;#8217;s obviously wrong.  Again, small paper exacerbates this by compressing&amp;nbsp;sketches.&lt;/p&gt;
&lt;p&gt;Since I can&amp;#8217;t fix mistakes, I&amp;#8217;ve had to be a little creative about papering over&amp;nbsp;them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I did one ink with very stark contrast: shadows were completely filled with ink, highlights were bare paper.  No shading, hatching, or other middle ground.  I&amp;#8217;d been meaning to try the approach anyway, but I finally did it after making three or four glaring mistakes.  In the final work, they&amp;#8217;re all hidden in shadow, so you can&amp;#8217;t really tell anything ever went&amp;nbsp;wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;#8217;ve managed to disguise several mistakes of the &amp;#8220;curved this line too early&amp;#8221; variety just by adding some more parallel strokes and pretending I intended to hatch it all&amp;nbsp;along.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One of the things I&amp;#8217;ve been trying to figure out is varying line weight, and one way to vary it is to make edges thicker when in shadows.  A clever hack has emerged&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;You see, it&amp;#8217;s much easier for me to draw an upwards arc than a downwards arc.  (I think this is fairly universal?)  I can of course just rotate the paper, but if I&amp;#8217;m drawing a cylinder, it&amp;#8217;s pretty obvious when the top was drawn with a slight bias in one direction and the bottom was drawn with a slight bias in the other&amp;nbsp;direction.&lt;/p&gt;
&lt;p&gt;My lifehack is to draw the top and bottom with the paper oriented the same way, then gradually thicken the bottom, &amp;#8220;carving&amp;#8221; it into the right shape as I go.  I can make a lot of small adjustments and still end up with a single smooth line that looks more or less&amp;nbsp;deliberate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a last resort&amp;#8230;  leave it and hope no one notices.  That&amp;#8217;s what I did for the floatzel above, who has a big fat extra stroke across their lower stomach.  It&amp;#8217;s in one of the least interesting parts of the picture, though, so it doesn&amp;#8217;t really stand out, even though it&amp;#8217;s on one of the lightest&amp;nbsp;surfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ink-takes-a-while"&gt;&lt;a class="toclink" href="#ink-takes-a-while"&gt;Ink takes a&amp;nbsp;while&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-23-inktober/20161002-040-gardevoir.jpg" alt="" title="Oct 2, 2016: Gardevoir"&gt;
&lt;/div&gt;

&lt;p&gt;Ink drawings feel like they&amp;#8217;ve consumed my entire &lt;em&gt;month&lt;/em&gt;.  Sketching and then lining means drawing everything twice.  Using physical ink means I have to &lt;em&gt;nail&lt;/em&gt; the sketch — but I&amp;#8217;m used to digital, where I can sketch sloppily and then fixing up lines as I go.  I also can&amp;#8217;t rearrange the sketch, move it around on the paper if I started in the wrong place, or even erase precisely, so I&amp;#8217;ve had to be much more careful and thoughtful even with pencil.  That&amp;#8217;s a &lt;em&gt;good&lt;/em&gt; thing — I don&amp;#8217;t put nearly enough conscious thought into what I&amp;#8217;m drawing — but it definitely takes longer.  In a few thorny cases I&amp;#8217;ve even resorted to doing a very loose digital sketch, then drawing the pencil sketch based off of&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;All told, each one takes maybe two hours, and I&amp;#8217;ve been doing two at a time&amp;#8230;  but wait, that&amp;#8217;s still only four hours, right?  How are they taking most of a&amp;nbsp;day?&lt;/p&gt;
&lt;p&gt;I suspect a bunch of factors are costing me more time than expected.  If I can&amp;#8217;t think of a scene idea, I&amp;#8217;ll dawdle on Twitter for a while.  Two &amp;#8220;serious&amp;#8221; attempts in a medium I&amp;#8217;m not used to can be a little draining and require a refractory period.  Fragments of time between or around two larger tasks are, of course, lost forever.  And I guess there&amp;#8217;s that whole thing where I spent half the month waking up in the middle of the night for no reason and then being exhausted by late&amp;nbsp;evening.&lt;/p&gt;
&lt;p&gt;Occasionally I&amp;#8217;ve experimented with some approach that turns out to be incredibly tedious and time-consuming, like the early Gardevoir above.  You would not &lt;em&gt;believe&lt;/em&gt; how long that damn grass took.  Or maybe you would, if you&amp;#8217;d ever tried similar.  Even the much lazier tree-covered mountain in the background seemed to take a while.  And this is on a fairly small&amp;nbsp;canvas!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m feeling a bit exhausted with ink work at this point, which is not the best place to be after buying a bunch of ink supplies.  I definitely want to do more of it in the future, but maybe not &lt;em&gt;daily&lt;/em&gt;.  I also miss being able to undo.  Sweet, sweet&amp;nbsp;undo.&lt;/p&gt;
&lt;h2 id="precision-is-difficult-and-i-am-bad-at-planning"&gt;&lt;a class="toclink" href="#precision-is-difficult-and-i-am-bad-at-planning"&gt;Precision is difficult, and I am bad at&amp;nbsp;planning&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-23-inktober/20161004-043-phantump.jpg" alt="" title="Oct 4, 2016: Phantump"&gt;
&lt;/div&gt;

&lt;p&gt;These turn out to be largely the same&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not a particularly patient person, so I like to jump from the sketch into the inking as soon as possible.  Sometimes this means I overlook some details.  Here&amp;#8217;s that whole &amp;#8220;not consciously thinking enough&amp;#8221; thing again.  Consider, in the above&amp;nbsp;image,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The two buildings at the top right are next to each other, yet the angles of their roofs suggest they&amp;#8217;re facing in slightly different directions, which doesn&amp;#8217;t make a lot of sense for artificial&amp;nbsp;structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The path leading from the dock doesn&amp;#8217;t quite make sense, and the general scale of the start of the dock versus the shrubs and trees is nonsense.  The trees themselves are pretty cool, but it looks like I plopped them down individually without really having a full coherent plan going in.  Which is exactly what&amp;nbsp;happened.&lt;/p&gt;
&lt;p&gt;Imagining spaces in enough detail to draw them is &lt;em&gt;tough&lt;/em&gt;, and not something I&amp;#8217;ve really had to do much before.  It&amp;#8217;s ultimately the same problem I have with game level design, though, so hopefully a breakthrough in one will help me with the&amp;nbsp;other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Phantump&amp;#8217;s left eye has a clear white edge showing the depth of the hole in the trunk, but the right eye&amp;#8217;s edge was mostly lost to some errant strokes and subsequent attempts to fix them.  Also, even the left margin is nowhere near as thick as the trunk&amp;#8217;s &lt;em&gt;bottom&lt;/em&gt;&amp;nbsp;edge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The crosshatched top of phantump&amp;#8217;s head blends into the noisy grassy background.  The fix for this is to leave a thin white edge around the top of the head.  I think I &lt;em&gt;intended&lt;/em&gt; to do this, then completely forgot about it as I was drawing the grass.  I suppose I&amp;#8217;m not used to reasoning about negative space; I can&amp;#8217;t mark or indicate it in any way, nor erase the ink if I later realize I laid down too&amp;nbsp;much.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The pupils don&amp;#8217;t &lt;em&gt;quite&lt;/em&gt; match, but I&amp;#8217;d already carved them down a good bit.  Negative space problem again.  Highlights on dark areas have been a recurring problem all month, especially with&amp;nbsp;markers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have no idea how people make beautifully precise inkwork.  At the same time, I&amp;#8217;ve long had the suspicion that I worry too &lt;em&gt;much&lt;/em&gt; about precision and should be a lot looser.  I&amp;#8217;m missing something here, and I don&amp;#8217;t know what it&amp;nbsp;is.&lt;/p&gt;
&lt;h2 id="what-even-is-pokemon-anatomy"&gt;&lt;a class="toclink" href="#what-even-is-pokemon-anatomy"&gt;What even is pokémon&amp;nbsp;anatomy&lt;/a&gt;&lt;/h2&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-23-inktober/20161008-051-wigglytuff.jpg" alt="" title="Oct 8, 2016: Wigglytuff"&gt;
&lt;/div&gt;

&lt;p&gt;This is a wigglytuff.  Wigglytuffs are tall blobs with&amp;nbsp;ears.&lt;/p&gt;
&lt;p&gt;I had &lt;em&gt;such a hard time&lt;/em&gt; sketching this.  (Probably why I rushed the&amp;nbsp;background.)&lt;/p&gt;
&lt;p&gt;It turns out that if you draw a wigglytuff even slightly off, the result is &lt;em&gt;a tall blob with ears&lt;/em&gt; rather than a wigglytuff.  That makes no sense, especially given that wigglytuffs are &lt;em&gt;balloons&lt;/em&gt;.  Surely, the shape shouldn&amp;#8217;t be such a strong part of the wigglytuff identity, and yet it&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Maybe half of the pokémon I&amp;#8217;ve drawn have had some anatomical surprise, even ones I thought I was familiar with.  Aerodactyl and huntail have a really pronounced lower jaw.  Palpitoad has no arms at all.  Pelipper is 70% mouth.  Zangoose seems like a straightforward mammal at first glance, but the legs and body and head are all kind of a single blob.  Numerous pokémon have no distinct neck, or no distinct shoulders, or a very round abdomen with legs kind of arbitrarily attached&amp;nbsp;somewhere.&lt;/p&gt;
&lt;h2 id="progress-maybe"&gt;&lt;a class="toclink" href="#progress-maybe"&gt;Progress,&amp;nbsp;maybe&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;#8217;t know what precisely I&amp;#8217;ve gotten out of this experience.  I can&amp;#8217;t measure artistic progress from one day to the next.  I do feel like I&amp;#8217;ve gleaned some things, but they seem to be very abstract things.  I&amp;#8217;m out of the total beginner weeds and solidly into the intermediate hell of just picking up hundreds of little things no one really talks about.  All I can do is cross my fingers and push&amp;nbsp;forwards.&lt;/p&gt;
&lt;p&gt;The crowd favorite so far is this mega rayquaza, which is kinda funny to me because I don&amp;#8217;t feel like I did anything special here.  I just copied a bunch of fiddly details.  It looks cool, but it felt more like rote work than a struggle to do a new&amp;nbsp;thing.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-23-inktober/20161011-057-mega-rayquaza.jpg" alt="" title="Oct 11, 2016: Mega Rayquaza"&gt;
&lt;/div&gt;

&lt;p&gt;My own favorite is this much simpler qwilfish.  It&amp;#8217;s the culmination of several attempts to draw water that I liked, and it came out the best by far.  The highlight is also definitely the best I&amp;#8217;ve drawn this month.  Interesting how that works&amp;nbsp;out.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-23-inktober/20161013-062-qwilfish.jpg" alt="" title="Oct 13, 2016: Qwilfish"&gt;
&lt;/div&gt;

&lt;p&gt;The rest are on &lt;a href="https://lexyeevee.tumblr.com/tagged/daily-pok%C3%A9mon"&gt;on Tumblr&lt;/a&gt;, or in &lt;a href="https://twitter.com/eevee/status/790367777362026496"&gt;this single Twitter thread&lt;/a&gt;.&lt;/p&gt;</content><category term="making things"></category></entry><entry><title>Word-wrapping dialogue</title><link href="https://eev.ee/blog/2016/10/20/word-wrapping-dialogue/" rel="alternate"></link><published>2016-10-20T22:50:00-07:00</published><updated>2016-10-20T22:50:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-10-20:/blog/2016/10/20/word-wrapping-dialogue/</id><summary type="html">&lt;p&gt;I have a teeny tiny pet peeve with dialogue boxes.  Er, not &lt;em&gt;dialog&lt;/em&gt; boxes — dialogue boxes, the ones in video games with scrolling lines of&amp;nbsp;dialogue.&lt;/p&gt;

&lt;img src="https://eev.ee/media/2016-10-20-dialogue/dialogue-bad.gif" alt="A fake dialogue box, with scrolling text that jumps when it wraps"&gt;


&lt;p&gt;I recently wrote a dialogue box, and I saw a game that made this mistake, so here&amp;#8217;s a post about&amp;nbsp;it.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I have a teeny tiny pet peeve with dialogue boxes.  Er, not &lt;em&gt;dialog&lt;/em&gt; boxes — dialogue boxes, the ones in video games with scrolling lines of&amp;nbsp;dialogue.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-20-dialogue/dialogue-bad.gif" alt="A fake dialogue box, with scrolling text that jumps when it wraps"&gt;
&lt;/div&gt;

&lt;p&gt;I recently wrote a dialogue box, and I saw a game that made this mistake, so here&amp;#8217;s a post about&amp;nbsp;it.&lt;/p&gt;


&lt;h2 id="obvious-simple-but-wrong"&gt;&lt;a class="toclink" href="#obvious-simple-but-wrong"&gt;Obvious, simple, but&amp;nbsp;wrong&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s a live example of the above animation.  (You can double-click on any of these to restart&amp;nbsp;them.)&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;iframe src="https://eev.ee/media/2016-10-20-dialogue/dialogue-bad.html" width="600" height="200"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;And the code responsible.  I wrote this in the form of a fairly generic &lt;code&gt;update()&lt;/code&gt; function, rather than in terms of &lt;code&gt;requestAnimationFrame&lt;/code&gt;, to minimize the &lt;span class="caps"&gt;DOM&lt;/span&gt;-specific stuff.  All the &lt;span class="caps"&gt;JS&lt;/span&gt; in this post is vanilla &lt;span class="caps"&gt;DOM&lt;/span&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Demonstrating inadequate word-wrapping functionality necessitates conspicuously verbose representative scripture.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;SPEED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// characters per second&lt;/span&gt;

&lt;span class="c1"&gt;// Number of characters currently visible&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Elapsed time * SPEED, so every time this value increases by&lt;/span&gt;
&lt;span class="c1"&gt;// 1, one more character should be displayed&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;SPEED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Don&amp;#39;t count spaces as characters&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Stop updating once we run out of text&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you&amp;#8217;ve ever written dialogue handling code, this shouldn&amp;#8217;t be too surprising.  Multiplying &lt;code&gt;dt&lt;/code&gt; (seconds) by &lt;code&gt;SPEED&lt;/code&gt; (characters per second) produces a number of characters, so whenever &lt;code&gt;timer&lt;/code&gt; is at least 1, another character should be displayed.  Spaces are counted as &amp;#8220;free&amp;#8221;; otherwise, the scrolling would seem to pause between&amp;nbsp;words.&lt;/p&gt;
&lt;p&gt;(The above code has a bug, as does most &amp;#8220;string&amp;#8221; manipulation code in JavaScript: it cuts astral plane characters in half, briefly displaying garbage.  Fixing this is left as an&amp;nbsp;exercise.)&lt;/p&gt;
&lt;p&gt;The problem, of course, is that the resulting text looks like this on successive frames, where the &lt;code&gt;|&lt;/code&gt;s mark the edges of the&amp;nbsp;box:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;|Demonstrating inadequate word-wra |&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|Demonstrating inadequate word-wrap|&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|Demonstrating inadequate          |&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;|word-wrapp                        |&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And so on.  The renderer has no way of knowing that &amp;#8220;word-wrap&amp;#8221; is only part of a longer word, so it merrily puts everything on one line.  The player then sees half a word abruptly jump to a new line, and judges you harshly for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Depending on your environment, you can solve this one of two ways, or not-solve it a third&amp;nbsp;way.&lt;/p&gt;
&lt;h2 id="render-everything-but-only-draw-some-of-it"&gt;&lt;a class="toclink" href="#render-everything-but-only-draw-some-of-it"&gt;Render everything, but only draw some of&amp;nbsp;it&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This works well in browser-based games, where you have a comically powerful text rendering engine at your fingertips.  In graphics-oriented engines that don&amp;#8217;t offer any text rendering beyond &amp;#8220;print this text to the screen somewhere&amp;#8221;, this approach may not be&amp;nbsp;practical.&lt;/p&gt;
&lt;p&gt;The idea is to always &amp;#8220;draw&amp;#8221; the entire phrase, but implement scrolling by making it partially invisible.  Consider this &lt;span class="caps"&gt;HTML&lt;/span&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;visible&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Demonstra&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;invisible&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ting&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Even though the word is split across two tags, the browser must still treat it as a single word, because there&amp;#8217;s no space anywhere.  So the phrase will be word-wrapped correctly from the beginning, and the problem is&amp;nbsp;solved.&lt;/p&gt;
&lt;p&gt;You could implement this with &lt;em&gt;only&lt;/em&gt; two &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s, as above, but that forces the browser to reflow the text every single frame.  It probably doesn&amp;#8217;t make a visible difference, but I prefer to wrap &lt;em&gt;each character&lt;/em&gt; in its own &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and simply make them visible one at a time.  As a minor bonus, you can put whitespace in the same &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; as the preceding letter, and you won&amp;#8217;t have to worry about it within your update&amp;nbsp;loop.&lt;/p&gt;
&lt;p&gt;Also, if your text contains formatting — i.e., more &lt;span class="caps"&gt;HTML&lt;/span&gt; — then one &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; per character is &lt;em&gt;much&lt;/em&gt; simpler to deal with.  (Dealing with it is left as an&amp;nbsp;exercise.)&lt;/p&gt;
&lt;p&gt;Here it is&amp;nbsp;live:&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;iframe src="https://eev.ee/media/2016-10-20-dialogue/dialogue-html.html" width="600" height="200"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Demonstrating inadequate word-wrapping functionality necessitates conspicuously verbose representative scripture.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;SPEED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// characters per second&lt;/span&gt;

&lt;span class="c1"&gt;// The first invisible letter &amp;lt;span&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;next_letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Setup: populate the element with the entire phrase,&lt;/span&gt;
    &lt;span class="c1"&gt;// split into characters, each wrapped in a &amp;lt;span&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;js-invisible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Also include any following whitespace&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;next_letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Elapsed time * SPEED, so every time this value increases by&lt;/span&gt;
&lt;span class="c1"&gt;// 1, one more character should be displayed&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;SPEED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;next_letter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;js-invisible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;next_letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next_letter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextSibling&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Stop updating once we run out of text&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next_letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I added an &lt;code&gt;init()&lt;/code&gt; function (called from a &lt;code&gt;load&lt;/code&gt; handler, not shown here) to do the setup and split the string into a series of &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s.  (If you wanted to be especially clever, you could use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt; &lt;span class="caps"&gt;API&lt;/span&gt; here, but I&amp;#8217;m not sure it&amp;#8217;d make a real difference.)  The main loop becomes much simpler: rather than counting characters, it can use the &lt;span class="caps"&gt;DOM&lt;/span&gt; tree &lt;span class="caps"&gt;API&lt;/span&gt; and hop from one &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; to the next with &lt;code&gt;.nextSibling&lt;/code&gt;.  Once you hit &lt;code&gt;null&lt;/code&gt;, you&amp;#8217;ve run out of characters, so you&amp;#8217;re&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;CSS&lt;/span&gt; is&amp;nbsp;merely:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;js-invisible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Be sure to use &lt;code&gt;visibility: hidden;&lt;/code&gt; here and &lt;strong&gt;&lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt; &lt;code&gt;display: none;&lt;/code&gt;!  The latter tells the browser to &lt;em&gt;ignore&lt;/em&gt; the hidden characters while rendering, which defeats the whole purpose of having&amp;nbsp;them.&lt;/p&gt;
&lt;h2 id="hard-wrap-ahead-of-time"&gt;&lt;a class="toclink" href="#hard-wrap-ahead-of-time"&gt;Hard wrap ahead of&amp;nbsp;time&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The other fix is to keep drawing one character at a time, but split the phrase into lines &lt;em&gt;once&lt;/em&gt; ahead of&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt; use your programming language&amp;#8217;s standard library to do this.  &lt;strong&gt;&lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt; just Google for code that does this.  You will get something that word wraps based on &lt;em&gt;number of characters&lt;/em&gt; without taking the &lt;em&gt;font&lt;/em&gt; into account, and the results will be&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt; fudge it by guessing the width of the &amp;#8220;average&amp;#8221; character.  You will hit edge cases, and they will look&amp;nbsp;ridiculous.&lt;/p&gt;
&lt;p&gt;Find something in your &lt;em&gt;graphics library&lt;/em&gt; to do this for you.  For example, LÖVE has the poorly-named &lt;a href="https://love2d.org/wiki/Font:getWrap"&gt;&lt;code&gt;Font:getWrap&lt;/code&gt;&lt;/a&gt;: it takes a string of text and a width, and it returns a set of wrapped strings, one per&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;(Of course, if your font is monospace and will always be monospace, feel free to do naïve&amp;nbsp;word-wrap.)&lt;/p&gt;
&lt;p&gt;Font-aware word-wrapping is surprisingly difficult in JavaScript, even though it&amp;#8217;s sitting on top of a glorified text renderer, so in the following example I&amp;#8217;ve totally fudged it.  It may not work the same way on your screen that it does on mine, which is why you shouldn&amp;#8217;t be fudging&amp;nbsp;it.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;iframe src="https://eev.ee/media/2016-10-20-dialogue/dialogue-love.html" width="600" height="200"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Demonstrating inadequate word-wrapping functionality necessitates conspicuously verbose representative scripture.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;SPEED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// characters per second&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is hard in JavaScript, so just pretend there&amp;#39;s&lt;/span&gt;
    &lt;span class="c1"&gt;// an API to do it for us&lt;/span&gt;
    &lt;span class="c1"&gt;//var lines = magical_word_wrap_api(TEXT);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Demonstrating inadequate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;word-wrapping functionality&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;necessitates conspicuously verbose&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;representative scripture.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Number of characters currently visible&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Elapsed time * SPEED, so every time this value increases by&lt;/span&gt;
&lt;span class="c1"&gt;// 1, one more character should be displayed&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;SPEED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Don&amp;#39;t count spaces as characters&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\S/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Stop updating once we run out of text&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This code is fairly similar to the original, since the basic idea is the same.  All I did was add the &lt;code&gt;init()&lt;/code&gt; step and change the space code to also skip over&amp;nbsp;newlines.&lt;/p&gt;
&lt;p&gt;And, hm, that&amp;#8217;s all there is to it,&amp;nbsp;really.&lt;/p&gt;
&lt;h2 id="the-desperate-approach"&gt;&lt;a class="toclink" href="#the-desperate-approach"&gt;The desperate&amp;nbsp;approach&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Maybe you don&amp;#8217;t have a fancy text rendering engine, &lt;em&gt;and&lt;/em&gt; you don&amp;#8217;t have any way to correctly break the text, &lt;em&gt;and&lt;/em&gt; you&amp;#8217;re dead set on using a proportional&amp;nbsp;font.&lt;/p&gt;
&lt;p&gt;At this point I would be questioning some of the decisions that had brought me to this point in my life, but you do still have one final recourse.  The classic solution, dating back decades.  Pokémon did it.  Come to think of it, Pokémon might still do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;What you do is: manually include line breaks in your dialogue.  All of it.&amp;nbsp;Everywhere.&lt;/p&gt;
&lt;p&gt;That is, instead of&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var TEXT = &amp;quot;Demonstrating inadequate word-wrapping functionality necessitates conspicuously verbose representative scripture.&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You will need to literally have&amp;nbsp;this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var TEXT = &amp;quot;Demonstrating inadequate\nword-wrapping functionality\nnecessitates conspicuously verbose\nrepresentative scripture.&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Have&amp;nbsp;fun.&lt;/p&gt;
&lt;h2 id="yeah"&gt;&lt;a class="toclink" href="#yeah"&gt;Yeah&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope at least one person reads this and goes to fix the word-wrapping in their scrolling dialogue.  I&amp;#8217;ll have made the world a slightly better place.&amp;nbsp;🌈&lt;/p&gt;</content><category term="tech"></category><category term="gamedev"></category></entry><entry><title>Doom scale</title><link href="https://eev.ee/blog/2016/10/10/doom-scale/" rel="alternate"></link><published>2016-10-10T20:26:00-07:00</published><updated>2016-10-10T20:26:00-07:00</updated><author><name>Eevee</name></author><id>tag:eev.ee,2016-10-10:/blog/2016/10/10/doom-scale/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been dipping my toes into Doom mapping again recently.  Obviously I&amp;#8217;ve &lt;a href="https://eev.ee/blog/2016/03/31/i-made-a-doom-level/"&gt;done it successfully once before&lt;/a&gt;, but I&amp;#8217;m having trouble doing it a second&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I have three major problems: drawing everything too small, drawing everything too rectangular, and completely blanking on what to do next.  Those last two are a bit tricky, but struggling with scale?  That sounds like a problem I can easily solve with &lt;em&gt;charts&lt;/em&gt; and &lt;em&gt;diagrams&lt;/em&gt; and &lt;em&gt;math&lt;/em&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been dipping my toes into Doom mapping again recently.  Obviously I&amp;#8217;ve &lt;a href="https://eev.ee/blog/2016/03/31/i-made-a-doom-level/"&gt;done it successfully once before&lt;/a&gt;, but I&amp;#8217;m having trouble doing it a second&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I have three major problems: drawing everything too small, drawing everything too rectangular, and completely blanking on what to do next.  Those last two are a bit tricky, but struggling with scale?  That sounds like a problem I can easily solve with &lt;em&gt;charts&lt;/em&gt; and &lt;em&gt;diagrams&lt;/em&gt; and &lt;em&gt;math&lt;/em&gt;.&lt;/p&gt;


&lt;h2 id="some-fundamental-metrics"&gt;&lt;a class="toclink" href="#some-fundamental-metrics"&gt;Some fundamental&amp;nbsp;metrics&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Doom&amp;#8217;s mapping rules and built-in textures offer a few fixed reference&amp;nbsp;points.&lt;/p&gt;
&lt;p&gt;The z planes — floor and ceiling — are a 64×64 grid anchored at the origin.  All &amp;#8220;flat&amp;#8221; textures are aligned to this grid.  (ZDoom lets you rotate, scale, and offset flats, but in vanilla Doom, you sometimes have to design architecture around texture&amp;nbsp;alignment.)&lt;/p&gt;
&lt;p&gt;All actors (objects) are square and axis-aligned.  Doomguy is 32×56.  However, it&amp;#8217;s very difficult for an actor to move down a corridor of the same width, and the axis-alignment means a 32-unit square couldn&amp;#8217;t fit down a 32-unit diagonal hallway.  (It&amp;#8217;s rare to see a hallway narrower than 64 or a room height shorter than&amp;nbsp;64.)&lt;/p&gt;
&lt;p&gt;The viewport is 41 pixels above the ground.  Doomguy&amp;#8217;s maximum step height is 24, which is actually fairly large, almost half his height.  Doomguy can balance on a ledge of any&amp;nbsp;width.&lt;/p&gt;
&lt;p&gt;The vast majority of Doom&amp;#8217;s wall textures are 64×128.  A few larger textures are 128×128, and a handful of very large outdoor textures are 256×128.  A few &amp;#8220;strut&amp;#8221; textures and door borders are 8 or 16 wide.  Some interesting&amp;nbsp;exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DOOR3&lt;/code&gt;, the door you appear to have entered from in many Doom maps, is 64×72.  So is &lt;code&gt;DOOR1&lt;/code&gt;.  &lt;code&gt;EXITDOOR&lt;/code&gt; has some extra stuff on it, but the actual door part is also&amp;nbsp;64×72.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BIGDOOR1&lt;/code&gt;, the silver door with the &lt;span class="caps"&gt;UAC&lt;/span&gt; logo on it, is&amp;nbsp;128×96.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MIDBARS3&lt;/code&gt; is a railing texture that&amp;#8217;s&amp;nbsp;64×72.&lt;/li&gt;
&lt;li&gt;The Icon of Sin is built out of a 3x3 grid of textures.  The full image is&amp;nbsp;768×384.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXITSIGN&lt;/code&gt; is 64×16, though only half of it is the actual part that says &amp;#8220;&lt;span class="caps"&gt;EXIT&lt;/span&gt;&amp;#8221;; the rest is the sides of the&amp;nbsp;sign.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;STEP&lt;/code&gt; textures are all 16&amp;nbsp;high.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since Doom&amp;#8217;s textures tend to be 128 tall, we can conclude that a standard room tends to be no more than 128 tall.  Any more and the texture would start to tile, which works poorly with a lot of&amp;nbsp;textures.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;&lt;a class="toclink" href="#the-problem"&gt;The&amp;nbsp;problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Vertical distance is fine.  Doom doesn&amp;#8217;t have a lot of vertical movement, so vertical distances tend not to get too outlandish in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;The trouble is that I don&amp;#8217;t know how big &lt;em&gt;spaces&lt;/em&gt; are.  I draw rooms and they turn out, much later, to be far too cramped.  I draw buildings and outdoor areas and they turn out to not really have enough space to fit everything I&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;An obvious approach is to find a conversion between Doom units and real-world units, then judge distances based on real-world units.  That sounds great, but I don&amp;#8217;t have a good sense of real-world units, either.  How big is the room I&amp;#8217;m in now?  Somewhere between ten and a hundred feet, I guess?  Thirty?  How much is thirty feet, is that a&amp;nbsp;lot?&lt;/p&gt;
&lt;p&gt;How long is my car, say?  I guess two of me could lie down end-to-end beside it, so that&amp;#8217;s twelve feet?  That sounds like I&amp;#8217;m underestimating.  Fifteen?  Are these reasonable guesses?  I don&amp;#8217;t&amp;nbsp;know.&lt;/p&gt;
&lt;p&gt;Hm, well.  The answer turns out to be exactly halfway between at thirteen and a half feet, so I don&amp;#8217;t know what we&amp;#8217;ve learned here&amp;nbsp;exactly.&lt;/p&gt;
&lt;p&gt;Okay, so let&amp;#8217;s consider in terms of architecture.  How long is the quiet residential street in front of my house?  I have &lt;em&gt;no idea&lt;/em&gt;.  The next biggest thing is a house, and I don&amp;#8217;t know how wide a house is, or how many houses there are on this street.  I could estimate the street in terms of house lengths, and estimate a house in terms of car lengths, and estimate a car length in terms of my height, but that&amp;#8217;s enough wild guesses that the final answer could be a whole order of magnitude&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;I never have any reason to appreciate or internalize length measurements, especially moderately large ones.  I have no reference&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;Also, Doom&amp;#8217;s grid and texture sizes mean that everything is done in multiples of powers of two.  I know the powers of two, but I don&amp;#8217;t actually know every single multiple of 64 up to 32768, so I occasionally run into the problem that the numbers lose all meaning.  How many 64s are in 768,&amp;nbsp;again&amp;#8230;?&lt;/p&gt;
&lt;h2 id="also-doom-doesnt-make-any-sense"&gt;&lt;a class="toclink" href="#also-doom-doesnt-make-any-sense"&gt;Also, Doom doesn't make any&amp;nbsp;sense&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The other problem with relating to real-world sizes is that it assumes there&amp;#8217;s a way to convert between Doom and the real world.  Alas, the universe of Doom has much more in common with the exaggerated and cartoony scale of platformers than with the hyper-realism in modern&amp;nbsp;shooters.&lt;/p&gt;
&lt;p&gt;Consider Doomguy.  Here&amp;#8217;s his default forward-facing sprite, &lt;code&gt;PLAYA1&lt;/code&gt;.  The pink area is his 32×56 collision box, the red dot is where he fires from, and the yellow dot is the location of the&amp;nbsp;viewport.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-10-doom-metrics/doomguy.png" alt="Doomguy and some of his measurements"&gt;
&lt;/div&gt;

&lt;p&gt;The collision box is the same height as the sprite itself, but it gets shifted upwards slightly because of the sprite offsets.  (Every sprite has an offset indicating where its bottom center is, since that&amp;#8217;s where the game tracks an object&amp;#8217;s position.  If Doomguy&amp;#8217;s sprite were just drawn from the bottom, he&amp;#8217;d look like he were standing on his&amp;nbsp;tiptoes.)&lt;/p&gt;
&lt;p&gt;It is generally accepted — by which I mean &amp;#8220;&lt;a href="https://doomwiki.org/wiki/Map_unit"&gt;Doom Wiki says so&lt;/a&gt;&amp;#8221; — that 32 units of height correspond to one meter (39&amp;#8221;), which makes Doomguy about 5 feet 8 inches tall.  It also makes him one meter wide, which seems rather extreme.  The usual handwave is to say that vertical and horizontal scales are different (because pixels weren&amp;#8217;t square in the original game), so 32 units of &lt;em&gt;width&lt;/em&gt; correspond to ¾ of a meter (just shy of&amp;nbsp;30&amp;#8221;).&lt;/p&gt;
&lt;p&gt;That doesn&amp;#8217;t really make sense to me.  If the architecture were truly distorted to compensate for the pixel size, then surely wall textures would be, too.  They aren&amp;#8217;t.  Switches are perfect 32×32 squares.  Several floor textures also exist separately as wall textures, and they weren&amp;#8217;t distorted in any way.  This is a cute explanation that neatly ties together several bits of Doom trivia, but I don&amp;#8217;t think it was a deliberate design&amp;nbsp;decision.&lt;/p&gt;
&lt;p&gt;Plus, according to this sprite, Doomguy&amp;#8217;s collision box is significantly wider than his actual appearance.  I don&amp;#8217;t know why this is — perhaps the extra space is where he keeps his hundred rockets and half a dozen spare weapons.  If we&amp;#8217;re interested in aesthetics, surely we should be going by Doomguy&amp;#8217;s sprite rather than his in-game&amp;nbsp;dimensions.&lt;/p&gt;
&lt;p&gt;More importantly&amp;#8230;  this weird ratio still doesn&amp;#8217;t jive with most &lt;em&gt;architecture&lt;/em&gt;.  Consider the fast skinny doors introduced in Doom &lt;span class="caps"&gt;II&lt;/span&gt;, which are 64×128.  At 32u = 1m, those are two meters wide and four meters tall, or 78&amp;#8221; × 157&amp;#8221;.  The Internet tells me that &lt;a href="http://homeguides.sfgate.com/standard-inside-door-sizes-84805.html"&gt;an interior residential doorway&lt;/a&gt; is around 32&amp;#8221; × 80&amp;#8221; (2:5), and &lt;a href="https://www.fas.harvard.edu/~loebinfo/loebinfo/Proportions/humanfigure.html"&gt;a human being&lt;/a&gt; is around 18&amp;#8221; × 69&amp;#8221;&amp;nbsp;(~1:4).&lt;/p&gt;
&lt;p&gt;Here are those measurements alongside the supposed sizes of Doomguy and a skinny door.  Something seems slightly&amp;nbsp;off.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-10-doom-metrics/doors.png" alt="An illustration of how even Doom's smaller doors are twice the size they should be"&gt;
&lt;/div&gt;

&lt;p&gt;The light blue boxes are the collision boxes; the dark blue boxes are Doomguy&amp;#8217;s apparent visible size.  I&amp;#8217;m using his waist rather than his shoulders, because &lt;em&gt;most&lt;/em&gt; people&amp;#8217;s (or at least, my) shoulders are not too much wider than their hips — however Doomguy is a beefcake carved out of pure muscle and doors would not be designed for&amp;nbsp;him.&lt;/p&gt;
&lt;p&gt;It seems as though all the architecture in Doom is about twice the size it &lt;em&gt;should&lt;/em&gt; be, for whatever reason.  Look what happens if I shrink the door, but not&amp;nbsp;Doomguy:&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-10-doom-metrics/doors2.png" alt="The same illustration as above, but with the door scaled down by half"&gt;
&lt;/div&gt;

&lt;p&gt;If I use some ZDoom shenanigans to shrink a door within the game, it looks rather more like a real door.  (You&amp;#8217;d have a hard time fitting through it without modifying the player&amp;#8217;s radius,&amp;nbsp;though.)&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-10-doom-metrics/door-ingame.png" alt="A 32×64 door in Doom"&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s not just architecture!  Keycard sprites are 14×16, which would be about a &lt;em&gt;foot and a half&lt;/em&gt; square.  The shotgun is 63 pixels long, a whopping 77&amp;#8221;.  A shotgun shell is 7 pixels long, almost 9&amp;#8221;.  The candelabra is 61 pixels tall — taller than Doomguy! — which is just over six feet.  This is ridiculous.  Halving all of these lengths makes them closer to something&amp;nbsp;reasonable.&lt;/p&gt;
&lt;p&gt;It appears, for whatever reason, that the world of Doom is roughly twice the size of the world we&amp;#8217;re used to.  (Or perhaps Doomguy has been shrunk by half.)  That matches my attempts at replicating real-world places to scale — they turned out unusually&amp;nbsp;cramped.&lt;/p&gt;
&lt;p&gt;64 units equal 1 meter, then.  Problem&amp;nbsp;solved.&lt;/p&gt;
&lt;p&gt;Ah, well, about that.  The 64×128 doors make sense, but&amp;#8230;  real doorways don&amp;#8217;t span the full height of a room, yet many Doom rooms are 128 tall.  Or less.  The starting area in &lt;span class="caps"&gt;E1M1&lt;/span&gt;, the hallway in &lt;span class="caps"&gt;MAP01&lt;/span&gt;, and the &lt;code&gt;DOOR1&lt;/code&gt; &lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;entrance&amp;#8221; door are all 72 units tall, which converts to less than four&amp;nbsp;feet.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s try something else.  Tom Hall &lt;a href="http://5years.doomworld.com/doombible/section15.shtml"&gt;says in the Doom Bible&lt;/a&gt; that the 128-unit walls in Wolfenstein 3D were eight feet thick, i.e. 16 units equal 1 foot.  The 64-unit grid is thus four feet, which seems reasonable.  The maximum step height would be 18 inches, and shallow steps would be 6 inches, which also seem reasonable — the stairs in my house are 7&amp;#8221; tall, and the most I can comfortably step up is 3 at a&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;But this still makes those 72-unit rooms be only four and a half feet&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t a problem that can be solved with different height and width scaling, because we&amp;#8217;ve come down to a conflict between door/room height and step height.  If those 72-unit rooms are a more reasonable eight feet tall (&lt;a href="https://www.quora.com/Whats-the-minimum-comfortable-height-for-an-apartment-ceiling"&gt;the standard&lt;/a&gt;) then 9 units are 1 foot, and Doomguy&amp;#8217;s step height is over two and a half feet.  Also, those 64×128 doors are over nine feet&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;The fact is, Doomguy has goofy proportions, and the environment was designed around them.  The textures have a gritty semi-realistic aesthetic, but comparing the levels to real-world architecture makes about as much sense as designing Mario levels around real places.  Actual humans cannot jump several times their own height, so the design language doesn&amp;#8217;t translate at&amp;nbsp;all.&lt;/p&gt;
&lt;h2 id="better-reference-points"&gt;&lt;a class="toclink" href="#better-reference-points"&gt;Better reference&amp;nbsp;points&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I can&amp;#8217;t use the real world to get a sense of scale, I might as well use Doom&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve gone through some large areas that are particularly memorable to me, areas that I have a good sense of, and measured their&amp;nbsp;dimensions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, I&amp;#8217;ve tried using a new kind of unit: Doom grid cells.  All of the numbers in parentheses are counts of 64-unit cells (for horizontal units only).  It turns out to be much easier to grapple with 22 vs 24 than 1408 vs&amp;nbsp;1536.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;E1M1&lt;/span&gt;:&amp;nbsp;Hangar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The iconic starting room is 640×768 (10×12) and 72 tall.  The recessed area in the middle is 448×320 (7×5) and 216&amp;nbsp;tall.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;E3M8&lt;/span&gt;:&amp;nbsp;Dis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The entire shuriken fits in a 3712×3584 (58×56) box.  The sky is 256 units above the inner part of the&amp;nbsp;ground.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP01&lt;/span&gt;:&amp;nbsp;Entryway&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The opening room is 640×448 (10×7) and 256 tall.  The subsequent hallway is 128 (2) wide and 72&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;The large room before the exit is 960 (15) deep and 192 tall.  Wow!  I always think 1024 (16) sounds really huge, but this one humble room is almost that&amp;nbsp;big.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP02&lt;/span&gt;:&amp;nbsp;Underhalls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The entire area with the little brick &amp;#8220;house&amp;#8221; is 576×896 (9×14), measured from the water.  The surrounding walkway is 88 tall; the grass is 216 below the&amp;nbsp;sky.&lt;/p&gt;
&lt;p&gt;The whole map fits in a 1920×1920 (30×30)&amp;nbsp;box.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP03&lt;/span&gt;: The&amp;nbsp;Gantlet&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The main large outdoor area is carved from a 1664×832 (26×13) rectangle.  The water is 264 below the&amp;nbsp;sky.&lt;/p&gt;
&lt;p&gt;The entire starting area just about fits in a 704×704 (11×11) box.  The hallway is 128 tall; the center room is 160&amp;nbsp;tall.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP07&lt;/span&gt;: Dead&amp;nbsp;Simple&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The inner part, including the walkway, is 1536×1472 (24×23).  The outdoor parts are 120 tall; the roof is 80 above the&amp;nbsp;walkway.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP08&lt;/span&gt;: Tricks and&amp;nbsp;Traps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The starting room is 448×448 (7×7) and 192&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;The cacodemon room is 448 (7) wide, 1792 (28) from the door to the far wall, and 288&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;The cyberdemon room is roughly 896×448 (14×7) and varies between 96 and 128&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;The room you teleport to with the pain elementals is 704×704 (11×11) and 144&amp;nbsp;tall.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP12&lt;/span&gt;: The&amp;nbsp;Factory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The entire map is 3776×4288 (59×67).  Outdoors is 208 tall.  The outer wall is 96 tall, and the main raised outdoor part is 80 high, 128 below the&amp;nbsp;sky.&lt;/p&gt;
&lt;p&gt;The main &amp;#8220;factory&amp;#8221; interior is 2560×1536&amp;nbsp;(40×24).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP14&lt;/span&gt;: The Inmost Dens&lt;/strong&gt;, the most detailed map in Doom &lt;span class="caps"&gt;II&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Water to sky is 200, and the floor is 16 above the water.  The brick wall surrounding everything is 32 high.  The pillars between areas are 88&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;The entire map fits in a 3520×3904 (55×61)&amp;nbsp;box.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP15&lt;/span&gt;: Industrial&amp;nbsp;Zone&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ground to sky is&amp;nbsp;600.&lt;/p&gt;
&lt;p&gt;The central structure — the one you jump off to reach the other side of the map — is 1600×1600&amp;nbsp;(25×25).&lt;/p&gt;
&lt;p&gt;The entire map, excluding the purely aesthetic waterfront, fits in a particularly pleasing 4416×6144 (69×96)&amp;nbsp;box.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP18&lt;/span&gt;:&amp;nbsp;Courtyard&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The grassy courtyard itself is, very roughly, 2112×1920 (33×30).  Grass to sky is&amp;nbsp;192.&lt;/p&gt;
&lt;p&gt;The surrounding area with the columns is 576 (9) at its&amp;nbsp;deepest.&lt;/p&gt;
&lt;p&gt;The separate cacodemon area with the blue key is 768×1216 (12×19) and 272&amp;nbsp;tall.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP23&lt;/span&gt;: Barrels o&amp;#8217;&amp;nbsp;Fun&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The starting hallway is 2240 (35) long, 384 (6) wide, and 256&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;The blood pit is 960×1024 (15×16) and a whopping 384 tall.  The hallways leading to it are 64×528 (1×8¼) and 80&amp;nbsp;tall.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP27&lt;/span&gt;: Monster&amp;nbsp;Condo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The starting area plus library form a rough 2624×1728 (41×27) rectangle.  The other main area plus pain elemental room form a rough 2432×1600 (38×25) rectangle.  Both are 128&amp;nbsp;tall.&lt;/p&gt;
&lt;p&gt;The twin marble rooms are about 576×1024 (9×16), not counting the 128 (2)-deep closets on the sides and backs.  Total height is 256, and the walkway is 80 above the&amp;nbsp;floor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP29&lt;/span&gt;: The Living&amp;nbsp;End&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The huge central blood pit is 3072×2816 (48×44) and a whopping 696 tall, which is almost five and a half 128s.  The platform you first see it from is 200 above the&amp;nbsp;floor.&lt;/p&gt;
&lt;p&gt;The central exit slab is 1216×1216&amp;nbsp;(19×19).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP30&lt;/span&gt;: Icon of&amp;nbsp;Sin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The main area is 2688×1728 (42×27) and 768 tall.  Each platform is 128 above the next.  Pressing the switch up top raises the lift by 512, or four&amp;nbsp;128s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;MAP32&lt;/span&gt;:&amp;nbsp;Grosse&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The main room is a 2176×2944 (34×46) rectangle, plus a 1024 (16)-deep lead-in&amp;nbsp;bit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It might help to know that the player&amp;#8217;s maximum run speed is about 583 units per second&amp;#8230;  or just over 9 grid cells per second.  With straferunning, it&amp;#8217;s about 11⅔ grid&amp;nbsp;cells.&lt;/p&gt;
&lt;p&gt;I also ran all of these maps through a slightly modified &lt;a href="http://doombsp.sourceforge.net/wad2svg/"&gt;wad2svg&lt;/a&gt; and combined them into a single image, depicting all of them at the same scale.  (If you like, I also have a &lt;em&gt;large&lt;/em&gt; &lt;a href="https://eev.ee/media/2016-10-10-doom-metrics/mapscale.svg.gz"&gt;&lt;span class="caps"&gt;SVG&lt;/span&gt; version&lt;/a&gt;.)&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-10-doom-metrics/mapscale.png" alt="Several maps all drawn to the same scale"&gt;
&lt;/div&gt;

&lt;p&gt;One pixel is 16 Doom units; four pixels are 64 units or one grid cell; the grid lines mark 1024 units or 16 grid cells.  The player can run across one grid cell in 1.8 seconds, or 1.4 seconds when&amp;nbsp;straferunning.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t know if I&amp;#8217;ve absorbed anything intuitively from this yet, but it&amp;#8217;ll give me something to refer back to the next time I try to map.  Seeing that the entirety of Underhalls just about fits inside the Icon of Sin room, for example, is downright fascinating and says a lot about the importance of breaking space&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;Ah, you got me, this whole post was an excuse to list those dimensions and make a collage of Doom&amp;nbsp;maps.&lt;/p&gt;
&lt;h2 id="postscript"&gt;&lt;a class="toclink" href="#postscript"&gt;Postscript&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What if I fixed the player&amp;nbsp;size?&lt;/p&gt;
&lt;p&gt;Assuming Tom Hall is correct that 1 real-world foot is equal to 16 Doom units, a six-foot-tall Marine should be 96 units tall.  With the magic of ZDoom, I can make that happen.  I can also fix the heights of the humanoid&amp;nbsp;enemies.&lt;/p&gt;
&lt;div class="prose-full-illustration"&gt;
&lt;img src="https://eev.ee/media/2016-10-10-doom-metrics/realprop.png" alt="The opening scene of Doom II, but with the player and visible enemies much larger"&gt;
&lt;/div&gt;

&lt;p&gt;The results are pretty hilarious.  Highly recommend running around for a bit with one of these.  Hint: you may want to bind a key to&amp;nbsp;&amp;#8220;crouch&amp;#8221;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eev.ee/media/2016-10-10-doom-metrics/realprop.pk3"&gt;Realistic proportions: player&amp;nbsp;only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eev.ee/media/2016-10-10-doom-metrics/realprop2.pk3"&gt;Realistic proportions: player, imps, and the three human&amp;nbsp;enemies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="doom"></category><category term="gamedev"></category></entry></feed>